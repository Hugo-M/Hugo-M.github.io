<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue中computed的实现</title>
      <link href="/2020/10/05/vue%E4%B8%ADcomputed%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2020/10/05/vue%E4%B8%ADcomputed%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>vue 中的 computed 属性的值只有当内部依赖的 data 属性变化时才会重新求值，这是怎么做到的呢。假设传入以下 computed ：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  ab: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以下是 vue 初始化的操作：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initState</span> (<span class="params">vm: Component</span>) </span>&#123;</span><br><span class="line">  vm._watchers = []</span><br><span class="line">  <span class="keyword">const</span> opts = vm.$options</span><br><span class="line">  <span class="keyword">if</span> (opts.props) initProps(vm, opts.props)</span><br><span class="line">  <span class="keyword">if</span> (opts.methods) initMethods(vm, opts.methods)</span><br><span class="line">  <span class="keyword">if</span> (opts.data) &#123;</span><br><span class="line">    initData(vm)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    observe(vm._data = &#123;&#125;, <span class="literal">true</span> <span class="comment">/* asRootData */</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (opts.computed) initComputed(vm, opts.computed)</span><br><span class="line">  <span class="keyword">if</span> (opts.watch &amp;&amp; opts.watch !== nativeWatch) &#123;</span><br><span class="line">    initWatch(vm, opts.watch)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>initComputed 做到的事情是实例化 Watcher 以及将属性挂载到实例上：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initComputed</span> (<span class="params">vm: Component, computed: Object</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//声明一个watchers，同时挂载到Vue实例上</span></span><br><span class="line">  <span class="keyword">const</span> watchers = vm._computedWatchers = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">  <span class="comment">//是否是服务器渲染</span></span><br><span class="line">  <span class="keyword">const</span> isSSR = isServerRendering()</span><br><span class="line"></span><br><span class="line">  <span class="comment">//遍历传入的computed</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> computed) &#123;</span><br><span class="line">    <span class="comment">//userDef是computed对象中的每一个方法</span></span><br><span class="line">    <span class="keyword">const</span> userDef = computed[key]</span><br><span class="line">    <span class="keyword">const</span> getter = <span class="keyword">typeof</span> userDef === <span class="string">'function'</span> ? userDef : userDef.get</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; getter == <span class="literal">null</span>) &#123;</span><br><span class="line">      warn(</span><br><span class="line">        <span class="string">`Getter is missing for computed property "<span class="subst">$&#123;key&#125;</span>".`</span>,</span><br><span class="line">        vm</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如果不是服务端渲染的，就创建一个Watcher实例</span></span><br><span class="line">    <span class="keyword">if</span> (!isSSR) &#123;</span><br><span class="line">      <span class="comment">// 关键代码，之后会提到</span></span><br><span class="line">      watchers[key] = <span class="keyword">new</span> Watcher( </span><br><span class="line">        vm,</span><br><span class="line">        getter || noop,</span><br><span class="line">        noop,</span><br><span class="line">        &#123; <span class="attr">lazy</span>: <span class="literal">true</span> &#125; <span class="comment">// 关键参数</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(key <span class="keyword">in</span> vm)) &#123;</span><br><span class="line">      <span class="comment">//如果computed中的key没有在vm中，通过defineComputed挂载上去</span></span><br><span class="line">      defineComputed(vm, key, userDef) <span class="comment">// 关键代码，之后会提到</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="comment">//后面都是警告computed中的key重名的</span></span><br><span class="line">      <span class="keyword">if</span> (key <span class="keyword">in</span> vm.$data) &#123;</span><br><span class="line">        warn(<span class="string">`The computed property "<span class="subst">$&#123;key&#125;</span>" is already defined in data.`</span>, vm)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (vm.$options.props &amp;&amp; key <span class="keyword">in</span> vm.$options.props) &#123;</span><br><span class="line">        warn(<span class="string">`The computed property "<span class="subst">$&#123;key&#125;</span>" is already defined as a prop.`</span>, vm)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到 Watcher 构造器接受了一个参数 <code>{ lazy: true }</code>，下边进入 Watcher 介绍该参数起的作用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下为关键代码</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (</span><br><span class="line">    vm: Component,</span><br><span class="line">    expOrFn: string | Function,</span><br><span class="line">    cb: Function,</span><br><span class="line">    options?: ?Object,</span><br><span class="line">    isRenderWatcher?: boolean</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">this</span>.vm = vm</span><br><span class="line">    vm._watchers.push(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">if</span> (options) &#123;</span><br><span class="line">      <span class="keyword">this</span>.deep = !!options.deep</span><br><span class="line">      <span class="keyword">this</span>.user = !!options.user</span><br><span class="line">      <span class="keyword">this</span>.lazy = !!options.lazy</span><br><span class="line">      <span class="keyword">this</span>.sync = !!options.sync</span><br><span class="line">      <span class="number">1</span>efore = options.before</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.deep = <span class="keyword">this</span>.user = <span class="keyword">this</span>.lazy = <span class="keyword">this</span>.sync = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.dirty = <span class="keyword">this</span>.lazy <span class="comment">// for lazy watchers</span></span><br><span class="line">    <span class="comment">// 此处省略代码...</span></span><br><span class="line">    <span class="comment">// 当 lazy 为 true 时，不计算值，返回 undefined</span></span><br><span class="line">    <span class="keyword">this</span>.value = <span class="keyword">this</span>.lazy ? <span class="literal">undefined</span> : <span class="keyword">this</span>.get()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此时开头假设的<code>this.ab</code>的值为<code>undefined</code>，这里可以看到<strong>计算属性在初始化的时候不计算其值</strong>。然后代码执行到<code>defineComputed(vm, key, userDef)</code>：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下为关键代码</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">defineComputed</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  target: any,</span></span></span><br><span class="line"><span class="function"><span class="params">  key: string,</span></span></span><br><span class="line"><span class="function"><span class="params">  userDef: Object | Function</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 不是服务端渲染就使用环境</span></span><br><span class="line">  <span class="keyword">const</span> shouldCache = !isServerRendering()</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> userDef === <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理 userDef 为函数的情况</span></span><br><span class="line">    sharedPropertyDefinition.get = shouldCache</span><br><span class="line">    ? createComputedGetter(key)</span><br><span class="line">    : createGetterInvoker(userDef)</span><br><span class="line">    sharedPropertyDefinition.set = noop</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 处理 userDef 为对象的情况</span></span><br><span class="line">    sharedPropertyDefinition.get = userDef.get</span><br><span class="line">    ? shouldCache &amp;&amp; userDef.cache !== <span class="literal">false</span></span><br><span class="line">      ? createComputedGetter(key)</span><br><span class="line">      : createGetterInvoker(userDef.get)</span><br><span class="line">    : noop</span><br><span class="line">    sharedPropertyDefinition.set = userDef.set || noop</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(target, key, sharedPropertyDefinition)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在<code>createComputedGetter</code>中用到了<code>watcher.dirty</code>，而其初始值由前面传入的参数<code>{ lazy: true }</code>决定。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createComputedGetter</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">computedGetter</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> watcher = <span class="keyword">this</span>._computedWatchers &amp;&amp; <span class="keyword">this</span>._computedWatchers[key]</span><br><span class="line">    <span class="keyword">if</span> (watcher) &#123;</span><br><span class="line">      <span class="comment">// watcher.dirty 为 true ，调用 watcher.evaluate()</span></span><br><span class="line">      <span class="keyword">if</span> (watcher.dirty) &#123;</span><br><span class="line">        watcher.evaluate()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (Dep.target) &#123;</span><br><span class="line">        <span class="comment">// 依赖收集，很关键，保证依赖变更时重新求值</span></span><br><span class="line">        watcher.depend()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> watcher.value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后执行<code>Object.defineProperty(target, key, sharedPropertyDefinition)</code>，代码执行到这里其实是把计算属性的 setter 和 getter 创建好了。所以，<strong>计算属性如果未被消费不会计算值</strong>，其值始终是 <code>undefined</code>。</p><p>当计算属性被用到时（例如在 render 或 methods 中），此时会触发<code>computedGetter</code>，进而执行<code>evaluate</code>：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">evaluate</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.value = <span class="keyword">this</span>.get()</span><br><span class="line">  <span class="keyword">this</span>.dirty = <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>调用<code>this.get()</code>会进行依赖收集，最后返回计算属性的值，此时终于获取到了计算属性的值。这里为什么要将<code>this.dirty</code>设为<code>false</code>呢，是为了实现计算属性基于它的依赖进行缓存的，也就依赖没变时，不重新计算，而是使用缓存。<br>回顾以下代码，在第一次获取值后，<code>watcher.lazy</code>始终为<code>false</code>，也就永远不会执行<code>watcher.evaluate()</code>，所以这个计算属性永远不会重新求值，一直使用上一次获得的值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (watcher.dirty) &#123;</span><br><span class="line">  watcher.evaluate()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>那什么时候会重新求值呢，当<code>watcher.dirty</code>为<code>true</code>时，怎么改变这个值呢，当依赖变更的时候，即在<code>watcher.update()</code>中：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">update () &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.lazy) &#123;</span><br><span class="line">    <span class="keyword">this</span>.dirty = <span class="literal">true</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.sync) &#123;</span><br><span class="line">    <span class="keyword">this</span>.run()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    queueWatcher(<span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以开头的假设为例，当<code>this.a</code>改变时，将触发<code>dep.notify()</code>，然后执行该<code>dep</code>中所有 <code>watcher</code>的<code>update</code>方法，其中就包括<code>this.ab</code>的<code>watcher.update()</code>（这个<code>watcher</code>是在前面的<code>watcher.depend()</code>中添加的），此时<code>watcher.dirty</code>会被改变为<code>true</code>，因此当再次取<code>this.ab</code>的值时，会重新计算。</p><h3 id="计算属性的依赖变更如何触发渲染"><a href="#计算属性的依赖变更如何触发渲染" class="headerlink" title="计算属性的依赖变更如何触发渲染"></a>计算属性的依赖变更如何触发渲染</h3><p>如果计算属性在模板或 render 函数中被使用，在触发<code>计算watcher.update()</code>后，会触发<code>渲染watcher.update()</code>，此时取<code>this.ab</code>，会得到重新计算后的值。<br>但怎么保证<code>渲染watcher.update()</code>在<code>计算watcher.update()</code>后执行呢，因为如果在之前执行得到的<code>this.ab</code>会是旧值（因为此时<code>watcher.dirty</code>还为<code>false</code>）。这涉及到全局的 <code>Dep.target</code> 状态是用一个栈 <code>targetStack</code> 来保存。</p><p>假设在 render 函数中使用了<code>this.ab</code>：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">render () &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.ab&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当执行 render 函数时，此时<code>Dep.target</code>指向<code>渲染watcher</code>，<code>targetStack = [渲染watcher]</code>，执行<code>this.a + 1</code>，读取到了<code>this.a</code>，触发<code>a</code>的<code>get</code>方法，此时<code>Dep.target</code>指向<code>计算watcher</code>，<code>targetStack = [渲染watcher，计算watcher]</code>，调用<code>dep.depend()</code>收集<code>计算watcher</code>作为依赖，<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dep.depend()</span></span><br><span class="line">depend () &#123;</span><br><span class="line">  <span class="keyword">if</span> (Dep.target) &#123; <span class="comment">// 此时`Dep.target`指向`计算watcher`</span></span><br><span class="line">    Dep.target.addDep(<span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>经历了这样的一个收集的流程后，此时的一些状态：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ab 的计算watcher</span></span><br><span class="line">&#123;</span><br><span class="line">  deps: [ a的dep ],</span><br><span class="line">  dirty: <span class="literal">false</span>, <span class="comment">// 求值完了 所以是false</span></span><br><span class="line">  value: <span class="number">2</span>,</span><br><span class="line">  getter: ƒ ab(),</span><br><span class="line">  lazy: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a的dep</span></span><br><span class="line">&#123;</span><br><span class="line">  subs: [ ab的计算watcher ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时求值结束，回到<code>计算watcher</code>的<code>get</code>方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// watcher.get</span></span><br><span class="line"><span class="keyword">get</span> () &#123;</span><br><span class="line">  pushTarget(<span class="keyword">this</span>)</span><br><span class="line">  <span class="keyword">let</span> value</span><br><span class="line">  <span class="keyword">const</span> vm = <span class="keyword">this</span>.vm</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    value = <span class="keyword">this</span>.getter.call(vm, vm)</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// `计算watcher`出栈，此时`Dep.target`指向`渲染watcher`，`targetStack = [渲染watcher]`。</span></span><br><span class="line">    popTarget()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>进入<code>this.ab</code>的<code>getter</code>函数：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(vm, <span class="string">'ab'</span>, &#123; </span><br><span class="line">  <span class="keyword">get</span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> (watcher.dirty) &#123;</span><br><span class="line">      watcher.evaluate()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (Dep.target) &#123; <span class="comment">// 此时`Dep.target`指向`渲染watcher`</span></span><br><span class="line">      watcher.depend()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> watcher.value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// watcher.depend</span></span><br><span class="line">depend () &#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="keyword">this</span>.deps.length</span><br><span class="line">  <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">    <span class="keyword">this</span>.deps[i].depend()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为 <code>ab 的计算watcher</code> 的 deps 里保存了 <code>a</code> 的 dep，因此又会调用 <code>a</code> 的 <code>dep.depend()</code>，会把<code>渲染watcher</code> 存放进自身的 subs 中，最后<code>a</code>的 dep 如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  subs: [ ab的计算watcher，渲染watcher ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>一切初始化已经完成，若改变<code>a</code>的值，将触发 <code>a</code> 的 <code>dep.notify</code>：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">notify () &#123;</span><br><span class="line">  <span class="keyword">const</span> subs = <span class="keyword">this</span>.subs.slice()</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = subs.length; i &lt; l; i++) &#123;</span><br><span class="line">    subs[i].update()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上代码依次调用了<code>计算watcher.update()</code>和<code>渲染watcher.update()</code>，保证<code>渲染watcher.update()</code>在<code>计算watcher.update()</code>后执行，此时 render 函数中能获取到最新的计算属性的值。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>通过改变<code>this.dirty</code>的值来实现缓存，当<code>this.dirty === true</code>时，再次访问才会执行<code>watcher.evaluate()</code>获得新值。</li><li>计算属性的依赖变更时触发<code>计算watcher.update()</code>，执行<code>this.dirty = true</code>，使得再次获取计算属性值时被重新计算。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js变量提升</title>
      <link href="/2020/09/02/js%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87/"/>
      <url>/2020/09/02/js%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87/</url>
      
        <content type="html"><![CDATA[<h3 id="全局中的解析和执行过程"><a href="#全局中的解析和执行过程" class="headerlink" title="全局中的解析和执行过程"></a>全局中的解析和执行过程</h3><p>预处理：创建一个词法环境（LexicalEnvironment，在后面简写为LE），扫描JS中的<strong>用声明的方式声明的函数</strong>和<strong>用var定义的变量</strong>，将它们加到预处理阶段的词法环境中去。</p><h4 id="一、全局环境中如何理解预处理"><a href="#一、全局环境中如何理解预处理" class="headerlink" title="一、全局环境中如何理解预处理"></a>一、全局环境中如何理解预处理</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;<span class="comment">//用var定义的变量，以赋值</span></span><br><span class="line"><span class="keyword">var</span> b;<span class="comment">//用var定义的变量，未赋值</span></span><br><span class="line">c = <span class="number">3</span>;<span class="comment">//未定义，直接赋值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>)</span>&#123;<span class="comment">//用声明的方式声明的函数</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> e = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//函数表达式</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'world'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在预处理时上面代码创建词法作用域可以这样表示：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LE &#123; <span class="comment">// 此时的LE相当于window</span></span><br><span class="line">    a:<span class="literal">undefined</span></span><br><span class="line">    b:<span class="literal">undefined</span></span><br><span class="line">    d:对函数的一个引用</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h4 id="二、命名冲突的处理"><a href="#二、命名冲突的处理" class="headerlink" title="二、命名冲突的处理"></a>二、命名冲突的处理</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(f);</span><br><span class="line"><span class="keyword">var</span> f = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'foodoir'</span>);&#125;</span><br><span class="line"><span class="comment">// 输出 function f()&#123;console.log('foodoir');&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(f);</span><br><span class="line"><span class="keyword">var</span> f = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'foodoir'</span>);&#125;</span><br><span class="line"><span class="comment">// 输出 function f()&#123;console.log('foodoir');&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(f);</span><br><span class="line"><span class="keyword">var</span> f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> f = <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 输出 undefined</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(f);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'foodoir'</span>);&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'hello world'</span>);&#125;</span><br><span class="line"><span class="comment">// 输出 function f()&#123;console.log('hello world');&#125;</span></span><br></pre></td></tr></table></figure><p>原因：<strong>处理函数声明有冲突时，会覆盖；处理变量声明有冲突时，会忽略</strong>。在既有函数声明又有变量声明的时候，函数声明的权重总是高一些，所以最终结果往往是指向函数声明的引用。</p><h3 id="函数中的解析和执行过程"><a href="#函数中的解析和执行过程" class="headerlink" title="函数中的解析和执行过程"></a>函数中的解析和执行过程</h3><p>函数中的解析和执行过程的区别不是很大，但是函数中有个arguments我们需要注意一下，我们来看下面的例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">100</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">f(<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure></p><p>分析函数的预处理，它和全局的预处理类似，它的词法结构如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LE &#123;</span><br><span class="line">    b: <span class="number">2</span></span><br><span class="line">    a: 指向函数的引用</span><br><span class="line">    <span class="built_in">arguments</span>：<span class="number">2</span> <span class="comment">// 调用函数时实际调用的参数个数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出的结果为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></p><p>当传入的参数值有一个时：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></p><p>这个时候的词法结构如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LE &#123;</span><br><span class="line">    b: <span class="literal">undefined</span></span><br><span class="line">    a: 指向函数的引用</span><br><span class="line">    <span class="built_in">arguments</span>：<span class="number">2</span> <span class="comment">// 调用函数时实际调用的参数个数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="关于JS作用域和作用域链"><a href="#关于JS作用域和作用域链" class="headerlink" title="关于JS作用域和作用域链"></a>关于JS作用域和作用域链</h3><p>在编程语言中，作用域一般可以分为四类：块级作用域、函数作用域、动态作用域、词法作用域（也称静态作用域）</p><h4 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h4><p>在其它C类语言中，用大括号括起来的部分被称为作用域，但是在javascript并没有块级作用域，来看下面一个例子：~<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br></pre></td></tr></table></figure></p><p>它的结果为3，原因：执行完for循环后，此时的i的值为3，由于javascript并没有块级作用域，在后面仍有效。</p><h4 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h4><p>没有纯粹的函数的作用域</p><h4 id="动态作用域"><a href="#动态作用域" class="headerlink" title="动态作用域"></a>动态作用域</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">    f();</span><br><span class="line">&#125;</span><br><span class="line">f1();</span><br></pre></td></tr></table></figure><p>如果说存在动态作用域，那么结果应该是分别为1，但是最终结果是：x is not defined。所以javascript也没有动态作用域</p><h4 id="词法作用域（也称静态作用域）"><a href="#词法作用域（也称静态作用域）" class="headerlink" title="词法作用域（也称静态作用域）"></a>词法作用域（也称静态作用域）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">    f();</span><br><span class="line">&#125;</span><br><span class="line">f1();</span><br></pre></td></tr></table></figure><p>弹出100。说明javascript的作用域为静态作用域 ，分析：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// f [[scope]]  == LE ==  window</span></span><br><span class="line"><span class="comment">//创建一个作用域对象f [[scope]]，它等于创建它时候的词法环境LE（据前面的知识我们又可以知道此时的词法环境等于window）</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">    f();<span class="comment">//真正执行的时候（一步一步往上找）LE  -&gt;f.[[scope]]  ==  window</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在词法解析阶段，就已经确定了相关的作用域。作用域还会形成一个相关的链条，我们称之为作用域链。来看下面的例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;    <span class="comment">// f.scope == window</span></span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">100</span>;<span class="comment">//f.LE == &#123;x:100,g:函数&#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> g = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">// g.scope = f.LE        </span></span><br><span class="line">        alert(x);</span><br><span class="line">    &#125;</span><br><span class="line">    g();<span class="comment">//在执行g的时候，先找 g.scope，没有的话再找 f.LE，还没有的话找f.scope……一直往上找window    </span></span><br><span class="line">&#125;</span><br><span class="line">f();</span><br></pre></td></tr></table></figure></p><p>new Function的情况又不一样，<strong>Function 创建的函数只能在全局作用域中运行</strong>。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x= <span class="number">123</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">//g.[[scope]]  == window</span></span><br><span class="line">    <span class="keyword">var</span> g = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">""</span>,<span class="string">"alert(x)"</span>);</span><br><span class="line">    g();</span><br><span class="line">&#125;</span><br><span class="line">f(); <span class="comment">//结果为：123</span></span><br></pre></td></tr></table></figure></p><p><a href="https://www.cnblogs.com/libin-1/p/5979303.html" target="_blank" rel="noopener">原文地址</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this指向</title>
      <link href="/2020/09/02/this%E6%8C%87%E5%90%91/"/>
      <url>/2020/09/02/this%E6%8C%87%E5%90%91/</url>
      
        <content type="html"><![CDATA[<p>关于 this 指向，部分情况要区分严格模式和非严格模式（正常模式）：</p><ul><li>作为普通函数调用：严格模式下，this的值是 undefined，非严格模式下，this指向全局对象。</li><li>作为方法调用：this指向所属对象。</li><li>作为构造函数调用：this指向实例化的对象。</li><li>通过call, apply, bind调用：如果指定了第一个参数thisArg，this的值就是thisArg的值（如果是原始值，会包装为对象）；如果不传thisArg，要判断严格模式，严格模式下this是undefined，非严格模式下this指向全局对象。</li></ul><a id="more"></a><blockquote><p>严格模式通过在脚本或函数的头部添加 <code>&quot;use strict&quot;;</code> 表达式来声明。<a href="https://segmentfault.com/a/1190000015798019" target="_blank" rel="noopener">严格模式和非严格模式的区别</a></p></blockquote><h3 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    num: <span class="number">2</span>,</span><br><span class="line">    add: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num = <span class="number">3</span>;</span><br><span class="line">        <span class="comment">// 这里的立即指向函数，因为我们没有手动去指定它的this指向，所以都会指向window</span></span><br><span class="line">        (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 所有这个 this.num 就等于 window.num</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.num); <span class="comment">// **严格模式下此行报错**</span></span><br><span class="line">            <span class="keyword">this</span>.num = <span class="number">4</span>;</span><br><span class="line">        &#125;)();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.num);</span><br><span class="line">    &#125;,</span><br><span class="line">    sub: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.num) <span class="comment">// **严格模式下此行报错**</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在通过obj.add 调用add 函数时，函数的this指向的是obj,这时候第一个this.num=3</span></span><br><span class="line"><span class="comment"> * 相当于 obj.num = 3 但是里面的立即指向函数this依然是window,</span></span><br><span class="line"><span class="comment"> * 所以 立即执行函数里面console.log(this.num)输出1，同时 window.num = 4</span></span><br><span class="line"><span class="comment"> * 立即执行函数之后，再输出`this.num`,这时候`this`是`obj`,所以输出3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">obj.add() <span class="comment">// 输出 1 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过上面`obj.add`的执行，obj.name 已经变成了3</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.num) <span class="comment">// 输出3</span></span><br><span class="line"><span class="built_in">console</span>.log(num) <span class="comment">// 输出4</span></span><br><span class="line"><span class="comment">// 如果将obj.sub 赋值给一个新的变量，那么这个函数的作用域将会变成新变量的作用域</span></span><br><span class="line"><span class="keyword">const</span> sub = obj.sub</span><br><span class="line"><span class="comment">// 作用域变成了window </span></span><br><span class="line">sub() <span class="comment">// 输出4</span></span><br></pre></td></tr></table></figure><p>非严格模式下输出：<code>1</code>、<code>3</code>、<code>3</code>、<code>4</code>、<code>4</code></p><p>严模式下报错：<code>Cannot read property &#39;num&#39; of undefined</code></p><h3 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">num</span>: <span class="number">20</span>&#125;</span><br><span class="line">obj.fn = (<span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.num = num * <span class="number">3</span></span><br><span class="line">  num++ <span class="comment">// **严格模式下此行报错**</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.num += n</span><br><span class="line">    num++</span><br><span class="line">    <span class="built_in">console</span>.log(num)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(obj.num)</span><br><span class="line"><span class="keyword">var</span> fn = obj.fn</span><br><span class="line">fn(<span class="number">5</span>)</span><br><span class="line">obj.fn(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">console</span>.log(num, obj.num) <span class="comment">// **严格模式下此行报错**</span></span><br></pre></td></tr></table></figure><p>非严格模式下输出：<code>22</code>、<code>23</code>、<code>65</code>、<code>30</code></p><p>严模式下报错：<code>Cannot set property &#39;num&#39; of undefined</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《原则》-生活原则</title>
      <link href="/2019/07/07/%E3%80%8A%E5%8E%9F%E5%88%99%E3%80%8B-%E7%94%9F%E6%B4%BB%E5%8E%9F%E5%88%99/"/>
      <url>/2019/07/07/%E3%80%8A%E5%8E%9F%E5%88%99%E3%80%8B-%E7%94%9F%E6%B4%BB%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<p>你想要什么，事实是什么，如何实现愿望。考察影响你的那些事物的规律，理解背后的因果关系，并利用之。</p><ul><li>做到头脑极度开放</li><li>你的未来取决于你的视角</li><li>没有痛苦就没有收获，痛苦 + 反思 = 进步</li><li>五步实现愿望：明确目标、找出并不容忍问题、找打问题的根源、规划方案、坚定地执行</li><li>如果你找到了解决方案，弱点是不重要的</li><li>只有设身处地，才能合理评估另一种观点的价值</li><li>寻找最好的答案，而不是你自己能得出的最好答案</li><li>为最坏的情况做准备</li><li>影响好决策的最大威胁是有害的情绪</li><li>不必过于精确，明白关键性的 20% </li><li>提高押对的概率始终有价值</li><li>先把“必做之事”做完，在做“想做之事”</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>瘫坐</title>
      <link href="/2019/04/24/%E7%98%AB%E5%9D%90/"/>
      <url>/2019/04/24/%E7%98%AB%E5%9D%90/</url>
      
        <content type="html"><![CDATA[<p>黑暗伴随零星灯光延伸到无限远处<br>伴着疲惫瘫坐<br>什么都不想做<br>就这样凝望时光的剪影<br>如若可以<br>宁静的<br>安详的入睡<br>夜色暗<br>夏风飘</p><a id="more"></a><p>岁月如烟<br>容颜褪色<br>在坚实的大地之上<br>是否可以再次获得<br>激情的漩涡</p><p>一路春花落<br>不忍回头<br>都是美梦与过错</p><blockquote><p><em>语寺</em><br><em>2014.5.24</em></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> writing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用git命令</title>
      <link href="/2019/04/15/%E5%B8%B8%E7%94%A8git%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/04/15/%E5%B8%B8%E7%94%A8git%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>git reset [commit]</td><td>重置当前分支的指针为指定 commit，同时重置暂存区，但工作区不变</td></tr><tr><td>git reset –hard</td><td>重置暂存区与工作区，与上一次 commit 保持一致</td></tr><tr><td>git add [file1] … (git add [dir]）</td><td>添加指定文件(目录)到暂存区</td></tr><tr><td>git rm [file1] …</td><td>删除工作区文件，并且将这次删除放入暂存区</td></tr><tr><td>git commit -m [message]</td><td>提交暂存区到仓库区</td></tr><tr><td>git branch</td><td>列出所有本地分支</td></tr><tr><td>git branch -r</td><td>列出所有远程分支</td></tr><tr><td>git branch -a</td><td>列出所有本地分支和远程分支</td></tr><tr><td>git branch [branch-name]</td><td>新建一个分支，但依然停留在当前分支</td></tr><tr><td>git branch -d [branch-name]</td><td>删除分支</td></tr><tr><td>git checkout -b [branch]</td><td>新建一个分支，并切换到该分支</td></tr><tr><td>git push origin [local_branch]:[remote_branch]</td><td>将本地分支推送到远程</td></tr><tr><td>git checkout [branch-name]</td><td>切换到指定分支，并更新工作区</td></tr><tr><td>git checkout -</td><td>切换到上一个分支</td></tr><tr><td>git checkout [file]</td><td>恢复暂存区的指定文件到工作区</td></tr><tr><td>git merge [branch]</td><td>合并指定分支到当前分支</td></tr><tr><td>git tag [tag]</td><td>新建一个 tag 在当前 commit</td></tr><tr><td>git log(git reflog)</td><td>显示当前分支的(最近)版本历史</td></tr><tr><td>git diff HEAD</td><td>显示工作区与当前分支最新 commit 之间的差异</td></tr><tr><td>git push origin [branch]</td><td>上传本地指定分支到远程仓库</td></tr></tbody></table><blockquote><p><code>git checkout</code>可以缩写为<code>gco</code></p></blockquote><blockquote><p><code>HEAD</code> 指向当前分支，<code>HEAD^n</code>表示当前分支的第 n 个父提交，<code>HEAD~n</code>表示当前分支的第 n 个父提交，用于第一父母存在歧义的情况下</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Koa源码学习</title>
      <link href="/2019/03/19/Koa%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/03/19/Koa%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/koajs/koa" target="_blank" rel="noopener">Koa2 的源码</a> 相当的简短，因为抽离了路由、模板引擎等模块，只提供一个架子，而几乎所有的功能都需要由第三方中间件完成。阅读时建议对照源码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">. lib</span><br><span class="line">├── application.js  ---------- 构造 app 对象</span><br><span class="line">├── context.js  -------------- 构造 ctx 对象</span><br><span class="line">├── request.js --------------- 构造 req 对象</span><br><span class="line">└── response.js  ------------- 构造 res 对象</span><br></pre></td></tr></table></figure><p>底层原理同 express，即代理<code>http.createServer(requestHandler)</code>中的<code>requestHandler</code>，使用中间件来处理请求。</p><a id="more"></a><h3 id="代码梳理"><a href="#代码梳理" class="headerlink" title="代码梳理"></a>代码梳理</h3><p><code>application.js</code>中构造了 app 对象，初始化 context 属性 ，定义了 listen、use 等方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ... 省略部分代码</span></span><br><span class="line"><span class="keyword">const</span> Emitter = <span class="built_in">require</span>(<span class="string">"events"</span>);</span><br><span class="line"><span class="keyword">const</span> onFinished = <span class="built_in">require</span>(<span class="string">"on-finished"</span>);</span><br><span class="line"><span class="keyword">const</span> response = <span class="built_in">require</span>(<span class="string">"./response"</span>);</span><br><span class="line"><span class="keyword">const</span> compose = <span class="built_in">require</span>(<span class="string">"koa-compose"</span>);</span><br><span class="line"><span class="keyword">const</span> context = <span class="built_in">require</span>(<span class="string">"./context"</span>);</span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">"./request"</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Application</span> <span class="keyword">extends</span> <span class="title">Emitter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.middleware = []; <span class="comment">// 存放中间件</span></span><br><span class="line">    <span class="keyword">this</span>.context = <span class="built_in">Object</span>.create(context);</span><br><span class="line">    <span class="keyword">this</span>.request = <span class="built_in">Object</span>.create(request);</span><br><span class="line">    <span class="keyword">this</span>.response = <span class="built_in">Object</span>.create(response);</span><br><span class="line">  &#125;</span><br><span class="line">  listen(...args) &#123;</span><br><span class="line">    <span class="keyword">const</span> server = http.createServer(<span class="keyword">this</span>.callback());</span><br><span class="line">    <span class="keyword">return</span> server.listen(...args);</span><br><span class="line">  &#125;</span><br><span class="line">  callback() &#123;</span><br><span class="line">    <span class="comment">// compose 函数把所有的中间件变成一个函数，后续介绍</span></span><br><span class="line">    <span class="keyword">const</span> fn = compose(<span class="keyword">this</span>.middleware);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用 Emitter 中的 listenerCount 判断是否有error事件的监听器</span></span><br><span class="line">    <span class="comment">// 如果没有会为 error 事件注册默认的事件监听方法 onerror</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.listenerCount(<span class="string">"error"</span>)) <span class="keyword">this</span>.on(<span class="string">"error"</span>, <span class="keyword">this</span>.onerror);</span><br><span class="line">    <span class="keyword">const</span> handleRequest = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 创建的 ctx 对象，并使 ctx.request = this.request, ctx.response = this.response</span></span><br><span class="line">      <span class="keyword">const</span> ctx = <span class="keyword">this</span>.createContext(req, res);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.handleRequest(ctx, fn);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> handleRequest;</span><br><span class="line">  &#125;</span><br><span class="line">  handleRequest(ctx, fnMiddleware) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = ctx.res;</span><br><span class="line">    res.statusCode = <span class="number">404</span>;</span><br><span class="line">    <span class="keyword">const</span> onerror = <span class="function"><span class="params">err</span> =&gt;</span> ctx.onerror(err);</span><br><span class="line">    <span class="comment">// respond 内读取ctx信息，把数据写入 res 中并响应请求</span></span><br><span class="line">    <span class="keyword">const</span> handleResponse = <span class="function"><span class="params">()</span> =&gt;</span> respond(ctx);</span><br><span class="line">    <span class="comment">// onFinished 确保一个流在关闭、完成和报错时都会执行注册的回调函数</span></span><br><span class="line">    onFinished(res, onerror);</span><br><span class="line">    <span class="comment">// fnMiddleware(ctx) 返回一个 Promise</span></span><br><span class="line">    <span class="keyword">return</span> fnMiddleware(ctx)</span><br><span class="line">      .then(handleResponse)</span><br><span class="line">      .catch(onerror);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="compose"><a href="#compose" class="headerlink" title="compose"></a>compose</h3><p><code>compose</code>接受一个包含中间件的数组作为参数，返回一个函数，且该函数会返回一个 Promise 。<code>compose</code>是 koa 洋葱模型的关键 ，来看一下 koa-compose 的源码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">middleware</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">context, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> dispatch(<span class="number">0</span>);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 如果一个中间件内多次调用 next，报错</span></span><br><span class="line">      <span class="keyword">if</span> (i &lt;= index)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"next() called multiple times"</span>));</span><br><span class="line">      index = i;</span><br><span class="line">      <span class="keyword">let</span> fn = middleware[i];</span><br><span class="line">      <span class="comment">// 运行到最后一个中间件时，调用参数 next</span></span><br><span class="line">      <span class="keyword">if</span> (i === middleware.length) fn = next;</span><br><span class="line">      <span class="keyword">if</span> (!fn) <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 执行当前中间件，把 ctx 和 next（ 也就是dispatch(i + 1) ）传入，执行 dispatch(i + 1) 就会进入下一个中间件</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(fn(context, dispatch.bind(<span class="literal">null</span>, i + <span class="number">1</span>)));</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中间件内去调用 next 方法就是调用<code>dispatch(i + 1)</code>，即执行下一个中间件（入栈），以此类推执行到最后一个中间件（所有中间件入栈）。当最后一个中间件执行完毕，出栈，然后执行前一个中间件的处理函数，以此类推执行到第一个中间件出栈。<br>其实就是执行层层嵌套的函数，这个和 express 一样，但是 koa 的中间件模式为洋葱型，express 为直线型。这因为考虑异步中间件的情况，koa 的 next 方法会返回一个 promise 实例，因此使用<code>await next()</code>可以用同步的写法处理异步中间件。express 的 next 方法只是遍历 stack 找出并执行匹配的中间件，而没有返回 promise 实例，所以无法使用<code>async/await</code>特性，在处理异步中间件时，只能是线性的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个 koa 洋葱模型的例子</span></span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">"koa"</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> start = <span class="built_in">Date</span>.now();</span><br><span class="line">  <span class="keyword">await</span> next();</span><br><span class="line">  <span class="keyword">const</span> ms = <span class="built_in">Date</span>.now() - start;</span><br><span class="line">  ctx.set(<span class="string">"X-Response-Time"</span>, <span class="string">`<span class="subst">$&#123;ms&#125;</span>ms`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> start = <span class="built_in">Date</span>.now();</span><br><span class="line">  <span class="keyword">await</span> next();</span><br><span class="line">  <span class="keyword">const</span> ms = <span class="built_in">Date</span>.now() - start;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;ctx.method&#125;</span> <span class="subst">$&#123;ctx.url&#125;</span> - <span class="subst">$&#123;ms&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.body = <span class="string">"Hello World"</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>结合具体案例来看一下，<code>compose</code>函数的作用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> middleware = [</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"foo1"</span>);</span><br><span class="line">    next();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"foo2"</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"bar1"</span>);</span><br><span class="line">    next();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"bar2"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">var</span> fn = compose(middleware);</span><br></pre></td></tr></table></figure><p>此时 fn 可以视为下面的函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(foo(context, bar(context, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve()</span><br><span class="line">    &#125;)));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以当执行<code>fn(ctx).then(handleResponse).catch(onerror);</code>时，输出如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">foo1;</span><br><span class="line">bar1;</span><br><span class="line">bar2;</span><br><span class="line">foo2;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>express源码学习</title>
      <link href="/2019/03/16/express%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/03/16/express%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>打开 <a href="https://github.com/expressjs/express" target="_blank" rel="noopener">Express4 的源码</a>，目录结构很清晰，阅读时建议对照源码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">. lib</span><br><span class="line">├── middleware  -------------- 中间件</span><br><span class="line">    ├── init.js   ------------ 增强 req 对象和 res 对象</span><br><span class="line">    └── query.js  ------------ 添加 req.query</span><br><span class="line">├── router  ------------------ 路由</span><br><span class="line">    ├── index.js  ------------ Router 构造器</span><br><span class="line">    ├── layer.js  ------------ 中间件和路由的抽象</span><br><span class="line">    └── route.js  ------------ 实现 router.route</span><br><span class="line">├── application.js  ---------- app 对象拓展</span><br><span class="line">├── express.js  -------------- 项目入口</span><br><span class="line">├── request.js --------------- req 对象拓展</span><br><span class="line">├── response.js  ------------- res 对象拓展</span><br><span class="line">├── utils.js  ---------------- 工具集</span><br><span class="line">└── view.js  ----------------- 模板引擎</span><br></pre></td></tr></table></figure><h3 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h3><p>Express 框架建立在 node.js 内置的 http 模块上，http 模块生成服务器的原始代码如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">  response.writeHead(<span class="number">200</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span> &#125;);</span><br><span class="line">  response.end(<span class="string">"Hello world!"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="string">"localhost"</span>);</span><br></pre></td></tr></table></figure><p>Express 代理了<code>http.createServer(requestHandler)</code>中的<code>requestHandler</code>，并使用注册后的中间件和路由，匹配响应传来的用户请求。</p><a id="more"></a><h3 id="代码梳理"><a href="#代码梳理" class="headerlink" title="代码梳理"></a>代码梳理</h3><p>下面是一个简单的 Express 使用案例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="comment">// first step</span></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// second step</span></span><br><span class="line">app.get(<span class="string">"/"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">"Hello world!"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// third step</span></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h4 id="third-step"><a href="#third-step" class="headerlink" title="third step"></a>third step</h4><p>app.listen 方法在 <code>application.js</code> 中被定义。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// application.js</span></span><br><span class="line">app.listen = <span class="function"><span class="keyword">function</span> <span class="title">listen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> server = http.createServer(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">return</span> server.listen.apply(server, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>启动一个服务，并指定监听端口，这里的关键是<code>http.createServer(this)</code>中的<code>this</code>（也就是<code>app</code>），即<code>http.createServer(requestHandler)</code>中的<code>requestHandler</code>，<code>this</code>应该是一个函数<code>(request, response) =&gt; {}</code>，下面介绍 express 如何改造这个函数。</p><h4 id="first-step"><a href="#first-step" class="headerlink" title="first step"></a>first step</h4><p>express 方法就是 <code>express.js</code> 中的 createApplication 方法，该方法返回了一个函数，即<code>requestHandler</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// express.js</span></span><br><span class="line"><span class="keyword">var</span> proto = <span class="built_in">require</span>(<span class="string">"./application"</span>);</span><br><span class="line"><span class="keyword">var</span> req = <span class="built_in">require</span>(<span class="string">"./request"</span>);</span><br><span class="line"><span class="keyword">var</span> res = <span class="built_in">require</span>(<span class="string">"./response"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createApplication</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> app = <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    app.handle(req, res, next);</span><br><span class="line">  &#125;;</span><br><span class="line">  mixin(app, EventEmitter.prototype, <span class="literal">false</span>);</span><br><span class="line">  <span class="comment">// 混入 application 中的属性，其中包括 app.handle 、app.init、app.get、app.listen</span></span><br><span class="line">  mixin(app, proto, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 暴露增强后的 req 对象，会在 middleware/init.js 中被用到</span></span><br><span class="line">  app.request = <span class="built_in">Object</span>.create(req, &#123;</span><br><span class="line">    app: &#123; <span class="attr">configurable</span>: <span class="literal">true</span>, <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">writable</span>: <span class="literal">true</span>, <span class="attr">value</span>: app &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 暴露增强后的 res 对象，会在 middleware/init.js 中被用到</span></span><br><span class="line">  app.response = <span class="built_in">Object</span>.create(res, &#123;</span><br><span class="line">    app: &#123; <span class="attr">configurable</span>: <span class="literal">true</span>, <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">writable</span>: <span class="literal">true</span>, <span class="attr">value</span>: app &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// app.init 内部调用 app.defaultConfiguration ，初始化配置项</span></span><br><span class="line">  app.init();</span><br><span class="line">  <span class="keyword">return</span> app;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// application.js</span></span><br><span class="line">app.init = <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.cache = &#123;&#125;; <span class="comment">// 存储缓存的对象</span></span><br><span class="line">  <span class="keyword">this</span>.engines = &#123;&#125;; <span class="comment">// 存储模板引擎中扩展名和渲染函数的对应关系</span></span><br><span class="line">  <span class="keyword">this</span>.settings = &#123;&#125;; <span class="comment">// 存储 app.set 和 app.get 处理的对象</span></span><br><span class="line">  <span class="comment">// 设置默认的配置项</span></span><br><span class="line">  <span class="keyword">this</span>.defaultConfiguration();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="second-step"><a href="#second-step" class="headerlink" title="second step"></a>second step</h4><p>app.get 方法在 <code>application.js</code> 中被定义。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// application.js</span></span><br><span class="line"><span class="keyword">var</span> methods = <span class="built_in">require</span>(<span class="string">"methods"</span>);</span><br><span class="line"><span class="keyword">var</span> Router = <span class="built_in">require</span>(<span class="string">"./router"</span>);</span><br><span class="line"><span class="keyword">var</span> middleware = <span class="built_in">require</span>(<span class="string">"./middleware/init"</span>);</span><br><span class="line"><span class="keyword">var</span> query = <span class="built_in">require</span>(<span class="string">"./middleware/query"</span>);</span><br><span class="line"></span><br><span class="line">methods.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">method</span>) </span>&#123;</span><br><span class="line">  app[method] = <span class="function"><span class="keyword">function</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (method === <span class="string">"get"</span> &amp;&amp; <span class="built_in">arguments</span>.length === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">// app.get(setting)</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.set(path);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.lazyrouter();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> route = <span class="keyword">this</span>._router.route(path);</span><br><span class="line">    route[method].apply(route, slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// lazily adds the base router if it has not yet been added.</span></span><br><span class="line">app.lazyrouter = <span class="function"><span class="keyword">function</span> <span class="title">lazyrouter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>._router) &#123;</span><br><span class="line">    <span class="keyword">this</span>._router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">      caseSensitive: <span class="keyword">this</span>.enabled(<span class="string">"case sensitive routing"</span>),</span><br><span class="line">      strict: <span class="keyword">this</span>.enabled(<span class="string">"strict routing"</span>)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>._router.use(query(<span class="keyword">this</span>.get(<span class="string">"query parser fn"</span>)));</span><br><span class="line">    <span class="keyword">this</span>._router.use(middleware.init(<span class="keyword">this</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router/index.js</span></span><br><span class="line"><span class="keyword">var</span> Layer = <span class="built_in">require</span>(<span class="string">"./layer"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.use 的实质</span></span><br><span class="line">proto.use = <span class="function"><span class="keyword">function</span> <span class="title">use</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ... 省略部分代码</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; callbacks.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> fn = callbacks[i];</span><br><span class="line">    <span class="keyword">var</span> layer = <span class="keyword">new</span> Layer(</span><br><span class="line">      path,</span><br><span class="line">      &#123;</span><br><span class="line">        sensitive: <span class="keyword">this</span>.caseSensitive,</span><br><span class="line">        strict: <span class="literal">false</span>,</span><br><span class="line">        end: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      fn</span><br><span class="line">    );</span><br><span class="line">    layer.route = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="comment">// 将 layer 对象推入 stack 中管理</span></span><br><span class="line">    <span class="keyword">this</span>.stack.push(layer);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>一个 Layer 对象包含一个路径和回调，它会把路径正则表达式化，在响应请求时用来匹配路径。在<code>app.lazyrouter</code>方法里添加了一个中间件<code>middleware.init(this)</code>，重新设置了 req 和 res 的原型，增加了许多方法，详见<code>request.js</code>和<code>response.js</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// request.js</span></span><br><span class="line"><span class="keyword">var</span> req = <span class="built_in">Object</span>.create(http.IncomingMessage.prototype);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// response.js</span></span><br><span class="line"><span class="keyword">var</span> res = <span class="built_in">Object</span>.create(http.ServerResponse.prototype);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// middleware/init.js</span></span><br><span class="line">exports.init = <span class="function"><span class="keyword">function</span>(<span class="params">app</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">expressInit</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (app.enabled(<span class="string">"x-powered-by"</span>)) res.setHeader(<span class="string">"X-Powered-By"</span>, <span class="string">"Express"</span>);</span><br><span class="line">    req.res = res;</span><br><span class="line">    res.req = req;</span><br><span class="line">    req.next = next;</span><br><span class="line"></span><br><span class="line">    setPrototypeOf(req, app.request);</span><br><span class="line">    setPrototypeOf(res, app.response);</span><br><span class="line"></span><br><span class="line">    res.locals = res.locals || <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    next();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="响应请求阶段"><a href="#响应请求阶段" class="headerlink" title="响应请求阶段"></a>响应请求阶段</h4><p><code>app.handle</code> 实质上是调用了自身 router 的 handle，<code>router.handle</code> 遍历 router 维护的 stack 数组，找到匹配路径的 layer 对象。对于中间件 layer（<code>layer.route</code> 为 <code>undefined</code>），匹配成功后就执行中间件函数；对于路由 layer（<code>layer.route</code> 不是 <code>undefined</code>），匹配成功后还需要匹配 http method 才能执行路由函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router/index.js</span></span><br><span class="line">proto.handle = <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params">req, res, out</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> idx = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> protohost = getProtohost(req.url) || <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">var</span> removed = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">var</span> slashAdded = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> paramcalled = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// store options for OPTIONS request</span></span><br><span class="line">  <span class="comment">// only used if OPTIONS request</span></span><br><span class="line">  <span class="keyword">var</span> options = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// middleware and routes</span></span><br><span class="line">  <span class="keyword">var</span> stack = self.stack;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// manage inter-router variables</span></span><br><span class="line">  <span class="keyword">var</span> parentParams = req.params;</span><br><span class="line">  <span class="keyword">var</span> parentUrl = req.baseUrl || <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">var</span> done = restore(out, req, <span class="string">"baseUrl"</span>, <span class="string">"next"</span>, <span class="string">"params"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// setup next layer</span></span><br><span class="line">  req.next = next;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// for options requests, respond with a default if nothing else responds</span></span><br><span class="line">  <span class="keyword">if</span> (req.method === <span class="string">"OPTIONS"</span>) &#123;</span><br><span class="line">    done = wrap(done, <span class="function"><span class="keyword">function</span>(<span class="params">old, err</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err || options.length === <span class="number">0</span>) <span class="keyword">return</span> old(err);</span><br><span class="line">      sendOptionsResponse(res, options, old);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// setup basic req values</span></span><br><span class="line">  req.baseUrl = parentUrl;</span><br><span class="line">  req.originalUrl = req.originalUrl || req.url;</span><br><span class="line"></span><br><span class="line">  next();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ... 在下面介绍</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>next 函数内部有个 while 循环，每次循环都会从 stack 中拿出一个 layer，这个 layer 中包含了路由和中间件信息，然后就会用 layer 和请求的 path 进行匹配，如果匹配成功就会执行 layer.handle_request，调用中间件函数。但如果匹配失败，就会循环下一个 layer 对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router/index.js</span></span><br><span class="line"><span class="comment">// ... 省略部分代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 拿到当前的访问路径</span></span><br><span class="line">  <span class="keyword">var</span> path = getPathname(req);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// find next matching layer</span></span><br><span class="line">  <span class="keyword">var</span> layer;</span><br><span class="line">  <span class="keyword">var</span> match;</span><br><span class="line">  <span class="keyword">var</span> route;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (match !== <span class="literal">true</span> &amp;&amp; idx &lt; stack.length) &#123;</span><br><span class="line">    layer = stack[idx++];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进行路径匹配，匹配返回 true，不匹配返回 false</span></span><br><span class="line">    match = matchLayer(layer, path);</span><br><span class="line">    route = layer.route;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (match !== <span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!route) &#123;</span><br><span class="line">      <span class="comment">// 正常处理非路由中间件</span></span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> method = req.method;</span><br><span class="line">    <span class="keyword">var</span> has_method = route._handles_method(method);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// build up automatic options response</span></span><br><span class="line">    <span class="keyword">if</span> (!has_method &amp;&amp; method === <span class="string">"OPTIONS"</span>) &#123;</span><br><span class="line">      appendMethods(options, route._options());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// don't even bother matching route</span></span><br><span class="line">    <span class="keyword">if</span> (!has_method &amp;&amp; method !== <span class="string">"HEAD"</span>) &#123;</span><br><span class="line">      match = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ... 省略部分代码</span></span><br><span class="line">  <span class="comment">// this should be done for the layer</span></span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    layer.handle_error(err, req, res, next);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    layer.handle_request(req, res, next);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="路由中间件"><a href="#路由中间件" class="headerlink" title="路由中间件"></a>路由中间件</h3><p>当请求来时，会执行 handle，循环 stack，发现 path 相同且 method 相同，则调用对应 callback。当路由不断增多，stack 数组会不断增大，匹配效率必然下降，为了提高效率，express 引入了 route ，也就是路由中间件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个案例</span></span><br><span class="line"><span class="keyword">var</span> route = app</span><br><span class="line">  .route(<span class="string">"/list"</span>)</span><br><span class="line">  .get(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.end(<span class="string">"hello get"</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .post(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.end(<span class="string">"hello post"</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .put(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.end(<span class="string">"hello put"</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .delete(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.end(<span class="string">"hello delete"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">app.use(<span class="string">"/"</span>, routers);</span><br></pre></td></tr></table></figure><p><code>app.route</code>在<code>application.js</code>中被定义，内部调用了 router 的 route 方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router/index.js</span></span><br><span class="line"><span class="keyword">var</span> Route = <span class="built_in">require</span>(<span class="string">"./route"</span>);</span><br><span class="line"></span><br><span class="line">proto.route = <span class="function"><span class="keyword">function</span> <span class="title">route</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> route = <span class="keyword">new</span> Route(path);</span><br><span class="line">  <span class="comment">// 把 route 里面的 dispatch 方法作为 Layer 的处理函数</span></span><br><span class="line">  <span class="keyword">var</span> layer = <span class="keyword">new</span> Layer(</span><br><span class="line">    path,</span><br><span class="line">    &#123;</span><br><span class="line">      sensitive: <span class="keyword">this</span>.caseSensitive,</span><br><span class="line">      strict: <span class="keyword">this</span>.strict,</span><br><span class="line">      end: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    route.dispatch.bind(route)</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  layer.route = route;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.stack.push(layer);</span><br><span class="line">  <span class="comment">// 返回route实例，用于链式调用，注册 method 方法</span></span><br><span class="line">  <span class="keyword">return</span> route;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当 layer 的路径匹配成功，就会交给 route 来匹配 method，route 存放了所有注册的方法名，可以快速匹配是否有注册该方法，如果有则执行回调函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router/route.js</span></span><br><span class="line">Route.prototype.dispatch = <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">req, res, done</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> idx = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> stack = <span class="keyword">this</span>.stack;</span><br><span class="line">  <span class="keyword">if</span> (stack.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> done();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> method = req.method.toLowerCase();</span><br><span class="line">  <span class="keyword">if</span> (method === <span class="string">"head"</span> &amp;&amp; !<span class="keyword">this</span>.methods[<span class="string">"head"</span>]) &#123;</span><br><span class="line">    method = <span class="string">"get"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  req.route = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">  next();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 处理退出 route 信号</span></span><br><span class="line">    <span class="keyword">if</span> (err &amp;&amp; err === <span class="string">"route"</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> done();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理退出 router 信号</span></span><br><span class="line">    <span class="keyword">if</span> (err &amp;&amp; err === <span class="string">"router"</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> done(err);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过递归调用 next，遍历 stack</span></span><br><span class="line">    <span class="keyword">var</span> layer = stack[idx++];</span><br><span class="line">    <span class="keyword">if</span> (!layer) &#123;</span><br><span class="line">      <span class="keyword">return</span> done(err);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (layer.method &amp;&amp; layer.method !== method) &#123;</span><br><span class="line">      <span class="keyword">return</span> next(err);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      layer.handle_error(err, req, res, next);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      layer.handle_request(req, res, next);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>next(err)</code>将控制权传递到错误处理中间件，当调用<code>next(err)</code>时，实质是调用<code>layer.handle_error</code>，如果 fn 的参数不足 4 个，认为不是一个标准的错误处理中间件，则继续调用<code>next(err)</code>，直到参数达到 4 个，执行错误处理中间件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router/layer.js</span></span><br><span class="line">Layer.prototype.handle_request = <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> fn = <span class="keyword">this</span>.handle; <span class="comment">// 回调函数</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (fn.length &gt; <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="comment">// 形参数量大于 3，则认为不是一个标准的 requestHandler，调用 next 去查找下一个 layer</span></span><br><span class="line">    <span class="keyword">return</span> next();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 执行标准的 requestHandler</span></span><br><span class="line">    fn(req, res, next);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    next(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Layer.prototype.handle_error = <span class="function"><span class="keyword">function</span> <span class="title">handle_error</span>(<span class="params">error, req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> fn = <span class="keyword">this</span>.handle; <span class="comment">// 中间件函数</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (fn.length !== <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> next(error);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    fn(error, req, res, next);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    next(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="模板渲染"><a href="#模板渲染" class="headerlink" title="模板渲染"></a>模板渲染</h3><p>下面是使用模板引擎的写法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定模板文件所在目录</span></span><br><span class="line">app.set(<span class="string">"views"</span>, <span class="string">"./views"</span>);</span><br><span class="line"><span class="comment">// 指定要使用的模板引擎</span></span><br><span class="line">app.set(<span class="string">"view engine"</span>, <span class="string">"pug"</span>);</span><br><span class="line">app.get(<span class="string">"/"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.render(<span class="string">"home"</span>, &#123; <span class="attr">title</span>: <span class="string">"Hey"</span>, <span class="attr">message</span>: <span class="string">"Hello there!"</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>res.render</code>实际调用的是<code>app.render</code>，内部创建 View 实例，并调用<code>view.render(options, callback)</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// response.js</span></span><br><span class="line">res.render = <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">view, options, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> app = <span class="keyword">this</span>.req.app;</span><br><span class="line">  <span class="keyword">var</span> opts = options || &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> done = callback;</span><br><span class="line">  <span class="comment">//  ...省略部分代码</span></span><br><span class="line">  <span class="comment">// default callback to respond</span></span><br><span class="line">  done =</span><br><span class="line">    done ||</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">err, str</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> req.next(err);</span><br><span class="line">      self.send(str);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// render</span></span><br><span class="line">  app.render(view, opts, done);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// application.js</span></span><br><span class="line">app.render = <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">name, options, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> cache = <span class="keyword">this</span>.cache;</span><br><span class="line">  <span class="keyword">var</span> done = callback;</span><br><span class="line">  <span class="keyword">var</span> engines = <span class="keyword">this</span>.engines;</span><br><span class="line">  <span class="keyword">var</span> opts = options;</span><br><span class="line">  <span class="keyword">var</span> renderOptions = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> view;</span><br><span class="line">  <span class="comment">//  ...省略部分代码</span></span><br><span class="line">  <span class="keyword">if</span> (!view) &#123;</span><br><span class="line">    <span class="keyword">var</span> View = <span class="keyword">this</span>.get(<span class="string">"view"</span>);</span><br><span class="line"></span><br><span class="line">    view = <span class="keyword">new</span> View(name, &#123;</span><br><span class="line">      defaultEngine: <span class="keyword">this</span>.get(<span class="string">"view engine"</span>),</span><br><span class="line">      root: <span class="keyword">this</span>.get(<span class="string">"views"</span>),</span><br><span class="line">      engines: engines</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// prime the cache</span></span><br><span class="line">    <span class="keyword">if</span> (renderOptions.cache) &#123;</span><br><span class="line">      cache[name] = view;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// render</span></span><br><span class="line">  tryRender(view, renderOptions, done);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tryRender</span>(<span class="params">view, options, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    view.render(options, callback);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    callback(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// view.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">View</span>(<span class="params">name, options</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//  ...省略部分代码</span></span><br><span class="line">  <span class="keyword">var</span> opts = options || &#123;&#125;;</span><br><span class="line">  <span class="keyword">this</span>.ext = extname(name);</span><br><span class="line">  <span class="comment">// 如果对应后缀的模板引擎没有被注册</span></span><br><span class="line">  <span class="keyword">if</span> (!opts.engines[<span class="keyword">this</span>.ext]) &#123;</span><br><span class="line">    <span class="keyword">var</span> mod = <span class="keyword">this</span>.ext.substr(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 使用 require() 去加载没有被注册的模板引擎</span></span><br><span class="line">    <span class="keyword">var</span> fn = <span class="built_in">require</span>(mod).__express;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">"function"</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Module "'</span> + mod + <span class="string">'" does not provide a view engine.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 注册模板引擎</span></span><br><span class="line">    opts.engines[<span class="keyword">this</span>.ext] = fn;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 保存需要的模板引擎</span></span><br><span class="line">  <span class="keyword">this</span>.engine = opts.engines[<span class="keyword">this</span>.ext];</span><br><span class="line">  <span class="comment">// 拿到文件的绝对路径</span></span><br><span class="line">  <span class="keyword">this</span>.path = <span class="keyword">this</span>.lookup(fileName);</span><br><span class="line">&#125;</span><br><span class="line">View.prototype.render = <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">options, callback</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 调用模板引擎的函数，调用完就执行 callback</span></span><br><span class="line">  <span class="keyword">this</span>.engine(<span class="keyword">this</span>.path, options, callback);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise实现</title>
      <link href="/2019/03/11/Promise%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/03/11/Promise%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>首先实现一个基础结构，每一个 Promise 实现，都有状态标识，以及存放成功与失败回调函数的数组。为什么要使用<strong>数组</strong>来存放回调函数呢，是考虑到了下面这种情况。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span></span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 连续调用多次 p3.then ，回调函数需要使用数组来存放</span></span><br><span class="line">p3.then(<span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"a: "</span> + v));</span><br><span class="line">p3.then(<span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"b: "</span> + v));</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">executor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">  self.status = <span class="string">"pending"</span>; <span class="comment">// promise 的状态</span></span><br><span class="line">  self.onResolvedCallback = []; <span class="comment">// 存放成功的回调函数的数组</span></span><br><span class="line">  self.onRejectedCallback = []; <span class="comment">// 存放失败的回调函数的数组</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// todo</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// todo</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    executor(resolve, reject);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (reason) &#123;</span><br><span class="line">    reject(reason);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>resolve/reject</code> 负责异步修改 promise 的状态并触发 <code>onResolvedCallback/onRejectedCallback</code> 中的回调函数。为什么要<strong>异步</strong>触发呢，是为了保证在触发回调前，所有的回调函数都已经被 then 注册。</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> value.then(resolve, reject);</span><br><span class="line">  &#125;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (self.status === <span class="string">"pending"</span>) &#123;</span><br><span class="line">      self.status = <span class="string">"resolved"</span>;</span><br><span class="line">      self.data = value;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; self.onResolvedCallback.length; i++) &#123;</span><br><span class="line">        self.onResolvedCallback[i](value);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (self.status === <span class="string">"pending"</span>) &#123;</span><br><span class="line">      self.status = <span class="string">"rejected"</span>;</span><br><span class="line">      self.data = reason;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; self.onRejectedCallback.length; i++) &#123;</span><br><span class="line">        self.onRejectedCallback[i](reason);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们需要实现 then 方法，then 方法主要的作用是为实例注册回调函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span>(<span class="params">onResolved, onRejected</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">var</span> promise2;</span><br><span class="line">  onResolved =</span><br><span class="line">    <span class="keyword">typeof</span> onResolved === <span class="string">"function"</span></span><br><span class="line">      ? onResolved</span><br><span class="line">      : <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> v;</span><br><span class="line">        &#125;;</span><br><span class="line">  onRejected =</span><br><span class="line">    <span class="keyword">typeof</span> onRejected === <span class="string">"function"</span></span><br><span class="line">      ? onRejected</span><br><span class="line">      : <span class="function"><span class="keyword">function</span>(<span class="params">r</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">throw</span> r;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (self.status === <span class="string">"resolved"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 保证 then 方法先被执行</span></span><br><span class="line">        execute(promise2, self.data, onResolved, resolve, reject);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (self.status === <span class="string">"rejected"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 保证 then 方法先被执行</span></span><br><span class="line">        execute(promise2, self.data, onRejected, resolve, reject);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (self.status === <span class="string">"pending"</span>) &#123;</span><br><span class="line">    <span class="comment">// 这里之所以没有异步执行，是因为这些函数必然会被resolve或reject调用，而resolve或reject函数里的内容是异步执行的</span></span><br><span class="line">    <span class="keyword">return</span> (promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">      self.onResolvedCallback.push(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        execute(promise2, value, onResolved, resolve, reject);</span><br><span class="line">      &#125;);</span><br><span class="line">      self.onRejectedCallback.push(<span class="function"><span class="keyword">function</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">        execute(promise2, reason, onRejected, resolve, reject);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// promise2 = promise1.then(onResolved, onRejected)</span></span><br><span class="line"><span class="comment">// 执行回调，并根据返回值决定 promise2 的状态</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params">promise2, val, callback, resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> x = callback(val);</span><br><span class="line">    resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (r) &#123;</span><br><span class="line">    reject(r);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>onResolved/onRejected</code>的返回值 x 会有多种情况，如果是 Promise 实例，直接使用 <code>x.then(resolve, reject)</code>即可；如果是一个 thenable 对象，尝试去执行对象的 then 方法；如果是原始类型或者非 thenable 对象，直接执行<code>resolve(x)</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">resolvePromise函数根据 x 的值来决定 promise2 的状态</span></span><br><span class="line"><span class="comment">x为`promise2 = promise1.then(onResolved, onRejected)`里`onResolved/onRejected`的返回值，</span></span><br><span class="line"><span class="comment">`resolve`和`reject`实际上是`promise2`的`executor`的两个实参。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolvePromise</span>(<span class="params">promise2, x, resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> then;</span><br><span class="line">  <span class="keyword">var</span> thenCalledOrThrow = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (promise2 === x) &#123;</span><br><span class="line">    <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Chaining cycle detected for promise!"</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">    x.then(resolve, reject);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 处理 thenable 对象</span></span><br><span class="line">  <span class="keyword">if</span> (x !== <span class="literal">null</span> &amp;&amp; (<span class="keyword">typeof</span> x === <span class="string">"object"</span> || <span class="keyword">typeof</span> x === <span class="string">"function"</span>)) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      then = x.then; <span class="comment">// because x.then could be a getter</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> then === <span class="string">"function"</span>) &#123;</span><br><span class="line">        then.call(</span><br><span class="line">          x,</span><br><span class="line">          <span class="function"><span class="keyword">function</span> <span class="title">rs</span>(<span class="params">y</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (thenCalledOrThrow) <span class="keyword">return</span>;</span><br><span class="line">            thenCalledOrThrow = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span> resolvePromise(promise2, y, resolve, reject);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function"><span class="keyword">function</span> <span class="title">rj</span>(<span class="params">r</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (thenCalledOrThrow) <span class="keyword">return</span>;</span><br><span class="line">            thenCalledOrThrow = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span> reject(r);</span><br><span class="line">          &#125;</span><br><span class="line">        );</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resolve(x);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">if</span> (thenCalledOrThrow) <span class="keyword">return</span>;</span><br><span class="line">      thenCalledOrThrow = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">return</span> reject(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    resolve(x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写到这里其实已经实现了 promise 的核心功能了，我们可以写一段代码测试一下了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    resolve(<span class="number">1</span>); <span class="comment">// 改变的是 p 的状态</span></span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;);</span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">  <span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      resolve(value + <span class="number">2</span>); <span class="comment">// 改变的是 p2 的状态</span></span><br><span class="line">    &#125;, <span class="number">200</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> p2;</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> <span class="title">foo2</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>执行以上代码会依次输出<code>1</code>和<code>3</code>, 执行顺序如下：</p><ol><li>p.then 注册 foo 且返回 x，x.then 注册 foo2 且返回 x2</li><li>100ms 后执行<code>resolve(1)</code>，p 的状态变更为<code>&#39;resolved&#39;</code>并异步执行<code>foo(1)</code>，打印出<code>1</code></li><li>foo 返回 p2 , 由于 p2 是 Promise 实例，执行 p2.then(x_resolve, x_reject) 即注册了 x 的 resolve 函数</li><li>200ms 后执行<code>resolve(value + 2)</code> ，p2 的状态变更为<code>&#39;resolved&#39;</code>并异步执行<code>x_resolve(3)</code></li><li>x 的状态变更为<code>&#39;resolved&#39;</code>并异步执行<code>foo2(3)</code>，打印出<code>3</code></li></ol><h3 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h3><p>根据已经实现的实例方法 then，可以很容易地实现 catch 和 finally 实例方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.prototype.catch = <span class="function"><span class="keyword">function</span>(<span class="params">onRejected</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.then(<span class="literal">null</span>, onRejected);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>finally 里的函数不管状态如何都会被执行，所以只需要成功和失败两种情况各写一次。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.prototype.finally = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.then(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">      setTimeout(fn);</span><br><span class="line">      <span class="keyword">return</span> v;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">r</span>) </span>&#123;</span><br><span class="line">      setTimeout(fn);</span><br><span class="line">      <span class="keyword">throw</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><h4 id="Promise-resolve-amp-Promise-reject"><a href="#Promise-resolve-amp-Promise-reject" class="headerlink" title="Promise.resolve &amp; Promise.reject"></a>Promise.resolve &amp; Promise.reject</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    resolvePromise(promise, value, resolve, reject);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.reject = <span class="function"><span class="keyword">function</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    reject(reason);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race"></a>Promise.race</h4><p><code>Promise.race</code>返回一个 promise （记为 r），只要传入的其中一个 promise 状态变为成功时，就执行 r 的 resolve 方法，否则执行 r 的 reject 方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.race = <span class="function"><span class="keyword">function</span>(<span class="params">promises</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class="line">      <span class="built_in">Promise</span>.resolve(promises[i]).then(</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> resolve(value);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> reject(reason);</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h4><p><code>Promise.all</code>返回一个 promise （记为 a），只有当传入的所有 promise 状态都为成功时，才执行 a 的 resolve 方法，否则执行 a 的 reject 方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all = <span class="function"><span class="keyword">function</span>(<span class="params">promises</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> resolvedCounter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> promiseNum = promises.length;</span><br><span class="line">    <span class="keyword">var</span> resolvedValues = <span class="keyword">new</span> <span class="built_in">Array</span>(promiseNum); <span class="comment">// 存放所有 promise 的执行结果</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; promiseNum; i++) &#123;</span><br><span class="line">      (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">Promise</span>.resolve(promises[i]).then(</span><br><span class="line">          <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">            resolvedCounter++;</span><br><span class="line">            resolvedValues[i] = value;</span><br><span class="line">            <span class="comment">// 只有当所有 promise 状态都为成功时，才将 a 的状态变更为'resolved'</span></span><br><span class="line">            <span class="keyword">if</span> (resolvedCounter === promiseNum) &#123;</span><br><span class="line">              <span class="keyword">return</span> resolve(resolvedValues);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function"><span class="keyword">function</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> reject(reason);</span><br><span class="line">          &#125;</span><br><span class="line">        );</span><br><span class="line">      &#125;)(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>Promise.all</code>存在一个缺陷，只要其中一个 promise 状态为失败，就拿不到其他成功状态的 promise 。现在有一个需求，实现一个 <code>Promise.alwayResolve(promises)</code> 方法，总是返回一个成功状态的 promise，返回值为一个存放非 pending 状态的 promises 的数组，只需要改变一下<code>Promise.all</code>就可以了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.alwayResolve = <span class="function"><span class="keyword">function</span>(<span class="params">promises</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> resolvedCounter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> promiseNum = promises.length;</span><br><span class="line">    <span class="keyword">var</span> resolvedValues = <span class="keyword">new</span> <span class="built_in">Array</span>(promiseNum);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; promiseNum; i++) &#123;</span><br><span class="line">      (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">Promise</span>.resolve(promises[i]).then(</span><br><span class="line">          <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">            resolvedCounter++;</span><br><span class="line">            resolvedValues[i] = value;</span><br><span class="line">            <span class="keyword">if</span> (resolvedCounter === promiseNum) &#123;</span><br><span class="line">              <span class="keyword">return</span> resolve(resolvedValues);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function"><span class="keyword">function</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">            resolvedCounter++;</span><br><span class="line">            resolvedValues[i] = reason;</span><br><span class="line">            <span class="keyword">if</span> (resolvedCounter === promiseNum) &#123;</span><br><span class="line">              <span class="keyword">return</span> resolve(resolvedValues);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        );</span><br><span class="line">      &#125;)(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vuex工作原理</title>
      <link href="/2019/01/14/vuex%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
      <url>/2019/01/14/vuex%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>vuex 中的 store 本质就是没有 template 的隐藏着的 vue 组件，所有配置的 state、actions、mutations 以及 getters 都是其组件的属性，所有的操作都是对这个组件进行的。</p><p>vuex 仅仅是作为 vue 的一个插件而存在，不像 Redux、MobX 等库可以应用于所有框架，vuex 只能使用在 vue 上，很大的程度是因为其高度依赖于 vue 的 computed 依赖检测系统以及其插件系统。</p><p>每一个 vue 插件都需要有一个公开的 install 方法，vuex 的 install 方法中调用了 applyMixin 方法，该方法在组件的 beforeCreate 生命周期中混入了一个操作：在实例上挂载了一个<code>$store</code>属性指向<code>store</code>对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/store.js</span></span><br><span class="line"><span class="keyword">import</span> applyMixin <span class="keyword">from</span> <span class="string">"./mixin"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">install</span>(<span class="params">_Vue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (Vue &amp;&amp; _Vue === Vue) &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">"production"</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(</span><br><span class="line">        <span class="string">"[vuex] already installed. Vue.use(Vuex) should be called only once."</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  Vue = _Vue;</span><br><span class="line">  applyMixin(Vue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/mixins.js</span></span><br><span class="line"><span class="comment">// 对应 applyMixin 方法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> version = <span class="built_in">Number</span>(Vue.version.split(<span class="string">"."</span>)[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (version &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">    Vue.mixin(&#123; <span class="attr">beforeCreate</span>: vuexInit &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> _init = Vue.prototype._init;</span><br><span class="line">    Vue.prototype._init = <span class="function"><span class="keyword">function</span>(<span class="params">options = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">      options.init = options.init ? [vuexInit].concat(options.init) : vuexInit;</span><br><span class="line">      _init.call(<span class="keyword">this</span>, options);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Vuex init hook, injected into each instances init hooks list.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">vuexInit</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> options = <span class="keyword">this</span>.$options;</span><br><span class="line">    <span class="comment">// store injection</span></span><br><span class="line">    <span class="keyword">if</span> (options.store) &#123;</span><br><span class="line">      <span class="keyword">this</span>.$store =</span><br><span class="line">        <span class="keyword">typeof</span> options.store === <span class="string">"function"</span> ? options.store() : options.store;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.parent &amp;&amp; options.parent.$store) &#123;</span><br><span class="line">      <span class="keyword">this</span>.$store = options.parent.$store;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们一般像下面这样使用 vuex :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Vue.use(Vuex);</span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions,</span><br><span class="line">  modules</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 此时 store 等于 this.$options.store</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#app"</span>,</span><br><span class="line">  store</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在 Vuex.Store 这个构造函数中，会执行<code>resetStoreVM(this, state)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/store.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resetStoreVM</span>(<span class="params">store, state, hot</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 省略无关代码</span></span><br><span class="line">  store._vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">      $$state: state</span><br><span class="line">    &#125;,</span><br><span class="line">    computed</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码可以看出，其本质就是将我们传入的 state 作为一个隐藏的 vue 组件的 data，也就是说，我们的 commit 操作，本质上是修改这个组件的 data 。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python引入本地模块</title>
      <link href="/2018/10/25/python%E5%BC%95%E5%85%A5%E6%9C%AC%E5%9C%B0%E6%A8%A1%E6%9D%BF/"/>
      <url>/2018/10/25/python%E5%BC%95%E5%85%A5%E6%9C%AC%E5%9C%B0%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<p>作为新手不熟悉<code>python</code>如何引入本地的模块，经过一番折腾，基本明白了引入方式。<br>假设有一个项目，目录结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">. root_dir</span><br><span class="line">├── app.py</span><br><span class="line">└── test</span><br><span class="line">    └── subtest</span><br><span class="line">        ├── __init__.py</span><br><span class="line">        └── hi.py</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    └── hello.py</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># hello.py</span><br><span class="line">def hello():</span><br><span class="line">    print(&apos;hello world&apos;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># hi.py</span><br><span class="line">def hi():</span><br><span class="line">    print(&apos;hi world&apos;)</span><br></pre></td></tr></table></figure><p>需要在<code>app.py</code>中使用<code>hello()</code>和<code>hi()</code>这两个函数，引入方式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># app.py</span><br><span class="line">from test import hello</span><br><span class="line">from test.subtest import hi</span><br><span class="line"></span><br><span class="line">hello.hello()</span><br><span class="line">hi.hi()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> pyhton </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim使用总结</title>
      <link href="/2018/10/18/vim%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
      <url>/2018/10/18/vim%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>vim 分为三种模式: 命令模式（Command mode）、输入模式（Insert mode）、底线命令模式（Last line mode），初始进入的是命令模式。</p><h3 id="命令模式下"><a href="#命令模式下" class="headerlink" title="命令模式下"></a>命令模式下</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>h</code>/<code>j</code>/<code>k</code>/<code>l</code></td><td>←/↓/↑/→</td></tr><tr><td><code>:</code></td><td>切换到底线命令模式</td></tr><tr><td><code>a</code></td><td>进入编辑模式，在光标后插入</td></tr><tr><td><code>i</code></td><td>进入编辑模式，在光标前插入</td></tr><tr><td><code>u</code></td><td>撤销，回到上一步操作</td></tr><tr><td><code>dd</code></td><td>删除本行</td></tr><tr><td><code>D</code></td><td>删除至行尾</td></tr><tr><td><code>w</code></td><td>下一个单词</td></tr><tr><td><code>b</code></td><td>上一个单词</td></tr><tr><td><code>e</code></td><td>光标到词尾</td></tr><tr><td><code>/</code> + 内容</td><td>查找内容，按<code>n</code>跳到下一项</td></tr></tbody></table><h3 id="编辑模式下"><a href="#编辑模式下" class="headerlink" title="编辑模式下"></a>编辑模式下</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>esc</code></td><td>进入命令模式</td></tr><tr><td><code>g</code> + <code>g</code></td><td>将光标快速移动到文件首</td></tr><tr><td><code>G</code></td><td>将光标快速移动到文件尾</td></tr><tr><td><code>0</code>(零)</td><td>将光标快速移动到行首</td></tr><tr><td><code>$</code></td><td>将光标快速移动到行尾</td></tr></tbody></table><a id="more"></a><h3 id="底线命令模式下"><a href="#底线命令模式下" class="headerlink" title="底线命令模式下"></a>底线命令模式下</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>:w</code>(<code>:w!</code>)</td><td>(强制)保存</td></tr><tr><td><code>:q</code>(<code>:q!</code>)</td><td>(强制)退出</td></tr><tr><td><code>:wq</code>(<code>:wq!</code>)/<code>:x</code>(<code>:x!</code>)</td><td>(强制)保存并退出</td></tr><tr><td><code>:</code> + 行号</td><td>定位到指定行</td></tr></tbody></table><h3 id="更多命令"><a href="#更多命令" class="headerlink" title="更多命令"></a><a href="http://www.runoob.com/linux/linux-vim.html" target="_blank" rel="noopener">更多命令</a></h3>]]></content>
      
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>音标字母对应表</title>
      <link href="/2018/10/13/%E9%9F%B3%E6%A0%87%E5%AD%97%E6%AF%8D%E5%AF%B9%E5%BA%94%E8%A1%A8/"/>
      <url>/2018/10/13/%E9%9F%B3%E6%A0%87%E5%AD%97%E6%AF%8D%E5%AF%B9%E5%BA%94%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>掌握了<a href="https://zhuanlan.zhihu.com/p/35702220" target="_blank" rel="noopener">音标</a>和其对应的字母（组合），就可以根据读音来拼写单词了。</p><a id="more"></a><h3 id="元音-20-个"><a href="#元音-20-个" class="headerlink" title="元音(20 个)"></a>元音(20 个)</h3><table><thead><tr><th>元音</th><th>字母（组合）</th></tr></thead><tbody><tr><td><code>[i:]</code></td><td><code>ee</code> <code>ea</code> <code>e</code> <code>ie</code></td></tr><tr><td><code>[i]</code></td><td><code>i</code> <code>y</code> <code>e</code></td></tr><tr><td><code>[æ]</code></td><td><code>a</code></td></tr><tr><td><code>[e]</code></td><td><code>ea</code> <code>e</code> <code>a</code></td></tr><tr><td><code>[ə:]</code></td><td><code>ir</code> <code>ur</code> <code>ear</code> <code>er</code> <code>or</code></td></tr><tr><td><code>[ə]</code></td><td><code>er</code> <code>or</code> <code>ou</code> <code>ar</code> <code>o</code> <code>a</code> <code>e</code> <code>u</code></td></tr><tr><td><code>[a:]</code></td><td><code>ar</code> <code>a</code></td></tr><tr><td><code>[۸]</code></td><td><code>u</code> <code>or</code> <code>ou</code> <code>oo</code></td></tr><tr><td><code>[כ:]</code></td><td><code>al</code> <code>or</code> <code>au</code> <code>our</code> <code>ar</code> <code>aw</code>(英音)</td></tr><tr><td><code>[כ]</code></td><td><code>o</code> <code>a</code> <code>aw</code>(美音)</td></tr><tr><td><code>[u:]</code></td><td><code>oo</code> <code>o</code> <code>u</code></td></tr><tr><td><code>[u]</code></td><td><code>oo</code> <code>ou</code> <code>o</code> <code>u</code></td></tr><tr><td><code>[ei]</code></td><td><code>a</code> <code>ay</code> <code>ea</code> <code>ai</code> <code>ey</code></td></tr><tr><td><code>[ai]</code></td><td><code>i</code> <code>y</code></td></tr><tr><td><code>[au]</code></td><td><code>ou</code> <code>ow</code></td></tr><tr><td><code>[əu]</code></td><td><code>o</code> <code>ow</code> <code>oa</code></td></tr><tr><td><code>[כi]</code></td><td><code>oy</code> <code>oi</code></td></tr><tr><td><code>[iə]</code></td><td><code>eer</code> <code>ea</code> <code>ear</code> <code>er</code> <code>ier</code></td></tr><tr><td><code>[eə]</code></td><td><code>ear</code> <code>air</code></td></tr><tr><td><code>[uə]</code></td><td><code>our</code> <code>oor</code></td></tr></tbody></table><h3 id="辅音-28-个"><a href="#辅音-28-个" class="headerlink" title="辅音(28 个)"></a>辅音(28 个)</h3><table><thead><tr><th>辅音</th><th>字母（组合）</th></tr></thead><tbody><tr><td><code>[k]</code></td><td><code>k</code> <code>c</code></td></tr><tr><td><code>[ŋ]</code></td><td><code>ng</code> <code>n</code></td></tr><tr><td><code>[j]</code></td><td><code>y</code></td></tr><tr><td><code>[f]</code></td><td><code>f</code> <code>gh</code> <code>ph</code></td></tr><tr><td><code>[θ]</code></td><td><code>th</code></td></tr><tr><td><code>[δ]</code></td><td><code>th</code></td></tr><tr><td><code>[∫]</code></td><td><code>sh</code> <code>tion</code> <code>cial</code></td></tr><tr><td><code>[з]</code></td><td><code>e</code></td></tr><tr><td><code>[t∫]</code></td><td><code>ch</code> <code>tch</code></td></tr><tr><td><code>[dз]</code></td><td><code>ge</code> <code>j</code></td></tr><tr><td><code>[dz]</code></td><td><code>ds</code></td></tr></tbody></table><p>其余辅音（<code>[p]</code> <code>[b]</code> <code>[t]</code> <code>[d]</code> <code>[g]</code> <code>[h]</code> <code>[r]</code> <code>[v]</code> <code>[s]</code> <code>[z]</code> <code>[w]</code> <code>[tr]</code> <code>[dr]</code> <code>[ts]</code> <code>[m]</code> <code>[n]</code> <code>[l]</code>）对应的字母为音标中显示的字母。</p><h3 id="百度文库"><a href="#百度文库" class="headerlink" title="百度文库"></a>百度文库</h3><ul><li><a href="https://wenku.baidu.com/view/debbe3eb19e8b8f67c1cb93b.html" target="_blank" rel="noopener">国际音标对应的字母组合</a></li><li><a href="https://wenku.baidu.com/view/e6b14f4d2e3f5727a5e9628d.html" target="_blank" rel="noopener">英语单词直接拼读法</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode使用心得</title>
      <link href="/2018/10/03/vscode%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/"/>
      <url>/2018/10/03/vscode%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td><code>command</code> + <code>k</code>, <code>command</code> + <code>s</code></td><td>弹出快捷键列表</td></tr><tr><td><code>option</code> + <code>command</code>+ <code>f</code></td><td>格式化文件</td></tr><tr><td><code>shift</code> + <code>command</code> + <code>k</code></td><td>删除当前行</td></tr><tr><td><code>shift</code> + <code>command</code> + <code>t</code></td><td>重新打开前一个关闭的编辑窗口</td></tr><tr><td><code>shift</code> + <code>command</code> + <code>[</code>/<code>]</code></td><td>切换到左侧/右侧 tab</td></tr><tr><td><code>command</code> + <code>[</code>/<code>]</code></td><td>向左/向右缩进当前行</td></tr><tr><td><code>command</code> + <code>i</code></td><td>选中当前行，再按合并选中下一行</td></tr><tr><td><code>command</code> + <code>k</code> + <code>m</code></td><td>更改文件语言</td></tr><tr><td><code>shift</code> + <code>option</code> + <code>↑</code>/<code>↓</code></td><td>上下复制当前行</td></tr><tr><td><code>option</code> + <code>↑</code>/<code>↓</code></td><td>上下移动当前行</td></tr><tr><td><code>shift</code> + <code>command</code> + <code>v</code></td><td>Markdown 预览</td></tr></tbody></table><a id="more"></a><h4 id="光标"><a href="#光标" class="headerlink" title="光标"></a>光标</h4><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td><code>command</code> + <code>↑</code>/<code>↓</code></td><td>跳转到页首/页尾</td></tr><tr><td><code>command</code> + <code>←</code>/<code>→</code></td><td>跳转到行首/行尾</td></tr><tr><td><code>option</code> + click</td><td>插入另一个光标</td></tr><tr><td><code>shift</code> + <code>option</code> + drag mouse（拖动鼠标）</td><td>列（框）选择</td></tr><tr><td><code>option</code> + <code>command</code> + <code>↑</code>/<code>↓</code></td><td>上下插入光标</td></tr><tr><td><code>shift</code> + <code>command</code> + <code>\</code></td><td>跳转到光标两侧的括号</td></tr><tr><td><code>command</code> + <code>u</code></td><td>撤销上一个光标</td></tr></tbody></table><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td><code>shift</code> + <code>command</code> + <code>h</code></td><td>在所有文件中替换</td></tr><tr><td><code>option</code> + <code>command</code> + <code>f</code></td><td>在当前文件中替换</td></tr><tr><td>(<code>shift</code> + )<code>command</code> + <code>f</code></td><td>在当前（所有）文件中查找</td></tr><tr><td>(<code>shift</code> +) <code>command</code> + <code>g</code></td><td>选择下一个（上一个）匹配项</td></tr><tr><td><code>option</code> + <code>enter</code></td><td>选择所有匹配项</td></tr><tr><td><code>command</code> + <code>d</code></td><td>选择下一个同名项</td></tr><tr><td><code>command</code> + <code>f2</code></td><td>选择所有同名项</td></tr></tbody></table><h4 id="编辑组"><a href="#编辑组" class="headerlink" title="编辑组"></a>编辑组</h4><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td><code>command</code> + <code>\</code></td><td>拆分编辑组</td></tr><tr><td><code>command</code> + <code>1</code></td><td>聚焦到当前编辑组下的第 1 个编辑窗口</td></tr><tr><td><code>command</code> + <code>k</code> + <code>←</code>/<code>→</code></td><td>将当前编辑组向左/向右移动</td></tr></tbody></table><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><ul><li>Bookmarks: 快速跳转到指定位置</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>在 vscode 中按下<code>shift</code>+<code>command</code>+<code>p</code>，输入<code>code</code>，选择<code>install &#39;code&#39; command in PATH</code>，之后就可以通过命令行<code>code xxx</code>，打开指定文件或文件夹（使用<code>code -h</code>查看所有命令）。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>my bookmark</title>
      <link href="/2018/07/04/my-bookmark/"/>
      <url>/2018/07/04/my-bookmark/</url>
      
        <content type="html"><![CDATA[<h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p><a href="http://es6.ruanyifeng.com/#docs/proxy" target="_blank" rel="noopener">ECMAScript 6</a><br><a href="https://webpack.docschina.org/configuration/" target="_blank" rel="noopener">webpack</a><br><a href="https://www.tslang.cn/docs/handbook/interfaces.html" target="_blank" rel="noopener">TypeScript</a></p><h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><p><a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="noopener">阮一峰</a><br><a href="http://taobaofed.org/" target="_blank" rel="noopener">淘宝-fed</a><br><a href="https://www.h5jun.com/" target="_blank" rel="noopener">十年踪迹</a><br><a href="https://www.liaoxuefeng.com/" target="_blank" rel="noopener">廖雪峰</a></p><a id="more"></a><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p><a href="https://jsbin.com/?html,output" target="_blank" rel="noopener">jsbin 在线页面代码测试</a><br><a href="http://xclient.info/" target="_blank" rel="noopener">xclient Mac应用分享</a><br><a href="http://www.iconfont.cn/" target="_blank" rel="noopener">iconfont 矢量图标库</a><br><a href="https://tinypng.com/" target="_blank" rel="noopener">tinypng 图片压缩</a><br><a href="https://tool.css-js.com/" target="_blank" rel="noopener">css-js 代码压缩</a><br><a href="https://portal.qiniu.com/" target="_blank" rel="noopener">qiniu 七牛云</a><br><a href="http://www.aigei.com/bgremover" target="_blank" rel="noopener">BgRemover 在线图片去底工具</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> bookmark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读《高效能人士的七个习惯》小记</title>
      <link href="/2018/05/10/%E8%AF%BB%E3%80%8A%E9%AB%98%E6%95%88%E8%83%BD%E4%BA%BA%E5%A3%AB%E7%9A%84%E4%B8%83%E4%B8%AA%E4%B9%A0%E6%83%AF%E3%80%8B%E5%B0%8F%E8%AE%B0/"/>
      <url>/2018/05/10/%E8%AF%BB%E3%80%8A%E9%AB%98%E6%95%88%E8%83%BD%E4%BA%BA%E5%A3%AB%E7%9A%84%E4%B8%83%E4%B8%AA%E4%B9%A0%E6%83%AF%E3%80%8B%E5%B0%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>这七个习惯为：积极主动、以始为终、要事第一、双赢思维、知己解彼、统合综效、不断更新。前三个习惯实现独立，后三个习惯实现互赖。实现互赖的前提，是投资情感账户。</p><h4 id="积极主动"><a href="#积极主动" class="headerlink" title="积极主动"></a>积极主动</h4><p>积极主动的空间在于选择的权利，很多人不喜欢某门课是因为不喜欢授课老师，这意味着你把是否喜欢这门课的权利给了你的授课老师，这就是一种消极的表现，不断地把责任推卸给别人，放弃自己选择的权利。任何时候都要坚持选择的权利。<br>除去我们不关注的部分，世上的事情都处在我们的关注圈，其中我们能控制的部分就是影响圈。积极主动的人会把精力放在影响圈上，长此以往，他们的影响圈会逐渐扩大。<br><a id="more"></a></p><h4 id="以始为终"><a href="#以始为终" class="headerlink" title="以始为终"></a>以始为终</h4><p>把订定使命看得与行为本身同样重要，影响圈就会不断扩大。<br>不要以片面的目标（工作、家庭、金钱、享乐等）为中心，要以原则为生活中心。</p><h4 id="要事第一"><a href="#要事第一" class="headerlink" title="要事第一"></a>要事第一</h4><p>将重要不紧急的事情放在第一位，因为没有截止时间的催促，常常会一拖再拖，空闲的时间常常会被娱乐和琐事占用。在这个人生的木桶里，我们要装入沙子、大石子、小石子，只有先放大石子，再放小石子，最后放沙子，木桶才能放入更多的东西。<br>学会责任型授权，双方约定好预期结果，给予对方一些基于资源、陷阱的指导而非具体事项，明确责任和奖惩即可。</p><h4 id="双赢思维"><a href="#双赢思维" class="headerlink" title="双赢思维"></a>双赢思维</h4><p>顾及他人利益，维持合作关系，同时保持自己的原则。如果不能双赢就好聚好散。</p><h4 id="知己解彼"><a href="#知己解彼" class="headerlink" title="知己解彼"></a>知己解彼</h4><p>学会移情式聆听，带入倾诉者的角色去感受对方此番谈话的真正目的。避免价值判断、追根究底、好为人师、自以为是，避免使自己的体验去替代别人的体验，一副眼镜你戴的很舒服，但是给别人戴很可能是不舒服的。</p><h4 id="统合综效"><a href="#统合综效" class="headerlink" title="统合综效"></a>统合综效</h4><p>重视不同个体的不同想法，有分歧才有收获。遇到分歧时，不要急着妥协和对抗，要有信心找到第三种选择，创造的眼光重新审视问题。</p><h4 id="不断更新"><a href="#不断更新" class="headerlink" title="不断更新"></a>不断更新</h4><p>不断更新是一个螺旋式上升的过程，学习、实践、坚持。结合前六个习惯实现稳定而卓越的进步，包括身体、智力、精神、社会/感情。</p>]]></content>
      
      
      
        <tags>
            
            <tag> books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>exec方法</title>
      <link href="/2018/05/10/exec%E6%96%B9%E6%B3%95/"/>
      <url>/2018/05/10/exec%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>exec() 方法用于检索字符串中的正则表达式的匹配。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RegExpObject.exec(string)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>string</td><td>必需。要检索的字符串。</td></tr></tbody></table><p>返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。<br><a id="more"></a></p><ul><li>此数组的第 0 个元素是与正则表达式相匹配的文本，第 1 个元素是与 RegExpObject 的第 1 个子表达式相匹配的文本（如果有的话），第 2 个元素是与 RegExpObject 的第 2 个子表达式相匹配的文本（如果有的话），以此类推。</li><li>除了数组元素和 length 属性之外，exec() 方法还返回两个属性。index 属性声明的是匹配文本的第一个字符的位置。input 属性则存放的是被检索的字符串 string。</li><li>在调用非全局的 RegExp 对象的 exec() 方法时，返回的数组与调用方法 String.match() 返回的数组是相同的。</li><li>但是，当 RegExpObject 是一个全局正则表达式时，exec() 的行为就稍微复杂一些。它会在 RegExpObject 的 lastIndex 属性指定的字符处开始检索字符串 string。当 exec() 找到了与表达式相匹配的文本时，在匹配后，它将把 RegExpObject 的 lastIndex 属性设置为匹配文本的最后一个字符的下一个位置。这就是说，您可以通过反复调用 exec() 方法来遍历字符串中的所有匹配文本。当 exec() 再也找不到匹配的文本时，它将返回 null，并把 lastIndex 属性重置为 0。</li></ul><p>注意：如果在一个字符串中完成了一次模式匹配之后要开始检索新的字符串，就必须手动地把 lastIndex 属性重置为 0。<br>无论 RegExpObject 是否是全局模式，exec() 都会把完整的细节添加到它返回的数组中。这就是 exec() 与 String.match() 的不同之处，后者在全局模式下返回的信息要少得多。因此我们可以这么说，在循环中反复地调用 exec() 方法是唯一一种获得全局模式的完整模式匹配信息的方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tpl = <span class="string">'&lt;p&gt;Hello, my name is &lt;%this.name%&gt;. I\'m &lt;%this.age%&gt; years old.&lt;/p&gt;'</span>;</span><br><span class="line"><span class="keyword">var</span> re = <span class="regexp">/&lt;%([^%&gt;]+)?%&gt;/g</span>, match;</span><br><span class="line"><span class="keyword">while</span> (match = re.exec(tpl)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(match);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码输出如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"&lt;%this.name%&gt;"</span>, <span class="string">"this.name"</span>, <span class="attr">index</span>: <span class="number">21</span>, <span class="attr">input</span>: <span class="string">"&lt;p&gt;Hello, my name is &lt;%this.name%&gt;. I'm &lt;%this.age%&gt; years old.&lt;/p&gt;"</span>]</span><br><span class="line"></span><br><span class="line">[<span class="string">"&lt;%this.age%&gt;"</span>, <span class="string">"this.age"</span>, <span class="attr">index</span>: <span class="number">40</span>, <span class="attr">input</span>: <span class="string">"&lt;p&gt;Hello, my name is &lt;%this.name%&gt;. I'm &lt;%this.age%&gt; years old.&lt;/p&gt;"</span>]</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>match方法</title>
      <link href="/2018/05/10/match%E6%96%B9%E6%B3%95/"/>
      <url>/2018/05/10/match%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>match() 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。该方法类似 indexOf() 和 lastIndexOf()，但是它返回指定的值，而不是字符串的位置。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringObject.match(regexp)</span><br></pre></td></tr></table></figure></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>regexp</td><td>该参数可以是需要在 string 中检索的子串，也可以是需要检索的 RegExp 对象。</td></tr></tbody></table><p>返回一个存放匹配结果的数组。该数组的内容依赖于 regexp 是否具有全局标志 g。<br><a id="more"></a></p><ul><li>如果 regexp 没有标志 g，那么 match() 方法就只能在 stringObject 中执行一次匹配。如果没有找到任何匹配的文本， match() 将返回 null。否则，它将返回一个数组，其中存放了与它找到的匹配文本有关的信息。该数组的第 0 个元素存放的是匹配文本，而其余的元素存放的是与正则表达式的子表达式匹配的文本。除了这些常规的数组元素之外，返回的数组还含有两个对象属性。index 属性声明的是匹配文本的起始字符在 stringObject 中的位置，input 属性声明的是对 stringObject 的引用。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"1s plus 2s equal 3s"</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/(\d+)s/</span>))</span><br><span class="line"><span class="comment">// ["1s", "1", index: 0, input: "1s plus 2s equal 3s", groups: undefined]</span></span><br></pre></td></tr></table></figure><ul><li>如果 regexp 具有标志 g，则 match() 方法将执行全局检索，找到 stringObject 中的所有匹配子字符串。若没有找到任何匹配的子串，则返回 null。如果找到了一个或多个匹配子串，则返回一个数组。不过全局匹配返回的数组的内容与前者大不相同，它的数组元素中存放的是 stringObject 中所有的匹配子串，而且也没有 index 属性或 input 属性。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"1s plus 2s equal 3s"</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/(\d+)s/g</span>))</span><br><span class="line"><span class="comment">// ["1s", "2s", "3s"]</span></span><br></pre></td></tr></table></figure><p>注意：在全局检索模式下，match() 即不提供与子表达式匹配的文本的信息，也不声明每个匹配子串的位置。如果您需要这些全局检索的信息，可以使用 <a href="https://hangermeng.top/2018/05/10/exec%E6%96%B9%E6%B3%95/#more">RegExp.exec()</a>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暴雨欲来</title>
      <link href="/2018/05/09/%E6%9A%B4%E9%9B%A8%E6%AC%B2%E6%9D%A5/"/>
      <url>/2018/05/09/%E6%9A%B4%E9%9B%A8%E6%AC%B2%E6%9D%A5/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;阳光明媚如佛光倾洒于世间，蝉声响亮如夏雨敲打在芭蕉，长江以南西湖以北，一个科技园的平房里有一群年轻人坐在电脑前做着各种各样的事情，想着各自不为人知的秘密，等待着固定工作时间的结尾。<a id="more"></a><br>&emsp;&emsp;空调送来清凉的气息，滋润着这个渺小的空间，就好像阳光滋润着向日葵。盛夏的四点多依旧是散发着蓬勃的热气，衬托出室内的舒爽，一双双晶亮的眼眸仿佛在期待晚风的到来，夏天最舒服的莫过于夜晚的凉风，褪去了白日的炎炎之火，带来夜晚温柔的暗香。<br>&emsp;&emsp;孤独的许多人聚在一起，漂泊在这异地他乡，为了更好地将生活书写。也不知道是否还记得当年的骑着巨龙挥着剑的勇士，踏着火焰而来，驾着热浪而去，坚守在自己的梦想乡，一砖砖的一瓦瓦的建造属于自己的城堡，周围绿色的小山如碧波暗涌的大海，远处高山弥漫着丝丝的云雾，仿佛住着一个仙人老爷爷，还有一个总是缠在他身边撒娇的乖巧孙女，他们现在刚砍完柴，走在回家的路上。<br>&emsp;&emsp;每天早晨四五点钟的时候静静地坐在城堡的天台，安静地等待太阳的到来，当黑幕开始泛白，露出微微的亮光，温和的光线如此亲切。渐渐地看见了远处一条闪亮的小河，如一条银色的腰带系在绿色的连衣裙上。太阳越来越大了，目光凝视远方的天幕，期待着此时从天边飞来一个人，宛如天上仙子，身姿如幽幽湖水泛起柔美的光晕，当一抹笑容展开，透着满满的善良与快乐，骑士孤独的世界瞬间染上了缤纷烂漫的色彩。在一个美好的日子，遇见美好的姑娘，收起手中的荣耀之剑，归隐山林的城堡，从此只问柴米油盐，不问世事是非。多么美好的故事，多么美好的朝霞，多么美好的姑娘。如果上天有灵的话，一定会如此的安排吧。<br>&emsp;&emsp;多少个夜晚，一个人一头龙休息在滚滚的篝火旁，梦里自己正在解救一个受难的村庄，驾着巨龙翱翔天际，龙口中的火焰焚尽一切污秽的东西。<br>&emsp;&emsp;猛然间一股凉风将梦境打碎，悬崖，峭壁，孤木，一轮圆月如银盘。浪子漂泊在外，慈母牵挂在心。奈何好儿郎始终有一个骑龙仗剑的梦萦绕左右，剑终究是要自从坚硬的石缝之中拔出来的，龙中怒气终究是要化作炙热的火焰喷薄而出的。<br>&emsp;&emsp;天开始阴沉，忽然间雷声阵阵，一场倾盆大雨在所难免。母亲倚靠在门口仰望天空，像是在担心什么。<br>&emsp;&emsp;漂泊在外的人儿啊，当狂风暴雨再次响起的时候，你是否仍然有一种坚韧无比的勇气来面对苦难，即使前路漫漫，雨打湿了衣裳。</p><blockquote><p><em>语寺</em><br><em>2016.7</em></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> writing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>沉默</title>
      <link href="/2018/05/06/%E6%B2%89%E9%BB%98/"/>
      <url>/2018/05/06/%E6%B2%89%E9%BB%98/</url>
      
        <content type="html"><![CDATA[<p>缓缓走过小区四幢<br>二楼的落地窗前伫立着一只白色卷毛小狗<br>宛如一尊雕像静静地望着窗外<br>路边有条小狗正活蹦乱跳</p><a id="more"></a><p>阴沉的天空<br>经历了昨日一整天的大雨<br>布满朵朵低压的乌云<br>某处缝隙中透出美丽的金色光芒</p><p>那束阳光为了到达人间<br>走过了遥远的距离<br>但是现在再也无法前进了<br>唯有你敞开心扉<br>才能传递光与热</p><p>然而我在屋外等了很久很久<br>但是立夏的夜晚并没有任何问候<br>只有淅淅沥沥地落雨<br>安静<br>一如既往</p><p>渐渐地<br>炽热的心脏开始冷却<br>屋内的小狗<br>转身离开了窗台</p><p>我听闻最可笑的故事<br>是结局沉默了<br>曾经立誓不再做梦的少年<br>又一次醒了</p><blockquote><p><em>语寺</em><br><em>2018.5.6</em></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> writing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渔村的故事</title>
      <link href="/2018/04/27/%E6%B8%94%E6%9D%91%E7%9A%84%E6%95%85%E4%BA%8B/"/>
      <url>/2018/04/27/%E6%B8%94%E6%9D%91%E7%9A%84%E6%95%85%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[<p>我听过“薛兆丰的经济学课”，其中有一个渔村的故事，讲的非常精彩，但是当我想转述给别人的时候却不知道从何讲起，所以我再看了一遍，把主要内容记下来，故事很长，我已尽力精炼。</p><h3 id="故事的开端"><a href="#故事的开端" class="headerlink" title="故事的开端"></a>故事的开端</h3><p>话说很久很久以前，有一个渔村，渔村里生活着1000位渔民，每人每天都打4条鱼。日出而作，日落而息，周而复始。此时你可以很容易地算出，这个渔村的日总产量是4000条鱼。但是有一天，从天而降的一艘渔船打破了平静的小渔村，故事就此展开。</p><a id="more"></a><h3 id="集体所有制"><a href="#集体所有制" class="headerlink" title="集体所有制"></a>集体所有制</h3><p>其中一个人发现了这艘渔船，当然这艘船就归他了。乘坐这艘渔船出海打渔，能收获很多的鱼。而船主是一个民主党人，他决定按“集体所有制”的方式进行管理。首先让我们看一下，集体所有制的含义：一是经济平等，即平均分配收益；而是政治平等，即一人一票来决定是否让新人加入。<br>一个出海能打到6条鱼（平均产量是6条鱼），二个人出海能打到16条鱼（平均产量是8条鱼，第二个人加入的边际收益是10条鱼），之后加入的人越来越多，但是人数是有上限的，这个上限到来的时候就是平均产量下降的时候，比如第四个加入会使平均产量变为7.5条鱼，那船上的三个人就不会同意他上船，所以最终船上只会有三个人。<br>但是，事实真的是这样吗？<strong>人是有主观能动性的</strong>，我们永远不能抛开这个点来思考社会问题，第四个人可以分0.5条鱼给其他三个人来争取到上船的机会，因为这样他能得到6条鱼，依然比他在岸上的4条鱼收益要高。以此类推直到最后一个上船的人收益和岸上差不多。</p><h3 id="私有制"><a href="#私有制" class="headerlink" title="私有制"></a>私有制</h3><p>虽然船主是一个热爱平等的人，但是他太太并不是，她就每天和船主说；“把船收回来，变成你的私有财产，这样咱们家的收入才会增加”，最后船主决定采用“私有制”来进行管理。私有制的含义是他当老板雇佣别人来船上打工，付完工资以后的剩余财富归他。<br>这种情况下，边际收益和边际成本确定上船人数。假定第一个人上船的边际收益是6条鱼，第二个10条，第三个人8条，第四个人6条，第五个人4条，第六个人2条，后边上船的人边际收益越来越小。老板会雇佣第四个人上船吗？会的，因为他给每个人的工资是4条鱼，第四个人上船可以为他带来2条鱼的收益，所以他会雇佣第四个人。老板会雇佣第五个人上船吗？这个看老板心情。但是老板会雇佣第六个人吗？不会的，因为那是亏本生意。<br>当船上有5个人时，这艘船的<strong>经济价值实现了最大化</strong>，也就是14条鱼（收益-成本）。但是久而久之，私有制会产生一个问题，那就是贫富分化。</p><h3 id="全员所有制"><a href="#全员所有制" class="headerlink" title="全员所有制"></a>全员所有制</h3><p>时间一天天的过去，船主家里越来越富，就有人开始讨论：“你看他小时候和我们一起玩，本事不大，就因为第一个发现了船，就比我们富有那么多。”后来议论越来越大，最后全村决定把船收归公有，船主只能服从。<br>此后，为了避免贫富差距过大，不患寡而患不均，村民决定采用“全员所有制”。顾名思义，就是村里的所有人都可以使用这艘船，在这种情况下会有多少人上船呢？答案就是当船上的人平均只能打到4条鱼时的人数。这个时候有没有这艘船其实已经不重要了，因为你在船上的收益等于你在岸上的收益，也就是说，此时这艘船的经济价值已经荡然无存了。这就是“<strong>公地的悲剧</strong>”，1833年英国经济学家威廉·劳埃德(William Lloyd)提出这个概念。</p><h3 id="政府所有制"><a href="#政府所有制" class="headerlink" title="政府所有制"></a>政府所有制</h3><p>全员所有制执行了一段时间后，人们发现船上和岸上的收益其实差不多，人们开始纷纷回想起以前的美好时光。于是村里有一些思想家和改革家提出，建立一个“渔村资产管理委员会”，由委员会来决定上船的人数，同时收益归全社会所有。结果大家都同意了，由德才兼备的政府官员来管理这艘渔船，这就是“政府所有制”。那么在政府所有制下会有多少人上船呢？<br>回忆一下，之前的三种制度下针对这个问题都是有确切答案的。集体所有制下，船上的人关注的是平均收益的不下降。私有制下，船主关注的是边际收益最大化。全员所有制下，人们关注的是船上的平均收益和岸上的平均收益的对比。现在问，政府所有制下会有多少人上船？到底是关注平均收益不下降、平均收益不低于岸上的收益、还是边际产量？政府到底想要最大化什么？答案是：<strong>不知道</strong>。<br>这恰恰是问题所在。<strong>政府的目标是多元化的</strong>，不像个人那么简单明了，而这恰恰是政府存在理由。政府需要平衡各方的利益，所以政府的行为难以预测。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>集体看平均，私有重收益，全员盯对比，政府顾全局。<br>四种所有制是各有优劣的，并存于现实生活中，原因是：社会本身并不一个单一的经济体；制度本身就有一个漫长的尝试、筛选、存活的过程；私有制看似有很大的收益，但实施这种制度成本巨大。<br>不存在所谓的“大多数人的利益”。在集体所有制下，大多数人指的是已经在船上的人；在私有制下，大多数人指的是总财富最大化；在全员所有制下，大多数人指的是整个渔村的每一个人；在政府所有制下，大多数人指的是那些代表民众的官员。</p>]]></content>
      
      
      
        <tags>
            
            <tag> economics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现bind函数</title>
      <link href="/2018/04/11/%E5%AE%9E%E7%8E%B0bind%E5%87%BD%E6%95%B0/"/>
      <url>/2018/04/11/%E5%AE%9E%E7%8E%B0bind%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"window"</span>;</span><br><span class="line"><span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line">test(); <span class="comment">// window</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">"obj"</span>,</span><br><span class="line">  test: test</span><br><span class="line">&#125;;</span><br><span class="line">obj.test(); <span class="comment">// obj</span></span><br></pre></td></tr></table></figure><p>设计一个<code>customBind</code>函数，使其满足如下效果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">"obj"</span>,</span><br><span class="line">  test: test.customBind(<span class="built_in">window</span>)</span><br><span class="line">&#125;;</span><br><span class="line">obj.test(); <span class="comment">// window</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>很明显<code>customBind</code>函数需要改变 this 的指向，所以需要用到<code>call</code>或<code>apply</code>方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.customBind = <span class="function"><span class="keyword">function</span>(<span class="params">that</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _this = <span class="keyword">this</span>, <span class="comment">// _this 指向当前被调用的函数</span></span><br><span class="line">    slice = <span class="built_in">Array</span>.prototype.slice,</span><br><span class="line">    args = slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>); <span class="comment">// 将customBind函数的参数转化为数组</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _this.apply(that, args);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>以上代码可以实现作用域绑定，但是无法支持调用函数的参数传递，也就是说<code>obj.test(&#39;obj2&#39;)</code>里传递的参数不会被处理，因此我们需要改进一下<code>customBind</code>函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.customBind = <span class="function"><span class="keyword">function</span>(<span class="params">that</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _this = <span class="keyword">this</span>, <span class="comment">// _this 指向当前被调用的函数</span></span><br><span class="line">    slice = <span class="built_in">Array</span>.prototype.slice,</span><br><span class="line">    args = slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>); <span class="comment">// args 是 customBind 函数的参数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// slice.call(arguments, 0) 是被调用函数的参数</span></span><br><span class="line">    <span class="keyword">return</span> _this.apply(that, args.concat(slice.call(<span class="built_in">arguments</span>, <span class="number">0</span>)));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"window"</span>;</span><br><span class="line"><span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"作用域绑定："</span> + <span class="keyword">this</span>.name);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"customBind传递的参数："</span> + a);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"调用函数传递的参数："</span> + b);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">"obj"</span>,</span><br><span class="line">  test: test.customBind(<span class="built_in">window</span>, <span class="string">"obj"</span>)</span><br><span class="line">&#125;;</span><br><span class="line">obj.test(<span class="string">"obj2"</span>);</span><br><span class="line"><span class="comment">// 作用域绑定： window</span></span><br><span class="line"><span class="comment">// customBind传递的参数：obj</span></span><br><span class="line"><span class="comment">// 调用函数传递的参数：obj2</span></span><br></pre></td></tr></table></figure><p>测试通过，所以 js 中的 bind 函数可以这样实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span>(<span class="params">that</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _this = <span class="keyword">this</span>,</span><br><span class="line">    slice = <span class="built_in">Array</span>.prototype.slice,</span><br><span class="line">    args = slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _this.apply(that, args.concat(slice.call(<span class="built_in">arguments</span>, <span class="number">0</span>)));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果使用ES6的写法会更加简单：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span> (<span class="params">that, ...arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params">...inArg</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> _this.apply(that, arg.concat(inArg))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS中的单位</title>
      <link href="/2018/04/10/CSS%E4%B8%AD%E7%9A%84%E5%8D%95%E4%BD%8D/"/>
      <url>/2018/04/10/CSS%E4%B8%AD%E7%9A%84%E5%8D%95%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<p>在css中常用的单位就几个（<code>px</code>、<code>%</code>、<code>rem</code>、<code>s</code>、<code>deg</code>），其实css/css3中还有很多单位可用。</p><h3 id="长度"><a href="#长度" class="headerlink" title="长度"></a>长度</h3><table><thead><tr><th>单位</th><th>解释</th></tr></thead><tbody><tr><td>px</td><td>相对于屏幕分辨率而不是视窗大小：通常为1个点或1/72英寸</td></tr><tr><td>em</td><td>相对于父元素的字体大小</td></tr><tr><td>rem</td><td>相对于根元素字体大小</td></tr><tr><td>vw</td><td>相对于视窗的宽度：视窗宽度是100vw</td></tr><tr><td>vh</td><td>相对于视窗的高度：视窗高度是100vh</td></tr><tr><td>vm</td><td>相对于视窗的宽度或高度，取决于哪个更小</td></tr></tbody></table><a id="more"></a><p>ex | 相对于小写字母”x”的高度<br>ch    | 数字“0”的宽度<br>in    | inch, 英寸<br>cm    | centimeter, 厘米<br>mm    | millimeter, 毫米<br>pt    | 1/72英寸<br>pc    | 12点活字，或1/12点<br>%    | 相对于父元素。正常情况下是通过属性定义自身或其他元素</p><h4 id="ex、ch"><a href="#ex、ch" class="headerlink" title="ex、ch"></a>ex、ch</h4><p><code>ex</code>和<code>ch</code>，与<code>em</code>和<code>rem</code>相似，都依赖于<code>font-size</code>。然而，这两个单位还依赖于<code>font-family</code>，因为它们被定为基于特殊字体的法案。<code>ex</code>在CSS1中已经存在，所以兼容性很好，但<code>ch</code>的兼容性很差。</p><h3 id="时间、频率、角度"><a href="#时间、频率、角度" class="headerlink" title="时间、频率、角度"></a>时间、频率、角度</h3><table><thead><tr><th>单位</th><th>解释</th></tr></thead><tbody><tr><td>deg</td><td>degrees, 角度</td></tr><tr><td>grad</td><td>grads, 百分度</td></tr><tr><td>rad</td><td>radians, 弧度</td></tr><tr><td>turn</td><td>turns, 圈数</td></tr><tr><td>ms</td><td>milliseconds, 毫秒数</td></tr><tr><td>s</td><td>seconds, 秒数</td></tr><tr><td>Hz</td><td>Hertz, 赫兹</td></tr><tr><td>kHz</td><td>kilohertz, 千赫</td></tr></tbody></table><h4 id="角度-Degrees"><a href="#角度-Degrees" class="headerlink" title="角度(Degrees)"></a>角度(Degrees)</h4><p>角度范围从0~360度(deg)，正数表示顺时针旋转，负数则逆时针。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">rotate</span>(365<span class="selector-tag">deg</span>);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">rotate</span>(5<span class="selector-tag">deg</span>);</span><br></pre></td></tr></table></figure></p><h4 id="百分度-Grads"><a href="#百分度-Grads" class="headerlink" title="百分度(Grads)"></a>百分度(Grads)</h4><p>一个分度，或者说是百分度相对于1/400个整圆，跟角度单位一样，支持负值，负值表示逆时针方向。100gads相当于90deg。</p><h4 id="弧度-Rads"><a href="#弧度-Rads" class="headerlink" title="弧度(Rads)"></a>弧度(Rads)</h4><p>1弧度等于180/π度，约等于57.3度。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http中和缓存相关的header</title>
      <link href="/2018/04/09/http%E4%B8%AD%E5%92%8C%E7%BC%93%E5%AD%98%E7%9B%B8%E5%85%B3%E7%9A%84header/"/>
      <url>/2018/04/09/http%E4%B8%AD%E5%92%8C%E7%BC%93%E5%AD%98%E7%9B%B8%E5%85%B3%E7%9A%84header/</url>
      
        <content type="html"><![CDATA[<p>HTTP/1.1协议中和网页缓存相关的字段：</p><table><thead><tr><th>header</th><th>解释</th><th>例子</th></tr></thead><tbody><tr><td>Expires</td><td>响应过期的日期和时间</td><td>Expires: Thu, 01 Dec 2010 16:00:00 GMT</td></tr><tr><td>Cache-Control</td><td>告诉所有的缓存机制是否可以缓存及哪种类型</td><td>Cache-Control: no-cache</td></tr><tr><td>Last-Modified</td><td>请求资源的最后修改时间</td><td>Last-Modified: Tue, 15 Nov 2010 12:45:26 GMT</td></tr><tr><td>ETag</td><td>请求变量的实体标签的当前值</td><td>ETag: “737060cd8c284d8af7ad3082f209582d”</td></tr></tbody></table><p>HTTP/1.0协议中有一个功能比较弱的缓存控制机制：Pragma，使用HTTP/1.0的缓存将忽略<code>Expires</code>和<code>Cache-Control</code>。<br><a id="more"></a></p><h4 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h4><p><code>Expires</code>字段声明了一个网页或URL地址不再被浏览器缓存的时间，一旦超过了这个时间，浏览器都应该联系原始服务器。</p><h4 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h4><p><code>Cache-Control</code>字段中可以声明多些元素，例如no-cache, must-revalidate, max-age=600(文件被用户访问后的存活时间)等。这些元素用来指明页面被缓存最大时限，如何被缓存的，如何被转换到另一个不同的媒介，以及如何被存放在持久媒介中的。</p><h4 id="Last-Modified"><a href="#Last-Modified" class="headerlink" title="Last-Modified"></a>Last-Modified</h4><p><code>Last-Modified</code>和<code>ETag</code>是条件请求(Conditional Request)相关的两个字段。如果一个缓存收到了针对一个页面的请求，它发送一个验证请求询问服务器页面是否已经更改，在HTTP头里面带上<code>ETag</code>和<code>If Modify Since</code>。服务器根据这些信息判断是否有更新信息，如果没有，就返回HTTP 304（NotModify）；如果有更新，返回HTTP 200和更新的页面内容，并且携带新的<code>ETag</code>和<code>LastModified</code>。</p><h4 id="ETag"><a href="#ETag" class="headerlink" title="ETag"></a>ETag</h4><p>既然有了<code>Last-Modified</code>，为什么还要用<code>ETag</code>字段呢？因为如果在一秒钟之内对一个文件进行两次更改，Last-Modified就会不正确。因此，HTTP/1.1利用<code>Entity Tag</code>头提供了更加严格的验证。</p><p>更多header字段见<a href="https://www.cnblogs.com/Joans/p/3956490.html" target="_blank" rel="noopener">这里</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Last-Modified工作原理</title>
      <link href="/2018/04/08/Last-Modified%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
      <url>/2018/04/08/Last-Modified%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>Last-Modified 是http响应头的一部分，与之相对的是请求头中的 If-Modified-Since ，都表示请求资源的最后修改时间。</p><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><ol><li>当客户端访问页面时，服务器会将页面最后修改时间通过 Last-Modified 标识由服务器发往客户端</li><li>客户端记录修改时间，再次请求本地存在的cache页面时，客户端会通过 If-Modified-Since 头将先前服务器端发过来的最后修改时间戳发送回去</li><li>服务器端通过这个时间戳判断客户端的页面是否是最新的，如果不是最新的，则返回新的内容，如果是最新的，则返回 304 告诉客户端其本地 cache 的页面是最新的</li></ol><p>由此客户端可以直接从本地加载页面，减少在网络上传输的数据，同时也减轻了服务器的负担。</p>]]></content>
      
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webkit渲染机制</title>
      <link href="/2018/04/08/webkit%E6%B8%B2%E6%9F%93%E6%9C%BA%E5%88%B6/"/>
      <url>/2018/04/08/webkit%E6%B8%B2%E6%9F%93%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h4 id="从输入URL到DOM"><a href="#从输入URL到DOM" class="headerlink" title="从输入URL到DOM"></a>从输入URL到DOM</h4><ol><li>用户输入URL，webkit调用其资源加载器加载对应的网页</li><li>网页被交给HTML解释器,经历以下解析变成DOM结构：Bytes → Characters → Tokens → Nodes → Object Model。如果节点需要依赖其他资源：图片、css、视频等，调用资源加载器异步加载他们，期间不阻碍DOM树的构建</li><li>如果遇到js标签，调用js引擎解释并执行，js可能会修改DOM树结构，所以会阻碍DOM树的构建。网页中依赖的js资源加载完成后，触发DOMContentLoad事件</li></ol><a id="more"></a><p>DOM树上挂载的是DOM节点，页面上的每个HTML元素都存储成为一个DOM节点，比如body, div等。DOM树的根节点为Document节点。Render树上挂载的对象称为RenderObject，一般情况下DOM树上的每个节点对应RenderObject树上的一个节点，但是也有例外，比如某个DOM节点设置为None时，在Render树上就没有相对应的RenderObject。RenderObject对象实际上是DOM节点一个虚拟的输出，它知道如何控制DOM节点的绘制。</p><h4 id="从DOM到屏幕"><a href="#从DOM到屏幕" class="headerlink" title="从DOM到屏幕"></a>从DOM到屏幕</h4><ol><li>css文件下载完成后会被css解释器解释成CSSOM， 并在DOM树上附加解释后的样式信息，构建RenderObject树，即：Render Tree。</li><li>webkit会根据网页的层次结构创建RenderLayer树，处理诸如z-index、浮动、定位等布局</li><li>浏览器之后会将每个RenderLayer栅格化，并独立的绘制进位图中，将这些位图作为纹理上传至 GPU，复合多个层来生成最终的屏幕图像。</li></ol><h4 id="树之间的关系"><a href="#树之间的关系" class="headerlink" title="树之间的关系"></a>树之间的关系</h4><ul><li>DOM树: html代码下载完后解析的结果，包含了所有HTML标签，包括display:none的隐藏标签，还有用JS动态添加的元素等</li><li>Render树: RenderObject组成的树结构，RenderObject和DOM结构的Node可视节点基本上是一对一的关系，CSSOM生成后和DOM树合成的树结构，DOM树知道如何绘制自己，但是要注意特殊情况。</li><li>RenderLayer树: 由RenderLayer组成，RenderLayer和RenderObject是一对多的关系，RenderLayer主要负责网页的层次关系</li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://juejin.im/entry/57f9eb9e0bd1d00058bc0a1b" target="_blank" rel="noopener">WEBKIT 渲染不可不知的这四棵树</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack项目优化</title>
      <link href="/2018/04/04/webpack%E9%A1%B9%E7%9B%AE%E4%BC%98%E5%8C%96/"/>
      <url>/2018/04/04/webpack%E9%A1%B9%E7%9B%AE%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h3 id="提取库文件"><a href="#提取库文件" class="headerlink" title="提取库文件"></a>提取库文件</h3><h4 id="CommonsChunkPlugin"><a href="#CommonsChunkPlugin" class="headerlink" title="CommonsChunkPlugin"></a>CommonsChunkPlugin</h4><p>React、jQuery等库文件很少变化，并且到处被复用，应该被提取出来，并且得到长时间的缓存。<br>使用插件：<a href="https://webpack.js.org/plugins/commons-chunk-plugin/#extra-async-commons-chunk" target="_blank" rel="noopener">webpack.optimize.CommonsChunkPlugin</a>（webpack内建插件）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line">  react: [<span class="string">'react'</span>],</span><br><span class="line">  jquery: [<span class="string">'jquery'</span>]</span><br><span class="line">&#125;,</span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">    name: [<span class="string">'jquery'</span>, <span class="string">'react'</span>],</span><br><span class="line">    minChunks: <span class="literal">Infinity</span></span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><a id="more"></a><h4 id="externals"><a href="#externals" class="headerlink" title="externals"></a>externals</h4><p>webpack的<code>externals</code>配置项规定某些依赖不会被webpack解析，转而从全局变量（引入CDN地址）中去取。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">externals: &#123;</span><br><span class="line">    <span class="comment">// externals中的key是import中使用的</span></span><br><span class="line">    <span class="comment">// externals中的value是window下调用的</span></span><br><span class="line">    echarts: <span class="string">'echarts'</span>,</span><br><span class="line">    _: <span class="string">'lodash'</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h3 id="规定解析文件"><a href="#规定解析文件" class="headerlink" title="规定解析文件"></a>规定解析文件</h3><p>webpack的<code>resolve</code>配置项规定解析路径，让被<code>require</code>或<code>import</code>的模块更快地被定位到。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">resolve：&#123;</span><br><span class="line">    root: [</span><br><span class="line">        path.resolve(<span class="string">'./node_modules'</span>)</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="代码压缩"><a href="#代码压缩" class="headerlink" title="代码压缩"></a>代码压缩</h3><p>使用插件：<a href="https://webpack.js.org/plugins/uglifyjs-webpack-plugin/" target="_blank" rel="noopener">UglifyJsPlugin</a> （webpack3.0之后不再是内建插件，需要额外下载<code>npm i -D uglifyjs-webpack-plugin</code>）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UglifyJsPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> UglifyJsPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="缓存控制"><a href="#缓存控制" class="headerlink" title="缓存控制"></a>缓存控制</h3><p>缓存控制需要做到两点：</p><ul><li>对于没有修改的文件，从缓存中获取</li><li>对于已经修改的文件，不从缓存中获取</li></ul><p>webpack通过给文件名加上版本号（一串哈希值）来实现缓存。当文件没有更新时，哈希值不会被修改，文件名不变；当文件更新时，哈希值改变，文件名也改变，浏览器就会去加载新的文件。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">  path: __dirname + <span class="string">'/dist/'</span></span><br><span class="line">  <span class="comment">// 8 指hash长度为8，默认是16</span></span><br><span class="line">  filename: <span class="string">"[chunkhash:8].[name].js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="插入引用"><a href="#插入引用" class="headerlink" title="插入引用"></a>插入引用</h3><p>由于文件名带上版本号后，每一次文件变化，都需要HTML文件里手动修改引用的文件名，这种工作很琐碎且容错。所以就有了 <a href="https://webpack.js.org/plugins/extract-text-webpack-plugin/#options" target="_blank" rel="noopener">ExtractTextPlugin</a> 和 <a href="https://webpack.js.org/plugins/html-webpack-plugin/#src/components/Sidebar/Sidebar.jsx" target="_blank" rel="noopener">HtmlWebpackPlugin</a></p><h4 id="插入css引用"><a href="#插入css引用" class="headerlink" title="插入css引用"></a>插入css引用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">"extract-text-webpack-plugin"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">      test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      use: ExtractTextPlugin.extract(&#123;</span><br><span class="line">        fallback: <span class="string">"style-loader"</span>,</span><br><span class="line">        use: <span class="string">"css-loader"</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> ExtractTextPlugin(<span class="string">"styles.css"</span>),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="插入js引用"><a href="#插入js引用" class="headerlink" title="插入js引用"></a>插入js引用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> webpackConfig = &#123;</span><br><span class="line">  entry: <span class="string">'index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">    filename: <span class="string">'index_bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [<span class="keyword">new</span> HtmlWebpackPlugin()]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决SVN更新冲突</title>
      <link href="/2018/04/03/%E8%A7%A3%E5%86%B3SVN%E6%9B%B4%E6%96%B0%E5%86%B2%E7%AA%81/"/>
      <url>/2018/04/03/%E8%A7%A3%E5%86%B3SVN%E6%9B%B4%E6%96%B0%E5%86%B2%E7%AA%81/</url>
      
        <content type="html"><![CDATA[<h3 id="冲突发生的情况"><a href="#冲突发生的情况" class="headerlink" title="冲突发生的情况"></a>冲突发生的情况</h3><p>假设A、B两个用户，他们分别从SVN服务器中检出了<code>test.js</code>文件，此时A、B、服务器三个地方的<code>test.js</code>的版本都是13。现在，B用户修改文件内容并提交，此时B用户和服务器的<code>test.js</code>的版本都变为14，只有A用户的<code>test.js</code>的版本还是13。接下来，A用户修改不同的内容然后提交。<br>由于A用户是在13版本上做的修改，而服务器已经是14版本了，所以会提交失败。<br>提交失败之后有两个选择：第一，选择revert，省去了解决冲突的麻烦；第二，选择更新文件，这时会有冲突问题。</p><a id="more"></a><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p>更新后会产生以下冲突文件：</p><ul><li>test.js.mine: 13版本内容 + A用户的修改</li><li>test.js.r13: 13版本内容</li><li>test.js.r14: 13版本内容 + B用户的修改</li><li>test.js: 14版本内容 和 A用户的修改 合并后的文件</li></ul><p>根据需要整理<code>test.js</code>的内容，然后右击文件点击<code>resolve</code>标记为解决，这时只剩修改完毕的文件存在，其他三个文件都会自动消失。如果新版本不需要用户B修改的内容，可以直接复制<code>test.js.mine</code>的内容替换<code>test.js</code>的内容。然后用户A就可以顺利提交了。</p><h3 id="冲突符号"><a href="#冲突符号" class="headerlink" title="冲突符号"></a>冲突符号</h3><p>在整理<code>test.js</code>时，不会遇到如下的特殊符号：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; .mine</span><br><span class="line">    A用户的修改内容</span><br><span class="line">||||||| .r14</span><br><span class="line">    B用户的修改内容</span><br><span class="line">=======</span><br><span class="line">    13版本内容</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; .r13</span><br></pre></td></tr></table></figure></p><p>修改后的代码里不能出现这些符号。</p>]]></content>
      
      
      
        <tags>
            
            <tag> SVN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue遍历渲染</title>
      <link href="/2018/03/29/Vue%E9%81%8D%E5%8E%86%E6%B8%B2%E6%9F%93/"/>
      <url>/2018/03/29/Vue%E9%81%8D%E5%8E%86%E6%B8%B2%E6%9F%93/</url>
      
        <content type="html"><![CDATA[<p>Vue 中要遍历 n 项可以这么写<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"i in n"</span>&gt;</span>&#123;&#123;i&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"i in new Array(n)"</span>&gt;</span>&#123;&#123;i&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>遍历数组<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(item, index)in array"</span>&gt;</span></span><br><span class="line">  &#123;&#123; item &#125;&#125; - &#123;&#123; index &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>遍历对象，遍历顺序就是对象书写顺序<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(value, key, index) in object"</span>&gt;</span></span><br><span class="line">  &#123;&#123; index &#125;&#125;. &#123;&#123; key &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="v-for-和-v-if"><a href="#v-for-和-v-if" class="headerlink" title="v-for 和 v-if"></a>v-for 和 v-if</h3><p>当它们处于同一节点，<code>v-for</code>的优先级比<code>v-if</code><strong>更高</strong>，这意味着<code>v-if</code>将分别重复运行于每个<code>v-for</code>循环中。所以下面代码在<code>arr.length &gt; 2</code>的情况下会报错<code>RangeError: Invalid array length</code>:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"arr.length &lt; 2"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-for</span>=<span class="string">"item in (2 - arr.length)"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这是因为<strong>负数</strong>不能遍历，即使有<code>v-if</code>的限制也会报错！<br>可以修改为<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"arr.length &lt; 2"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-for</span>=<span class="string">"item in Math.abs(2 - arr.length)"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>如果你的目的是有条件地跳过循环的执行，那么可以将<code>v-if</code>置于<strong>外层元素</strong> (或 <code>&lt;template&gt;</code>)上。</p><h3 id="v-for-on-a"><a href="#v-for-on-a" class="headerlink" title="v-for on a "></a>v-for on a <template></template></h3><p>类似于<code>v-if</code>，你也可以利用带有<code>v-for</code>的<code>&lt;template&gt;</code>渲染多个元素。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; item.msg &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="key"><a href="#key" class="headerlink" title="key"></a>key</h3><p>官方建议尽可能在使用<code>v-for</code>时提供<code>key</code>，除非遍历输出的 DOM 内容非常简单，或者是刻意依赖默认行为以获取性能上的提升。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack配置介绍</title>
      <link href="/2018/03/28/webpack%E9%85%8D%E7%BD%AE%E4%BB%8B%E7%BB%8D/"/>
      <url>/2018/03/28/webpack%E9%85%8D%E7%BD%AE%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p>收集了一些日常项目中经常会用到的 webpack 配置，加深对webpack配置的理解。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// entry: 打包的入口文件，一个字符串或者一个对象</span></span><br><span class="line">    entry: &#123;</span><br><span class="line">        bundle: <span class="string">'./index.js'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// output:配置打包的结果，一个对象</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        <span class="comment">// fileName：定义输出文件名，一个字符串</span></span><br><span class="line">        <span class="comment">// path：定义输出文件路径，一个字符串</span></span><br><span class="line">        path: __dirname,</span><br><span class="line">        filename: <span class="string">'[name].js'</span> <span class="comment">// 这里的name就是指 entry 对象的键名，即 bundle</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// module: 定义对模块的处理逻辑，一个对象</span></span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        <span class="comment">// rules: 定义文件加载规则，一个数组</span></span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.vue$/</span>, <span class="comment">// 正则表达式，用于匹配指定文件</span></span><br><span class="line">            loader: <span class="string">'vue-loader'</span>, <span class="comment">// 加载器名字</span></span><br><span class="line">            options: vueLoaderConfig, <span class="comment">// 传入加载器的参数</span></span><br><span class="line">            <span class="comment">// include: 字符串或者数组，规定需要解析的文件夹</span></span><br><span class="line">            include: [resolve(<span class="string">'src'</span>)],</span><br><span class="line">            <span class="comment">// exclude：字符串或者数组，规定不需要解析的文件夹</span></span><br><span class="line">            exclude: [resolve(<span class="string">'node_modules'</span>)]</span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="comment">// loaders: 定义一系列的加载器，一个数组</span></span><br><span class="line">        loaders: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            loader: <span class="string">"style-loader!css-loader"</span></span><br><span class="line">        &#125;],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// devtool: 规定一个开发工具来加快调试，字符串</span></span><br><span class="line">    devtool: <span class="string">'cheap-module-eval-source-map'</span>,</span><br><span class="line">    <span class="comment">// resolve: 模块解析的相关配置，一个对象</span></span><br><span class="line">    resolve: &#123;</span><br><span class="line">        <span class="comment">// extensions：自动补全没有后缀的文件，一个数组</span></span><br><span class="line">        extensions: [<span class="string">'.js'</span>, <span class="string">'.vue'</span>, <span class="string">'.json'</span>],</span><br><span class="line">        <span class="comment">// alias: 设置解析别名，一个对象</span></span><br><span class="line">        alias: &#123;</span><br><span class="line">            <span class="string">'~'</span>: resolve(<span class="string">'src/components'</span>), <span class="comment">// 配置后使 import('~') 等价于 import('src/components')</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// externals: 规定某些依赖不会被webpack解析，一个对象</span></span><br><span class="line">    externals: &#123;</span><br><span class="line">        <span class="comment">// externals中的key是import中使用的</span></span><br><span class="line">        <span class="comment">// externals中的value是window下调用的</span></span><br><span class="line">        echarts: <span class="string">'echarts'</span>,</span><br><span class="line">        _: <span class="string">'lodash'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// plugins: 定义一系列的插件，一个数组</span></span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> MyPlugin(&#123;<span class="attr">name</span>: <span class="string">'hanger'</span>&#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>更多更详细的介绍在<a href="https://www.webpackjs.com/configuration/" target="_blank" rel="noopener">官方文档</a>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>制作banner组件</title>
      <link href="/2018/03/27/%E5%88%B6%E4%BD%9Cbanner%E7%BB%84%E4%BB%B6/"/>
      <url>/2018/03/27/%E5%88%B6%E4%BD%9Cbanner%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>在实际的移动端项目中会遇到横幅展示的需求，用来展示最新上架的内容或者广告等。为此我制作了一个 Vue 组件（<a href="https://github.com/hamger/hg-vcomponents" target="_blank" rel="noopener">Demo&amp;源码</a>），让我们来一步步实现这个组件吧，有可以改进的地方欢迎指正。</p><h3 id="制定一个小目标"><a href="#制定一个小目标" class="headerlink" title="制定一个小目标"></a>制定一个小目标</h3><p>首先我们搭建一个简单的例子，并希望引入<code>Banner</code>组件就可以实现 banner 效果。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">banner</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"item"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://olislpb6q.bkt.clouddn.com/bizhi1.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"item"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://olislpb6q.bkt.clouddn.com/bizhi2.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"item"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://olislpb6q.bkt.clouddn.com/bizhi4.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">banner</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; Banner &#125; <span class="keyword">from</span> <span class="string">'@/components'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">'el-banner'</span>,</span></span><br><span class="line">  components: &#123; Banner &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.item</span> &#123;</span></span><br><span class="line">  img &#123;</span><br><span class="line">    height: 150px;</span><br><span class="line">    width: 100%;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="创建组件结构"><a href="#创建组件结构" class="headerlink" title="创建组件结构"></a>创建组件结构</h3><p>编写 banner 组件的第一步就是搭建组件基础的 HTML 和 CSS 。使用如下样式，可以使子元素自动撑开父元素宽度，这样就不需要计算父元素的宽度了。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"view"</span> <span class="attr">:style</span>=<span class="string">"&#123;height: height&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">"wrap"</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span> <span class="attr">rel</span>=<span class="string">"stylesheet/scss"</span>  <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.view</span> &#123;</span></span><br><span class="line">    position: relative;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    font-size: 0; // 去除幽灵节点的影响</span><br><span class="line"><span class="css">    <span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line">      white-space: nowrap; // 确保所有子元素在一行显示</span><br><span class="line"><span class="css">      <span class="selector-tag">width</span><span class="selector-pseudo">:auto</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">transition</span>: <span class="selector-tag">transform</span> 0<span class="selector-class">.2s</span> <span class="selector-tag">ease-out</span>;</span></span><br><span class="line">      &amp; &gt; div &#123;</span><br><span class="line"><span class="css">        <span class="selector-tag">display</span><span class="selector-pseudo">:inline-block</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="编写js代码"><a href="#编写js代码" class="headerlink" title="编写js代码"></a>编写js代码</h3><p>控制运动的核心是改变父元素的<code>transform: translate3d(${disX}px, 0, 0)</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">"bannerView"</span>  <span class="attr">class</span>=<span class="string">"view"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">"wrap"</span> <span class="attr">class</span>=<span class="string">"wrap"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">touchstart</span>=<span class="string">"_touchstart"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">touchmove</span>=<span class="string">"_touchmove"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">touchend</span>=<span class="string">"_touchend"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:style</span>=<span class="string">"&#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        transform: `translate3d($&#123;disX&#125;px, 0, 0)`</span></span></span><br><span class="line"><span class="tag"><span class="string">      &#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">'banner'</span>,</span></span><br><span class="line">  data () &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      startX: 0,</span><br><span class="line">      curPos: 0,</span><br><span class="line">      disX: 0,</span><br><span class="line">      itemWidth: 0,</span><br><span class="line">      itemAmount: 0</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    _touchstart (e) &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.startX = e.touches[<span class="number">0</span>].clientX;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.curPos = <span class="keyword">this</span>.disX;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    _touchmove (e) &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> moveX = e.touches[<span class="number">0</span>].clientX - <span class="keyword">this</span>.startX;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (moveX &gt; <span class="number">0</span> &amp;&amp; <span class="keyword">this</span>.disX &gt;= <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.disX = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (moveX &lt; <span class="number">0</span> &amp;&amp; <span class="keyword">this</span>.disX &lt;= <span class="number">-1</span> * <span class="keyword">this</span>.itemWidth * (<span class="keyword">this</span>.itemAmount - <span class="number">1</span>)) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.disX = <span class="number">-1</span> * <span class="keyword">this</span>.itemWidth * (<span class="keyword">this</span>.itemAmount - <span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.disX = <span class="keyword">this</span>.curPos + moveX;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    _touchend (e) &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.disX = <span class="built_in">Math</span>.round(<span class="keyword">this</span>.disX / <span class="keyword">this</span>.itemWidth) * <span class="keyword">this</span>.itemWidth;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line"><span class="javascript">    <span class="comment">// 获得总共有多少个子元素</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.itemAmount = <span class="keyword">this</span>.$slots.item.length;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获得外部容器的宽度，即子元素的宽度</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.itemWidth = <span class="keyword">this</span>.$refs.bannerView.clientWidth;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>到这里一个简单的 Banner 组件就诞生了，在此基础上我们还可以一些其他东西，比如底部的小圆点，用来提示当前图片所在的位置。具体实现代码见<a href="https://github.com/hamger/hg-vcomponents/blob/master/src/components/Banner/banner.vue" target="_blank" rel="noopener">这里</a>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现相对于父元素的固定定位</title>
      <link href="/2018/03/27/%E5%AE%9E%E7%8E%B0%E7%9B%B8%E5%AF%B9%E4%BA%8E%E7%88%B6%E5%85%83%E7%B4%A0%E7%9A%84%E5%9B%BA%E5%AE%9A%E5%AE%9A%E4%BD%8D/"/>
      <url>/2018/03/27/%E5%AE%9E%E7%8E%B0%E7%9B%B8%E5%AF%B9%E4%BA%8E%E7%88%B6%E5%85%83%E7%B4%A0%E7%9A%84%E5%9B%BA%E5%AE%9A%E5%AE%9A%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<p>传统的<code>position: fixed;</code>是相对于窗口的固定定位，但是实际项目中经常会遇到需要根据指定父元素固定定位的情况。研究后找到了两种可行的实现方案。以下代码的效果是<code>.header</code>会相对于<code>.wrapper</code>固定显示，这就实现了相对于父元素的固定定位。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span>little title<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in new Array(30)"</span>&gt;</span>item - &#123;&#123;index&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>父元素相对定位，标题正常布局，内容绝对定位。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">320px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  .header &#123;</span><br><span class="line">    <span class="selector-tag">background-color</span>: <span class="selector-id">#fbb1b1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    top: 40px; // 避免遮住标题</span><br><span class="line">    <span class="selector-tag">bottom</span>: 0;</span><br><span class="line">    overflow: scroll; // 必加，否则列表无法滚动</span><br><span class="line">    <span class="selector-tag">background-color</span>: <span class="selector-id">#ccfff3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>父元素相对定位，标题绝对定位，内容正常布局。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">320px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  padding-top: 40px; // 避免遮住内容</span><br><span class="line">  <span class="selector-class">.header</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fbb1b1</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">280px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: scroll;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccfff3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建Android开发环境</title>
      <link href="/2018/03/25/%E6%90%AD%E5%BB%BAAndroid%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
      <url>/2018/03/25/%E6%90%AD%E5%BB%BAAndroid%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p>学习 ReactNative 的第一步就是搭建开发环境，在搭建Android开发环境中又遇到不少坑，详细安装过程见<a href="https://reactnative.cn/docs/0.51/getting-started.html#content" target="_blank" rel="noopener">这里</a>，以下记录搭建过程中遇到的坑。</p><h3 id="坑一"><a href="#坑一" class="headerlink" title="坑一"></a>坑一</h3><p>运行<code>react-native run-android</code>后报错<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* What went wrong:</span><br><span class="line">A problem occurred evaluating project <span class="string">':app'</span>.  </span><br><span class="line">&gt; SDK location not found. Define location with sdk.dir <span class="keyword">in</span> the local.properties file or with an ANDROID_HOME environment variable.</span><br></pre></td></tr></table></figure></p><p>解决方法是在<code>android</code>目录下创建一个名叫<code>local.properties</code>文件，里边的内容如下</p><ul><li>in Windows: <code>C:/Users/USERNAME/AppData/Local/Android/sdk</code></li><li>in macOS: <code>sdk.dir = /Users/USERNAME/Library/Android/sdk</code></li><li>in linux: <code>sdk.dir = /home/USERNAME/Android/Sdk</code></li></ul><p>这里的<code>USERNAME</code>是你的用户名，然后在终端运行<code>react-native run-android</code>。</p><a id="more"></a><h3 id="坑二"><a href="#坑二" class="headerlink" title="坑二"></a>坑二</h3><p>在解决了坑一后，运行<code>react-native run-android</code>，你可能会遇到如下错误<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* What went wrong:</span><br><span class="line">Execution failed <span class="keyword">for</span> task <span class="string">':app:installDebug'</span>.</span><br><span class="line">&gt; com.android.builder.testing.api.DeviceException: No connected devices!</span><br></pre></td></tr></table></figure></p><p>这里的关键信息是<code>No connected devices!</code>，意为没有可连接的设备（安卓模拟器）。<br>所以我们需要开启一个安卓模拟器，我这里用的是 Genymotion ，关于 Genymotion 的下载安装可以看<a href="https://www.cnblogs.com/whycxb/p/6850454.html" target="_blank" rel="noopener">这篇文章</a>。<br>开启 Genymotion 安卓模拟器后，再次运行<code>react-native run-android</code>，如果没有报错，这时app已经在你的安卓模拟器中了，观察模拟器首页你可能看不到，需要到<strong>所有应用程序</strong>中去查找，会有个app的名字是你的项目名！</p><h3 id="修改项目"><a href="#修改项目" class="headerlink" title="修改项目"></a>修改项目</h3><ul><li>打开项目根目录下的<code>index.android.js</code>，然后随便改上几行。</li><li>在 Genymotion 模拟器中双击 R 键，就能看到你的修改！</li><li>在 Genymotion 模拟器中按下 ⌘+M 可打开开发者菜单。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ReactNative </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分析webpack打包后代码</title>
      <link href="/2018/03/20/%E5%88%86%E6%9E%90webpack%E6%89%93%E5%8C%85%E5%90%8E%E4%BB%A3%E7%A0%81/"/>
      <url>/2018/03/20/%E5%88%86%E6%9E%90webpack%E6%89%93%E5%8C%85%E5%90%8E%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>阅读了 webpack 打包后的文件，对其打包原理做一个简短的理解。</p><p>首先新建一个文件夹，执行命令行<code>npm i webpack</code>安装 webpack，然后配置<code>webpack.config.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    bundle: <span class="string">'./index.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: __dirname,</span><br><span class="line">    filename: <span class="string">'[name].js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>创建 index.js ，内容如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aText = <span class="built_in">require</span>(<span class="string">"./a.js"</span>);</span><br><span class="line"><span class="keyword">var</span> bText = <span class="built_in">require</span>(<span class="string">"./b.js"</span>);</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'This is Moudle Index. I depends ('</span> + aText +<span class="string">') and ('</span>+ bText + <span class="string">').'</span>;</span><br><span class="line"><span class="built_in">document</span>.write(str);</span><br></pre></td></tr></table></figure></p><p>创建 a.js ，内容如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bText = <span class="built_in">require</span>(<span class="string">"./b.js"</span>);</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'This is Moudle A. I depends ('</span> + bText + <span class="string">').'</span>;</span><br><span class="line"><span class="built_in">module</span>.exports = str;</span><br></pre></td></tr></table></figure></p><p>创建 b.js ，内容如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="string">"This is Moudle B."</span>;</span><br></pre></td></tr></table></figure></p><p>然后在该目录下执行命令行<code>webpack</code>，通过阅读生成的 bundle.js ，我模仿它编写了一个更简单的函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">modules</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// modules 存储的是模块函数</span></span><br><span class="line">  <span class="comment">// installedModules 存储的是模块对象</span></span><br><span class="line">  <span class="keyword">var</span> installedModules = &#123;&#125;;</span><br><span class="line">  <span class="comment">// 定义 require 函数 </span></span><br><span class="line">  <span class="comment">// require的功能是执行 modules[id] 里的模块函数，并将返回的结果放在 installedModules[id].exports</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 检测当前模块是否已添加，防止重复添加</span></span><br><span class="line">      <span class="keyword">if</span> (installedModules[moduleId]) &#123;</span><br><span class="line">          <span class="keyword">return</span> installedModules[moduleId].exports;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 创建一个模块对象，用于存放模块相关的信息</span></span><br><span class="line">      <span class="keyword">var</span> <span class="built_in">module</span> = installedModules[moduleId] = &#123;</span><br><span class="line">          i: moduleId, <span class="comment">// 模块id</span></span><br><span class="line">          l: <span class="literal">false</span>, <span class="comment">// 是否加载完成</span></span><br><span class="line">          exports: &#123;&#125; <span class="comment">// 模块内容</span></span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="comment">// 执行模块函数，此时会在 module.exports 添加模块内容</span></span><br><span class="line">      modules[moduleId].call(<span class="built_in">module</span>.exports, <span class="built_in">module</span>, <span class="built_in">module</span>.exports, __webpack_require__);</span><br><span class="line">      <span class="comment">// 标记模块加载完成</span></span><br><span class="line">      <span class="built_in">module</span>.l = <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">// 返回模块内容</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __webpack_require__(<span class="number">1</span>);</span><br><span class="line">&#125;)([</span><br><span class="line">  <span class="comment">/* 0 */</span></span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">module, exports</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">module</span>.exports = <span class="string">"This is Moudle B."</span>;</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">/* 1 */</span></span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> aText = __webpack_require__(<span class="number">2</span>);</span><br><span class="line">      <span class="keyword">var</span> bText = __webpack_require__(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">var</span> str = <span class="string">'This is Moudle Index. I depends ('</span> + aText + <span class="string">') and ('</span> + bText + <span class="string">').'</span>;</span><br><span class="line">      <span class="built_in">document</span>.write(str);</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">/* 2 */</span></span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> bText = __webpack_require__(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">var</span> str = <span class="string">'This is Moudle A. I depends ('</span> + bText + <span class="string">').'</span>;</span><br><span class="line">      <span class="built_in">module</span>.exports = str;</span><br><span class="line">  &#125;)</span><br><span class="line">])</span><br></pre></td></tr></table></figure></p><p>以上代码与打包后的 bundle.js 具有同样的效果。从中我们可以看出，webpack 会把所有引用到的文件内容作为参数<code>modules</code>的内容，并将每个内容标上唯一的id，将<code>require(&quot;./a.js&quot;)</code>之类的引用语句替换为<code>__webpack_require__(id)</code>函数。在匿名函数体内会去执行入口文件（index.js）中的代码，并递归调用其中的<code>__webpack_require__(id)</code>，从而实现引入所有的项目依赖。</p>]]></content>
      
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建iOS开发环境</title>
      <link href="/2018/03/17/%E6%90%AD%E5%BB%BAiOS%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
      <url>/2018/03/17/%E6%90%AD%E5%BB%BAiOS%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p>学习 ReactNative 的第一步就是搭建开发环境，在搭建iOS开发环境中就遇到不少坑，以下假定你已经安装了node和Xcode。</p><h3 id="安装-Yarn-和-React-Native-命令行工具"><a href="#安装-Yarn-和-React-Native-命令行工具" class="headerlink" title="安装 Yarn 和 React Native 命令行工具"></a>安装 Yarn 和 React Native 命令行工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yarn react-native-cli</span><br></pre></td></tr></table></figure><p>设置yarn的镜像源<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn config <span class="built_in">set</span> registry https://registry.npm.taobao.org --global</span><br><span class="line">yarn config <span class="built_in">set</span> disturl https://npm.taobao.org/dist --global</span><br></pre></td></tr></table></figure></p><p>这时可能会报错<code>EACCES: permission denied</code>，解决方法是修复/usr/local目录的所有权：</p><blockquote><p>sudo chown -R `whoami`  /usr/local</p></blockquote><p>安装完yarn之后就可以用yarn代替npm了，例如用<code>yarn</code>代替<code>npm install</code>命令，用<code>yarn add 某第三方库名</code>代替<code>npm install --save 某第三方库名</code>。</p><a id="more"></a><h3 id="运行ios项目"><a href="#运行ios项目" class="headerlink" title="运行ios项目"></a>运行ios项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">react-native init MyApp --version 0.44.3</span><br><span class="line"><span class="built_in">cd</span> MyApp</span><br><span class="line">react-native run-ios</span><br></pre></td></tr></table></figure><p>这时你可能会遇到这个报错<code>xcrun: error: unable to find utility &quot;instruments&quot;, not a developer tool or in PATH</code>，<br>解决方法是在终端运行：</p><blockquote><p>sudo xcode-select -s /Applications/Xcode.app/Contents/Developer/</p></blockquote><p>之后还可能iOS运行再次出错<code>No bundle URL present</code>,<br>解决方法是：<strong>关闭vpn！</strong>。</p><p>当 iOS Simulator（ios 模拟器）中显示<code>Welcome to React Native!</code>，恭喜你，历经种种磨难，终于成功启动了项目!</p><h3 id="修改项目"><a href="#修改项目" class="headerlink" title="修改项目"></a>修改项目</h3><ul><li>打开项目根目录下的<code>index.ios.js</code>，然后随便改上几行。</li><li>在iOS Simulator中按下⌘-R，就能看到你的修改！</li><li>在 Simulator 中按下 ⌘+D 可打开开发者菜单。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ReactNative </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现两栏布局</title>
      <link href="/2018/03/15/%E5%AE%9E%E7%8E%B0%E4%B8%A4%E6%A0%8F%E5%B8%83%E5%B1%80/"/>
      <url>/2018/03/15/%E5%AE%9E%E7%8E%B0%E4%B8%A4%E6%A0%8F%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<p>用不同的方法实现左边固定，右边自适应的两栏布局。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="calc-100-140px"><a href="#calc-100-140px" class="headerlink" title="calc(100% - 140px)"></a>calc(100% - 140px)</h3><p>两个<code>inline-block</code>元素并排显示。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  font-size: 0; // 消除空格的影响</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>, <span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  vertical-align: top; // 顶端对齐</span><br><span class="line">  <span class="selector-tag">font-size</span>: 14<span class="selector-tag">px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  width: calc(100% - 140px); // 140px为左侧元素的宽度</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>两个<code>float</code>元素并排显示。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  overflow: auto; // 清除浮动</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>, <span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">140px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="float-position-margin-left"><a href="#float-position-margin-left" class="headerlink" title="float/position + margin-left"></a>float/position + margin-left</h3><p>利用浮动和绝对定位元素脱离文档流的特性。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  overflow: hidden; // 清除浮动</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  float: left; // 也可以是 position: absolute;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">140px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="float-BFC"><a href="#float-BFC" class="headerlink" title="float + BFC"></a>float + BFC</h3><p>右侧盒子通过<code>overflow: auto;</code>形成了BFC，因此右侧盒子不会与左侧浮动的元素重叠。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrapper-float-bfc</span> <span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: auto; </span><br><span class="line">  margin-left: 0; // 用于设置盒子间隔</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><p><code>flex</code>使用简单。需要注意，<code>flex</code>容器的一个默认属性值<code>align-items: stretch;</code>，这个属性导致了列等高的效果。<br>为了让两个盒子高度自动，需要设置<code>align-items: flex-start;</code>。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  flex: 0 0 auto; // 等价于 flex: none; 表示不改变大小</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  flex: 1 1 auto; // 等价于 flex: auto; 表示填充剩余空间</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="gird"><a href="#gird" class="headerlink" title="gird"></a>gird</h3><p>实际生产中不使用，因为兼容性很差。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">140px</span> <span class="number">1</span>fr;</span><br><span class="line">  align-items: start; // 去除默认等高效果</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数柯里化</title>
      <link href="/2018/03/14/%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96/"/>
      <url>/2018/03/14/%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>函数式编程在把函数当作一等公民的同时，就不可避免的会产生“柯里化”这种用法。<br>函数柯里化是逐步传参，逐步缩小函数的适用范围，逐步求解的过程。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通用的柯里化函数, 实现把所有参数传递给 fn</span></span><br><span class="line"><span class="keyword">var</span> currying = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _args = []; <span class="comment">// 用来保存所有的参数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">_fn</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 当没有参数时，传入收集后的参数执行 fn</span></span><br><span class="line">    <span class="keyword">if</span> (args.length === <span class="number">0</span>) <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, _args);</span><br><span class="line">    <span class="comment">// 当有参数时，进行参数的收集，并返回函数自身</span></span><br><span class="line">    _args.push(...args);</span><br><span class="line">    <span class="keyword">return</span> _fn;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="推迟计算"><a href="#推迟计算" class="headerlink" title="推迟计算"></a>推迟计算</h3><p>柯里化可以推迟计算，需要的时候再去求值。比如一家店要计算每月的盈利，首先要记录每天的盈利，这个就可以使用柯里化函数去解决。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> multi = <span class="function">(<span class="params">...args</span>) =&gt;</span> args.reduce(<span class="function">(<span class="params">total, cur</span>) =&gt;</span> total + cur, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">var</span> sum = currying(multi);</span><br><span class="line">sum(<span class="number">100</span>, <span class="number">200</span>)(<span class="number">300</span>);</span><br><span class="line">sum(<span class="number">400</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sum()); <span class="comment">// 1000</span></span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">3</span>)(<span class="number">30</span>)(<span class="number">300</span>)()); <span class="comment">// 1333</span></span><br></pre></td></tr></table></figure><h3 id="复用参数"><a href="#复用参数" class="headerlink" title="复用参数"></a>复用参数</h3><p>柯里化还可以复用参数。比如五千元买入不同的股票，计算三个月后各自的总价值。实现参数复用只需要将  curring 函数修改一行代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> currying2 = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _args = [].slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>); <span class="comment">// 修改了此行</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">0</span>) <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, _args);</span><br><span class="line">    [].push.apply(_args, [].slice.call(<span class="built_in">arguments</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">arguments</span>.callee;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum2 = currying2(multi, <span class="number">5000</span>); <span class="comment">// 复用了初始投资这个参数</span></span><br><span class="line"><span class="built_in">console</span>.log(sum2(<span class="number">45</span>, <span class="number">33</span>, <span class="number">90</span>)()); <span class="comment">// 5168</span></span><br><span class="line"><span class="built_in">console</span>.log(sum2(<span class="number">13</span>, <span class="number">40</span>, <span class="number">120</span>)()); <span class="comment">// 5173</span></span><br></pre></td></tr></table></figure><h3 id="提前返回"><a href="#提前返回" class="headerlink" title="提前返回"></a>提前返回</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addEvent = <span class="function"><span class="keyword">function</span>(<span class="params">el, type, fn, capture</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.addEventListener) &#123;</span><br><span class="line">    el.addEventListener(</span><br><span class="line">      type,</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        fn.call(el, e);</span><br><span class="line">      &#125;,</span><br><span class="line">      capture</span><br><span class="line">    );</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.attachEvent) &#123;</span><br><span class="line">    el.attachEvent(<span class="string">"on"</span> + type, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      fn.call(el, e);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>以上代码，我们每次使用<code>addEvent</code>为元素添加事件的时候，<code>IE6/IE7</code>都会走一遍<code>if...else if...</code>，其实使用柯里化只要一次判定就可以了，如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addEvent = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.addEventListener) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">el, sType, fn, capture</span>) </span>&#123;</span><br><span class="line">      el.addEventListener(</span><br><span class="line">        sType,</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">          fn.call(el, e);</span><br><span class="line">        &#125;,</span><br><span class="line">        capture</span><br><span class="line">      );</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.attachEvent) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">el, sType, fn, capture</span>) </span>&#123;</span><br><span class="line">      el.attachEvent(<span class="string">"on"</span> + sType, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        fn.call(el, e);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="不定参数柯里化"><a href="#不定参数柯里化" class="headerlink" title="不定参数柯里化"></a>不定参数柯里化</h3><p>文章头部的<code>currying</code>函数已经是不定参数的柯里化了，但是最后需要执行<code>()</code>才能结束<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum(<span class="number">100</span>, <span class="number">200</span>)(<span class="number">300</span>)(); <span class="comment">// 600</span></span><br></pre></td></tr></table></figure></p><p>现在希望实现如下效果<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum(<span class="number">100</span>, <span class="number">200</span>)(<span class="number">300</span>); <span class="comment">// 600</span></span><br></pre></td></tr></table></figure></p><p>此时的柯里化函数应该如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 保存预置参数</span></span><br><span class="line">  <span class="keyword">const</span> presetArgs = [].slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</span><br><span class="line">  <span class="comment">// 返回一个新函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">curried</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 新函数调用时会继续传参</span></span><br><span class="line">    <span class="keyword">const</span> restArgs = [].slice.call(<span class="built_in">arguments</span>)</span><br><span class="line">    <span class="keyword">const</span> allArgs = [...presetArgs, ...restArgs]</span><br><span class="line">    <span class="keyword">return</span> curry.call(<span class="literal">null</span>, fn, ...allArgs)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 重写toString</span></span><br><span class="line">  curried.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fn.apply(<span class="literal">null</span>, presetArgs)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> curried;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过改写函数的<code>toString</code>方法，使得结果函数可以被Javascript引擎解析，得到一个预期的值。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Content-Type</title>
      <link href="/2018/03/13/Content-Type/"/>
      <url>/2018/03/13/Content-Type/</url>
      
        <content type="html"><![CDATA[<p>在 Http 协议消息头中，使用 Content-Type 来表示具体请求中的媒体类型信息，有如下取值。</p><blockquote><p>常见的媒体格式类型</p></blockquote><ul><li>text/html ： HTML格式</li><li>text/plain ：纯文本格式      </li><li>text/xml ：  XML格式</li><li>image/gif ：gif图片格式    </li><li>image/jpeg ：jpg图片格式 </li><li>image/png：png图片格式</li><li>multipart/form-data ： 需要在表单中进行文件上传时，就需要使用该格式</li></ul><a id="more"></a><blockquote><p>以application开头的媒体格式类型</p></blockquote><ul><li>application/xhtml+xml ：XHTML格式</li><li>application/xml     ： XML数据格式</li><li>application/atom+xml  ：Atom XML聚合格式    </li><li>application/json    ： JSON数据格式</li><li>application/pdf       ：pdf格式  </li><li>application/msword  ： Word文档格式</li><li>application/octet-stream ： 二进制流数据（如常见的文件下载）</li><li>application/x-www-form-urlencoded ： <code>&lt;form encType=&quot;&quot;&gt;</code>的默认值，form表单数据被编码为key/value格式发送到服务器（表单默认的提交数据格式）</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数式编程</title>
      <link href="/2018/03/13/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
      <url>/2018/03/13/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>“函数式编程”是一种”编程范式”（programming paradigm），也就是如何编写程序的<strong>方法论</strong>。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><h4 id="函数是”第一等公民”"><a href="#函数是”第一等公民”" class="headerlink" title="函数是”第一等公民”"></a>函数是”第一等公民”</h4><p>所谓”第一等公民”（first class），指的是函数可以赋值给其他变量，也可以作为参数，传入另一个函数，或者作为别的函数的返回值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span> <span class="title">add</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">a, b, add</span>) </span>&#123;</span><br><span class="line">  add(a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h4 id="独立与外界"><a href="#独立与外界" class="headerlink" title="独立与外界"></a>独立与外界</h4><p>函数内部逻辑不依赖于外部变量，所有的依赖都通过参数传入（任何时候只要参数相同，函数的返回值总是相同的）。所有功能就是返回一个新的值，没有其他行为，尤其是不得修改外部变量的值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>, b = <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 函数编程</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line">add (a, b)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非函数编程，add2的执行依赖于外部变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line">add2()</span><br></pre></td></tr></table></figure></p><h4 id="只用”表达式”，不用”语句”"><a href="#只用”表达式”，不用”语句”" class="headerlink" title="只用”表达式”，不用”语句”"></a>只用”表达式”，不用”语句”</h4><ul><li>“表达式”（expression）是一个单纯的运算过程，总是有返回值；</li><li>“语句”（statement）是执行某种操作，没有返回值。</li></ul><p>函数式编程要求，只使用表达式，不使用语句。也就是说，每一步都是单纯的运算，而且都有返回值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语句</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> b = a * <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> c = b - <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表达式</span></span><br><span class="line"><span class="keyword">var</span> result = subtract(multiply(add(<span class="number">1</span>,<span class="number">2</span>), <span class="number">3</span>), <span class="number">4</span>);</span><br></pre></td></tr></table></figure></p><h3 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h3><h4 id="便于重用"><a href="#便于重用" class="headerlink" title="便于重用"></a>便于重用</h4><p>由于对每一步运算都进行了封装，而且函数不依赖于外界，所以有很好的复用性。并且，每一个函数都可以被看做独立单元，很有利于进行单元测试（unit testing）和除错（debugging），以及模块化组合。</p><h4 id="易于理解"><a href="#易于理解" class="headerlink" title="易于理解"></a>易于理解</h4><p>函数式编程的自由度很高，可以写出很接近自然语言的代码。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span> + <span class="number">2</span>) * <span class="number">3</span> - <span class="number">4</span></span><br><span class="line">subtract(multiply(add(<span class="number">1</span>,<span class="number">2</span>), <span class="number">3</span>), <span class="number">4</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>).multiply(<span class="number">3</span>).subtract(<span class="number">4</span>)</span><br></pre></td></tr></table></figure></p><h3 id="表现形式"><a href="#表现形式" class="headerlink" title="表现形式"></a>表现形式</h3><h4 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通用的柯里化函数, 实现把所有参数传递给 fn</span></span><br><span class="line"><span class="keyword">var</span> currying = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _args = []; <span class="comment">// 用来保存所有的参数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">_fn</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (args.length === <span class="number">0</span>) <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, _args);</span><br><span class="line">    _args.push(...args);</span><br><span class="line">    <span class="keyword">return</span> _fn;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> multi = <span class="function">(<span class="params">...args</span>) =&gt;</span> args.reduce(<span class="function">(<span class="params">total, cur</span>) =&gt;</span> total + cur, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">var</span> sum = currying(multi);</span><br><span class="line">sum(<span class="number">100</span>, <span class="number">200</span>)(<span class="number">300</span>);</span><br><span class="line">sum(<span class="number">400</span>);</span><br><span class="line">sum(<span class="number">3</span>)(<span class="number">30</span>)(<span class="number">300</span>)(); <span class="comment">// 1333</span></span><br></pre></td></tr></table></figure><h4 id="函数的组合"><a href="#函数的组合" class="headerlink" title="函数的组合"></a>函数的组合</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现把多个函数合成为一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">...funcs</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (funcs.length === <span class="number">0</span>) <span class="keyword">return</span> <span class="function"><span class="params">a</span> =&gt;</span> a</span><br><span class="line">    <span class="keyword">if</span> (funcs.length === <span class="number">1</span>) <span class="keyword">return</span> funcs[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> funcs.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> a(b(...args)), a =&gt; a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fn1 = <span class="function">(<span class="params">i</span>) =&gt;</span> i * <span class="number">2</span></span><br><span class="line"><span class="keyword">var</span> fn2 = <span class="function">(<span class="params">i</span>) =&gt;</span> i + <span class="number">2</span></span><br><span class="line"><span class="keyword">var</span> fn3 = <span class="function">(<span class="params">i</span>) =&gt;</span> i % <span class="number">2</span></span><br><span class="line"><span class="keyword">const</span> func = compose(fn1,fn2,fn3) <span class="comment">// (i) =&gt; fn1(fn2(fn3(i)))</span></span><br><span class="line">func(<span class="number">5</span>) <span class="comment">// ((5 % 2) + 2) * 2 = 6</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读《黑客与画家》小记</title>
      <link href="/2018/03/11/%E8%AF%BB%E3%80%8A%E9%BB%91%E5%AE%A2%E4%B8%8E%E7%94%BB%E5%AE%B6%E3%80%8B%E5%B0%8F%E8%AE%B0/"/>
      <url>/2018/03/11/%E8%AF%BB%E3%80%8A%E9%BB%91%E5%AE%A2%E4%B8%8E%E7%94%BB%E5%AE%B6%E3%80%8B%E5%B0%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>《黑客与画家》是硅谷创业之父 Paul Graham 的文集，其中有一些有趣的思考，值得记录一下。</p><ul><li>训练自己去想那些不能想的事情，你获得的好处会超过所得到的想法本身。</li><li>能够一起谈论“异端邪说”，并且不会因此气急败坏的人，就是你最应该认识的朋友。</li><li>判断一个人是否具备“换位思考”的能力有一个好方法，那就是看他怎样向没有技术背景的人解释技术问题。</li><li>真正重要的是做出人们重要的东西，而不是加入某个公司。</li><li>如果一家公司能做到按贡献付薪，它将取得巨大成功。许多雇员会更努力的工作，并且会吸引特别努力的人。</li><li>要致富，你需要两样东西：可测量性和可放大性。你的职位产生的业绩，应该是可以被测量到的，否则你做的再多，也不会有更高的薪水。另外，你所作出的决策能够产生巨大的效益。</li><li>大多数情况下测量每个员工的贡献是困难的，但是可以通过测量小团队来得到近似值。</li><li>高技术含量具有可放大性，一份早餐只能服务一个人，但是一个软件可以服务很多人。</li><li>如果你有两个选择，就选较难的那个。因为大多数人出于懒惰的缘故，都会选择容易的那个，比如看电视和跑步。</li><li>当讨论收入分配不公平时，还应该考虑收入从何而来，财富是谁生产出来的。</li><li>贫富差距大的言论，都是从金钱数量的角度出发的，但金钱不等于财富，事实上现今穷人和富人的生活差距已经很小了。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript学习</title>
      <link href="/2018/03/10/TypeScript%E5%AD%A6%E4%B9%A0/"/>
      <url>/2018/03/10/TypeScript%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>TypeScript 是 JavaScript 的超集。<br>TypeScript 最大的特点就是类型检查，这和<a href="https://flow.org/en/" target="_blank" rel="noopener">flow</a>很相似，Vue 源码使用 flow 作为类型检查 ，但 React 使用的是 TypeScitpt。<br>TypeScript 和 ES6 有一些相同的地方，这里不再赘述。</p><h3 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h3><h4 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isDone: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> age: <span class="built_in">number</span> = <span class="number">37</span>;</span><br><span class="line"><span class="keyword">let</span> sentence: <span class="built_in">string</span> = <span class="string">`Hello, my name is Hank.`</span></span><br><span class="line"><span class="keyword">let</span> list: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> list: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> n: <span class="literal">null</span> = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>注意，<strong>基本类型</strong>首字母都是小写的。<br>默认情况下<code>null</code>和<code>undefined</code>是所有类型的子类型。就是说你可以把 <code>null</code>和<code>undefined</code>赋值给number类型的变量。</p><h4 id="元祖Tuple"><a href="#元祖Tuple" class="headerlink" title="元祖Tuple"></a>元祖Tuple</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x: [<span class="built_in">string</span>, <span class="built_in">number</span>]; <span class="comment">// 定义一个元祖类型</span></span><br><span class="line">x = [<span class="string">'hello'</span>, <span class="number">10</span>]; <span class="comment">// OK</span></span><br><span class="line">x = [<span class="number">10</span>, <span class="string">'hello'</span>]; <span class="comment">// Error</span></span><br><span class="line">x[<span class="number">2</span>] = <span class="string">'world'</span>; <span class="comment">// OK, 该值属于(string | number)类型</span></span><br><span class="line">x[<span class="number">3</span>] = <span class="literal">true</span>; <span class="comment">// Error, 该值不属于(string | number)类型</span></span><br></pre></td></tr></table></figure><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><p>enum 类型是对JavaScript标准数据类型的一个补充，使用枚举类型可以为一组数值赋予友好的名字。<br>默认从0开始为元素编号，也可以手动的指定成员的数值。<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Color &#123;Red = <span class="number">1</span>, Green, Blue&#125;</span><br><span class="line"><span class="keyword">let</span> colorName: <span class="built_in">string</span> = Color[<span class="number">2</span>];</span><br><span class="line">alert(colorName);  <span class="comment">// 'Green'</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><h4 id="Any"><a href="#Any" class="headerlink" title="Any"></a>Any</h4><p>any类型包括任意类型。<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> notSure: <span class="built_in">any</span> = <span class="number">4</span>;</span><br><span class="line">notSure = <span class="string">"maybe a string instead"</span>;</span><br><span class="line">notSure = <span class="literal">false</span>; <span class="comment">// OK</span></span><br></pre></td></tr></table></figure></p><h4 id="Void"><a href="#Void" class="headerlink" title="Void"></a>Void</h4><p>void类型表示没有任何类型。<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">warnUser</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  alert(<span class="string">"This is my warning message"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>声明一个void类型的变量作用不大，因为你只能为它赋予<code>undefined</code>和<code>null</code>：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> unusable: <span class="built_in">void</span> = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure></p><h4 id="Never"><a href="#Never" class="headerlink" title="Never"></a>Never</h4><p>never类型表示的是那些永不存在的值的类型。never类型是任何类型的子类型，且没有类型是never的子类型。<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">infiniteLoop</span>(<span class="params"></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h4><p>类型断言好比其它语言里的类型转换，但不进行特殊的数据检查和解构。<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> someValue: <span class="built_in">any</span> = <span class="string">"this is a string"</span>;</span><br><span class="line"><span class="keyword">let</span> strLength: <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;someValue).length; <span class="comment">// 形式一：尖括号</span></span><br><span class="line"><span class="keyword">let</span> strLength: <span class="built_in">number</span> = (someValue <span class="keyword">as</span> <span class="built_in">string</span>).length; <span class="comment">// 形式二：as 语法</span></span><br></pre></td></tr></table></figure></p><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p>下面的 identity 函数就是一个泛型。<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>给<code>identity</code>添加了类型变量<code>T</code>。 <code>T</code>帮助捕获用户传入的类型，同时也会当做返回值类型。保证参数类型与返回值类型是相同的。 这允许我们跟踪函数里使用的类型的信息。<br>泛型函数可以有两种使用方法<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> output = identity&lt;<span class="built_in">string</span>&gt;(<span class="string">"myString"</span>);</span><br><span class="line"><span class="keyword">let</span> output = identity(<span class="string">"myString"</span>); <span class="comment">// 利用了TypeScript里的类型推论</span></span><br></pre></td></tr></table></figure></p><h3 id="高级类型"><a href="#高级类型" class="headerlink" title="高级类型"></a>高级类型</h3><h4 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h4><p>交叉类型是多个类型的交集。<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person &amp; Serializable &amp; Loggable</span><br></pre></td></tr></table></figure></p><h4 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h4><p>联合类型是多个类型的并集。<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">number</span> | <span class="built_in">string</span> | <span class="built_in">boolean</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React基础2</title>
      <link href="/2018/03/09/React%E5%9F%BA%E7%A1%802/"/>
      <url>/2018/03/09/React%E5%9F%BA%E7%A1%802/</url>
      
        <content type="html"><![CDATA[<h3 id="React-组件-API"><a href="#React-组件-API" class="headerlink" title="React 组件 API"></a>React 组件 API</h3><p>React 组件 API 中有以下7个常用方法:</p><ul><li>设置状态：setState</li><li>替换状态：replaceState</li><li>设置属性：setProps</li><li>替换属性：replaceProps</li><li>强制更新：forceUpdate</li><li>获取DOM节点：findDOMNode</li><li>判断组件挂载状态：isMounted</li></ul><h4 id="setState"><a href="#setState" class="headerlink" title="setState"></a>setState</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setState(nextState[, callback])</span><br></pre></td></tr></table></figure><ul><li>nextState：一个对象。将要设置的新状态，该状态会和当前的state合并</li><li>callback：回调函数。该函数会在setState设置成功，且组件重新渲染后调用</li></ul><h4 id="replaceState"><a href="#replaceState" class="headerlink" title="replaceState"></a>replaceState</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">replaceState(nextState[, callback])</span><br></pre></td></tr></table></figure><ul><li>nextState：一个对象。将要设置的新状态，该状态会替换当前的state。</li><li>callback：回调函数。该函数会在replaceState设置成功，且组件重新渲染后调用。</li></ul><h4 id="setProps"><a href="#setProps" class="headerlink" title="setProps"></a>setProps</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setProps(nextProps[, callback])</span><br></pre></td></tr></table></figure><ul><li>nextProps：一个对象。将要设置的新属性，该状态会和当前的props合并</li><li>callback：回调函数。该函数会在setProps设置成功，且组件重新渲染后调用</li></ul><h4 id="replaceProps"><a href="#replaceProps" class="headerlink" title="replaceProps"></a>replaceProps</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">replaceProps(nextProps[, callback])</span><br></pre></td></tr></table></figure><ul><li>nextProps：一个对象。将要设置的新属性，该属性会替换当前的props。</li><li>callback：回调函数。该函数会在replaceProps设置成功，且组件重新渲染后调用。</li></ul><h4 id="forceUpdate"><a href="#forceUpdate" class="headerlink" title="forceUpdate"></a>forceUpdate</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">forceUpdate([callback])</span><br></pre></td></tr></table></figure><ul><li>callback：回调函数。该函数会在组件render()方法调用后调用。</li></ul><p>forceUpdate()方法会使组件和子组件调用自身的render()方法重新渲染组件。但是，组件重新渲染时，依然会读取this.props和this.state，如果状态没有改变，那么React只会更新DOM。</p><p>一般来说，应该尽量避免使用forceUpdate()，而仅从this.props和this.state中读取状态并由React触发render()调用。</p><h4 id="findDOMNode"><a href="#findDOMNode" class="headerlink" title="findDOMNode"></a>findDOMNode</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DOMElement findDOMNode()</span><br></pre></td></tr></table></figure><p>如果组件已经挂载到DOM中，该方法返回对应的本地浏览器 DOM 元素。当render返回null 或 false时，this.findDOMNode()也会返回null。</p><h4 id="isMounted"><a href="#isMounted" class="headerlink" title="isMounted"></a>isMounted</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bool isMounted()</span><br></pre></td></tr></table></figure><p>返回值：true或false，表示组件是否已挂载到DOM中。可以使用该方法保证了setState()和forceUpdate()在异步场景下的调用不会出错。</p><a id="more"></a><h3 id="组价生命周期"><a href="#组价生命周期" class="headerlink" title="组价生命周期"></a>组价生命周期</h3><p>组件的生命周期可分成三个状态：</p><ul><li>Mounting：已插入真实 DOM</li><li>Updating：正在被重新渲染</li><li>Unmounting：已移出真实 DOM</li></ul><h4 id="生命周期的方法"><a href="#生命周期的方法" class="headerlink" title="生命周期的方法"></a>生命周期的方法</h4><ul><li>componentWillMount： 在渲染前调用, 在客户端也在服务端。</li><li>componentDidMount：在第一次渲染后调用，只在客户端。之后组件已经生成了对应的DOM结构，可以通过this.getDOMNode()来进行访问。</li><li>componentWillReceiveProps：在组件接收到一个新的 prop 时被调用。这个方法在初始化render时不会被调用。</li><li>shouldComponentUpdate：返回一个布尔值。在组件接收到新的props或者state时被调用。在初始化时或者使用forceUpdate时不被调用。 </li><li>componentWillUpdate：在组件接收到新的props或者state但还没有render时被调用。在初始化时不会被调用。</li><li>componentDidUpdate：在组件完成更新后立即调用。在初始化时不会被调用。</li><li>componentWillUnmount：在组件从 DOM 中移除的时候立刻被调用。</li></ul><p>具体见<a href="https://doc.react-china.org/" target="_blank" rel="noopener">官方文档(中文)</a></p><h4 id="生命周期的实例"><a href="#生命周期的实例" class="headerlink" title="生命周期的实例"></a>生命周期的实例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Button = React.createClass(&#123;</span><br><span class="line">  getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      data:<span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  setNewNumber: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">data</span>: <span class="keyword">this</span>.state.data + <span class="number">1</span>&#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button onClick = &#123;<span class="keyword">this</span>.setNewNumber&#125;&gt;INCREMENT&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Content myNumber = &#123;this.state.data&#125;&gt;&lt;/</span>Content&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br><span class="line"><span class="regexp">var Content = React.createClass(&#123;</span></span><br><span class="line"><span class="regexp">  componentWillMount:function() &#123;</span></span><br><span class="line"><span class="regexp">    console.log('Component WILL MOUNT!')</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  componentDidMount:function() &#123;</span></span><br><span class="line"><span class="regexp">    console.log('Component DID MOUNT!')</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  componentWillReceiveProps:function(newProps) &#123;</span></span><br><span class="line"><span class="regexp">    console.log('Component WILL RECEIVE PROPS!')</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  shouldComponentUpdate:function(newProps, newState) &#123;</span></span><br><span class="line"><span class="regexp">    return true;</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  componentWillUpdate:function(nextProps, nextState) &#123;</span></span><br><span class="line"><span class="regexp">    console.log('Component WILL UPDATE!');</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  componentDidUpdate:function(prevProps, prevState) &#123;</span></span><br><span class="line"><span class="regexp">    console.log('Component DID UPDATE!')</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  componentWillUnmount:function() &#123;</span></span><br><span class="line"><span class="regexp">    console.log('Component WILL UNMOUNT!')</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  render: function () &#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;h3&gt;&#123;this.props.myNumber&#125;&lt;/</span>h3&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;Button /</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById('example')</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React基础</title>
      <link href="/2018/03/09/React%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/03/09/React%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/react/15.4.2/react.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/react/15.4.2/react-dom.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/babel-standalone/6.22.1/babel.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">ReactDOM.render(</span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</span></span><br><span class="line">);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h3><p>React 使用 JSX 来替代常规的 JavaScript。JSX中有如下注意点：</p><ul><li>变量需要包含在<code>{}</code>中</li><li>不能使用<code>if else</code>，可以使用三元表达式来替代</li><li>注释需要写在花括号中</li><li>JSX 允许在模板中插入数组，数组会自动展开所有成员</li><li>在添加属性时， class 属性需要写成 className ，for 属性需要写成 htmlFor ，因为 class 和 for 是 JavaScript 的保留字</li><li>组件类只能包含一个顶层标签<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myStyle = &#123;</span><br><span class="line">  fontSize: <span class="number">100</span>,</span><br><span class="line">  color: <span class="string">'#FF0000'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> arr = [</span><br><span class="line">  &lt;h1&gt;菜鸟教程&lt;<span class="regexp">/h1&gt;,</span></span><br><span class="line"><span class="regexp">  &lt;h2&gt;学的不仅是技术，更是梦想！&lt;/</span>h2&gt;,</span><br><span class="line">];</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">  &lt;h1&gt;&#123;<span class="number">1</span> + <span class="number">2</span>&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">  &lt;h2&gt;&#123;i == 1 ? 'True!' : 'False'&#125;&lt;/</span>h2&gt;</span><br><span class="line">  &lt;p style = &#123;myStyle&#125;&gt;react is cool!&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;p&gt;&#123;arr&#125;&lt;/</span>p&gt;</span><br><span class="line">  &#123;<span class="comment">/*注释...*/</span>&#125;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  ,</span></span><br><span class="line"><span class="regexp">  document.getElementById('example')</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure></li></ul><p>React 可以渲染 HTML 标签 (strings) 或 React 组件 (classes)。React 的 JSX 使用大、小写的约定来区分本地组件的类和 HTML 标签。<br>要渲染 HTML 标签，只需在 JSX 里使用<strong>小写字母</strong>的标签名。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myDivElement = <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"foo"</span> /&gt;</span></span>;</span><br><span class="line">ReactDOM.render(myDivElement, <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>));</span><br></pre></td></tr></table></figure></p><p>要渲染 React 组件，只需创建一个<strong>大写字母开头</strong>的本地变量。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyComponent = React.createClass(&#123;<span class="comment">/*...*/</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> myElement = <span class="xml"><span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">someProperty</span>=<span class="string">&#123;true&#125;</span> /&gt;</span></span>;</span><br><span class="line">ReactDOM.render(myElement, <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>));</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="组价"><a href="#组价" class="headerlink" title="组价"></a>组价</h3><p>React.createClass 方法用于生成一个组件类。如果我们需要向组件传递参数，可以使用 this.props 对象。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> WebSite = React.createClass(&#123;</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Name name=&#123;<span class="keyword">this</span>.props.name&#125; /&gt;</span><br><span class="line">        &lt;Link site=&#123;<span class="keyword">this</span>.props.site&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">var Name = React.createClass(&#123;</span></span><br><span class="line"><span class="regexp">  render: function() &#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;h1&gt;&#123;this.props.name&#125;&lt;/</span>h1&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> Link = React.createClass(&#123;</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;a href=&#123;<span class="keyword">this</span>.props.site&#125;&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.props.site&#125;</span><br><span class="line">      &lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;WebSite name="菜鸟教程" site=" http:/</span><span class="regexp">/www.runoob.com" /</span>&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h3 id="State"><a href="#State" class="headerlink" title="State"></a>State</h3><p>React 把组件看成是一个状态机（State Machines）。通过与用户的交互，实现不同状态，然后渲染 UI，让用户界面和数据保持一致。<br>以下实例中创建了 LikeButton 组件，getInitialState 方法用于定义初始状态，也就是一个对象，这个对象可以通过 this.state 属性读取。当用户点击组件，导致状态变化，this.setState 方法就修改状态值，每次修改以后，自动调用 this.render 方法，再次渲染组件。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> LikeButton = React.createClass(&#123;</span><br><span class="line">  getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">liked</span>: <span class="literal">false</span>&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  handleClick: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">liked</span>: !<span class="keyword">this</span>.state.liked&#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> text = <span class="keyword">this</span>.state.liked ? <span class="string">'喜欢'</span> : <span class="string">'不喜欢'</span>;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;p onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;</span><br><span class="line">        你&lt;b&gt;&#123;text&#125;&lt;<span class="regexp">/b&gt;我。点我切换状态。</span></span><br><span class="line"><span class="regexp">      &lt;/</span>p&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;LikeButton /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h3 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h3><p>state 和 props 主要的区别在于 props 是不可变的，而 state 可以根据与用户交互来改变。<br>你可以通过 getDefaultProps() 方法为 props 设置默认值，<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> HelloMessage = React.createClass(&#123;</span><br><span class="line">  getDefaultProps: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      name: <span class="string">'Runoob'</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;HelloMessage /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串的拓展</title>
      <link href="/2018/03/08/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8B%93%E5%B1%95/"/>
      <url>/2018/03/08/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8B%93%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<p>ES6 加强了对 Unicode 的支持，并且扩展了字符串对象。<br>ES6 为字符串添加了遍历器接口，使得字符串可以被<code>for...of</code>循环遍历。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> codePoint <span class="keyword">of</span> <span class="string">'foo'</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(codePoint)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// "f"</span></span><br><span class="line"><span class="comment">// "o"</span></span><br><span class="line"><span class="comment">// "o"</span></span><br></pre></td></tr></table></figure></p><h3 id="charAt"><a href="#charAt" class="headerlink" title="charAt()"></a>charAt()</h3><p>ES5 对字符串对象提供<code>arAt</code>方法，返回字符串给定位置的字符。该方法不能识别码点大于<code>0xFFFF</code>的字符。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'abc'</span>.charAt(<span class="number">0</span>) <span class="comment">// "a"</span></span><br><span class="line"><span class="string">'𠮷'</span>.charAt(<span class="number">0</span>) <span class="comment">// "\uD842"</span></span><br></pre></td></tr></table></figure></p><h3 id="repeat"><a href="#repeat" class="headerlink" title="repeat()"></a>repeat()</h3><p>repeat方法返回一个新字符串，表示将原字符串重复n次。参数如果是小数，会被取整。参数不能是小于等于<code>-1</code>的负数或<code>Infinity</code>。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'x'</span>.repeat(<span class="number">3</span>) <span class="comment">// "xxx"</span></span><br><span class="line"><span class="string">'hello'</span>.repeat(<span class="number">2</span>) <span class="comment">// "hellohello"</span></span><br><span class="line"><span class="string">'na'</span>.repeat(<span class="number">-0.9</span>) <span class="comment">// ""</span></span><br><span class="line"><span class="string">'na'</span>.repeat(<span class="number">2.9</span>) <span class="comment">// "nana"</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="padStart-padEnd"><a href="#padStart-padEnd" class="headerlink" title="padStart(), padEnd()"></a>padStart(), padEnd()</h3><p>ES2017 引入了字符串补全长度的功能。如果某个字符串不够指定长度，会在头部或尾部补全。<code>padStart()</code>用于头部补全，<code>padEnd()</code>用于尾部补全。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'x'</span>.padStart(<span class="number">5</span>, <span class="string">'ab'</span>) <span class="comment">// 'ababx'</span></span><br><span class="line"><span class="string">'xxx'</span>.padStart(<span class="number">2</span>, <span class="string">'ab'</span>) <span class="comment">// 'xxx'</span></span><br><span class="line"><span class="string">'x'</span>.padEnd(<span class="number">4</span>, <span class="string">'ab'</span>) <span class="comment">// 'xaba'</span></span><br><span class="line"><span class="string">'x'</span>.padEnd(<span class="number">4</span>) <span class="comment">// 'x   '  省略第二个参数，会用空格补全</span></span><br></pre></td></tr></table></figure></p><h3 id="includes-startsWith-endsWith"><a href="#includes-startsWith-endsWith" class="headerlink" title="includes(), startsWith(), endsWith()"></a>includes(), startsWith(), endsWith()</h3><p>传统上，JavaScript 只有indexOf方法，可以用来确定一个字符串是否包含在另一个字符串中。ES6 又提供了三种新方法。</p><ul><li>includes()：返回布尔值，表示是否找到了参数字符串。</li><li>startsWith()：返回布尔值，表示参数字符串是否在原字符串的头部。</li><li>endsWith()：返回布尔值，表示参数字符串是否在原字符串的尾部。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">'Hello world!'</span>;</span><br><span class="line">s.startsWith(<span class="string">'Hello'</span>) <span class="comment">// true</span></span><br><span class="line">s.endsWith(<span class="string">'!'</span>) <span class="comment">// true</span></span><br><span class="line">s.includes(<span class="string">'o'</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变量的析构赋值</title>
      <link href="/2018/03/08/%E5%8F%98%E9%87%8F%E7%9A%84%E6%9E%90%E6%9E%84%E8%B5%8B%E5%80%BC/"/>
      <url>/2018/03/08/%E5%8F%98%E9%87%8F%E7%9A%84%E6%9E%90%E6%9E%84%E8%B5%8B%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<p>ES6 允许按照<strong>一定模式</strong>，从<strong>数组</strong>和<strong>对象</strong>中提取值，对变量进行赋值，这被称为解构（Destructuring）。</p><h3 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [foo, [[bar], baz]] = [<span class="number">1</span>, [[<span class="number">2</span>], <span class="number">3</span>]];</span><br><span class="line">foo <span class="comment">// 1</span></span><br><span class="line">bar <span class="comment">// 2</span></span><br><span class="line">baz <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [ , , third] = [<span class="string">"foo"</span>, <span class="string">"bar"</span>, <span class="string">"baz"</span>];</span><br><span class="line">third <span class="comment">// "baz"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [head, ...tail] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">head <span class="comment">// 1</span></span><br><span class="line">tail <span class="comment">// [2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, y, ...z] = [<span class="string">'a'</span>];</span><br><span class="line">x <span class="comment">// "a"</span></span><br><span class="line">y <span class="comment">// undefined</span></span><br><span class="line">z <span class="comment">// []</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, y, z] = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]);</span><br><span class="line">x <span class="comment">// "a"</span></span><br></pre></td></tr></table></figure><p>如果解构不成功，变量的值就等于undefined。解构赋值允许指定默认值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [x, y = <span class="string">'b'</span>] = [<span class="string">'a'</span>]; <span class="comment">// x='a', y='b'</span></span><br><span class="line"><span class="keyword">let</span> [x = <span class="number">1</span>] = [<span class="literal">undefined</span>]; <span class="comment">// x = 1</span></span><br><span class="line"><span class="keyword">let</span> [x = <span class="number">1</span>] = [<span class="literal">null</span>]; <span class="comment">// x = null</span></span><br></pre></td></tr></table></figure></p><p>上面代码中，如果一个数组成员是<code>null</code>，默认值就不会生效，因为<code>null</code>不严格等于<code>undefined</code>。</p><a id="more"></a><h3 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h3><p>对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; bar, foo &#125; = &#123; <span class="attr">foo</span>: <span class="string">"aaa"</span>, <span class="attr">bar</span>: <span class="string">"bbb"</span> &#125;;</span><br><span class="line">foo <span class="comment">// "aaa"</span></span><br><span class="line">bar <span class="comment">// "bbb"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; baz &#125; = &#123; <span class="attr">foo</span>: <span class="string">"aaa"</span>, <span class="attr">bar</span>: <span class="string">"bbb"</span> &#125;;</span><br><span class="line">baz <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></p><p>下面代码中，<code>foo</code>是匹配的模式，<code>baz</code>才是变量。真正被赋值的是变量<code>baz</code>，而不是模式<code>foo</code>。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; <span class="attr">foo</span>: baz &#125; = &#123; <span class="attr">foo</span>: <span class="string">'aaa'</span>, <span class="attr">bar</span>: <span class="string">'bbb'</span> &#125;;</span><br><span class="line">baz <span class="comment">// "aaa"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">first</span>: <span class="string">'hello'</span>, <span class="attr">last</span>: <span class="string">'world'</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">first</span>: f, <span class="attr">last</span>: l &#125; = obj;</span><br><span class="line">f <span class="comment">// 'hello'</span></span><br><span class="line">l <span class="comment">// 'world'</span></span><br></pre></td></tr></table></figure></p><p>与数组一样，解构也可以用于嵌套结构的对象。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  p: [</span><br><span class="line">    <span class="string">'Hello'</span>,</span><br><span class="line">    &#123; <span class="attr">y</span>: <span class="string">'World'</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">p</span>: [x, &#123; y &#125;] &#125; = obj;</span><br><span class="line">x <span class="comment">// "Hello"</span></span><br><span class="line">y <span class="comment">// "World"</span></span><br></pre></td></tr></table></figure></p><p>注意，这时<code>p</code>是模式，不是变量，因此不会被赋值。要<code>p</code>作为变量赋值，可以写成下面这样。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; p, <span class="attr">p</span>: [x, &#123; y &#125;] &#125; = obj;</span><br><span class="line">x <span class="comment">// "Hello"</span></span><br><span class="line">y <span class="comment">// "World"</span></span><br><span class="line">p <span class="comment">// ["Hello", &#123;y: "World"&#125;]</span></span><br></pre></td></tr></table></figure></p><p>下面是嵌套赋值的例子。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"></span><br><span class="line">(&#123; <span class="attr">foo</span>: obj.prop, <span class="attr">bar</span>: arr[<span class="number">0</span>] &#125; = &#123; <span class="attr">foo</span>: <span class="number">123</span>, <span class="attr">bar</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line">obj <span class="comment">// &#123;prop:123&#125;</span></span><br><span class="line">arr <span class="comment">// [true]</span></span><br></pre></td></tr></table></figure></p><p>对象的解构也可以指定默认值。默认值生效的条件是，对象的属性值严格等于<code>undefined</code>。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> &#123;x, y = <span class="number">5</span>&#125; = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;;</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123;x = <span class="number">3</span>&#125; = &#123;<span class="attr">x</span>: <span class="literal">null</span>&#125;;</span><br><span class="line">x <span class="comment">// null</span></span><br></pre></td></tr></table></figure></p><p>如果要将一个已经声明的变量用于解构赋值，必须非常小心。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误的写法, JavaScript 引擎会将&#123;x&#125;理解成一个代码块</span></span><br><span class="line"><span class="keyword">let</span> x;</span><br><span class="line">&#123;x&#125; = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确的写法</span></span><br><span class="line"><span class="keyword">let</span> x;</span><br><span class="line">(&#123;x&#125; = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;);</span><br></pre></td></tr></table></figure></p><p>对象的解构赋值，可以很方便地将现有对象的方法，赋值到某个变量。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; log, sin, cos &#125; = <span class="built_in">Math</span>;</span><br></pre></td></tr></table></figure></p><h3 id="字符串的解构赋值"><a href="#字符串的解构赋值" class="headerlink" title="字符串的解构赋值"></a>字符串的解构赋值</h3><p>字符串也可以解构赋值。此时，字符串被转换成了一个类似数组的对象。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b, c, d, e] = <span class="string">'hello'</span>;</span><br><span class="line">a <span class="comment">// 'h'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">length</span> : len&#125; = <span class="string">'hello'</span>; <span class="comment">// 类似数组的对象都有一个length属性</span></span><br><span class="line">len <span class="comment">// 5</span></span><br></pre></td></tr></table></figure></p><h3 id="函数参数的解构赋值"><a href="#函数参数的解构赋值" class="headerlink" title="函数参数的解构赋值"></a>函数参数的解构赋值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">&#123;x = <span class="number">0</span>, y = <span class="number">0</span>&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [x, y];</span><br><span class="line">&#125;</span><br><span class="line">move(&#123;<span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">8</span>&#125;); <span class="comment">// [3, 8]</span></span><br><span class="line">move(&#123;<span class="attr">x</span>: <span class="number">3</span>&#125;); <span class="comment">// [3, 0]</span></span><br><span class="line">move(&#123;&#125;); <span class="comment">// [0, 0]</span></span><br><span class="line">move(); <span class="comment">// [0, 0]</span></span><br></pre></td></tr></table></figure><p>换一种指定默认值的方法会有不同的结果<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">&#123;x, y&#125; = &#123; x: <span class="number">0</span>, y: <span class="number">0</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [x, y];</span><br><span class="line">&#125;</span><br><span class="line">move(&#123;<span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">8</span>&#125;); <span class="comment">// [3, 8]</span></span><br><span class="line">move(&#123;<span class="attr">x</span>: <span class="number">3</span>&#125;); <span class="comment">// [3, undefined]</span></span><br><span class="line">move(&#123;&#125;); <span class="comment">// [undefined, undefined]</span></span><br><span class="line">move(); <span class="comment">// [0, 0]</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS继承方式</title>
      <link href="/2018/03/06/JS%E7%BB%A7%E6%89%BF%E6%96%B9%E5%BC%8F/"/>
      <url>/2018/03/06/JS%E7%BB%A7%E6%89%BF%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>要实现继承先定义一个父类<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name || <span class="string">'Animal'</span>;</span><br><span class="line">  <span class="keyword">this</span>.sleep = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'正在睡觉！'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Animal.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params">food</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'正在吃：'</span> + food);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h3><p>核心： 将父类的实例作为子类的原型。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Cat.prototype = <span class="keyword">new</span> Animal(<span class="string">'cat'</span>);</span><br></pre></td></tr></table></figure></p><h3 id="构造继承"><a href="#构造继承" class="headerlink" title="构造继承"></a>构造继承</h3><p>核心：使用父类的构造函数来增强子类实例，等于是复制父类的实例属性给子类。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  Animal.call(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.name = name || <span class="string">'Tom'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="实例继承"><a href="#实例继承" class="headerlink" title="实例继承"></a>实例继承</h3><p>核心：为父类实例添加新特性，作为子类实例返回。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> instance = <span class="keyword">new</span> Animal();</span><br><span class="line">  instance.name = name || <span class="string">'Tom'</span>;</span><br><span class="line">  <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="拷贝继承"><a href="#拷贝继承" class="headerlink" title="拷贝继承"></a>拷贝继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> animal = <span class="keyword">new</span> Animal();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> p <span class="keyword">in</span> animal)&#123;</span><br><span class="line">    Cat.prototype[p] = animal[p];</span><br><span class="line">  &#125;</span><br><span class="line">  Cat.prototype.name = name || <span class="string">'Tom'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><p>核心：构造继承 + 原型链继承，会调用了两次父类构造函数，生成了两份实例。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  Animal.call(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.name = name || <span class="string">'Tom'</span>;</span><br><span class="line">&#125;</span><br><span class="line">Cat.prototype = <span class="keyword">new</span> Animal();</span><br></pre></td></tr></table></figure></p><h3 id="寄生组合继承"><a href="#寄生组合继承" class="headerlink" title="寄生组合继承"></a>寄生组合继承</h3><p>核心：通过寄生方式，砍掉父类的实例属性，这样，在调用两次父类的构造的时候，就不会初始化两次实例方法/属性，避免的组合继承的缺点。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例属性</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  Animal.call(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.name = name || <span class="string">'Tom'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 公有属性</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> Super = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">  Super.prototype = Animal.prototype;</span><br><span class="line">  Cat.prototype = <span class="keyword">new</span> Super();</span><br><span class="line">  Cat.prototype.constructor = Cat;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><p>其实上述共有属性的继承方式也就是模仿Object.create()的原理，所以也可以写成：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat.prototype = <span class="built_in">Object</span>.create(Animal.prototype, &#123;<span class="attr">constructor</span>:&#123; <span class="attr">value</span>: Cat &#125;&#125;)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue添加类名</title>
      <link href="/2018/03/01/Vue%E6%B7%BB%E5%8A%A0%E7%B1%BB%E5%90%8D/"/>
      <url>/2018/03/01/Vue%E6%B7%BB%E5%8A%A0%E7%B1%BB%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<p>在vue中给元素添加类名非常灵活，主要分为三种形式。</p><h3 id="对象的形式"><a href="#对象的形式" class="headerlink" title="对象的形式"></a>对象的形式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"&#123;jd: true, jd2: false&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="数组的形式"><a href="#数组的形式" class="headerlink" title="数组的形式"></a>数组的形式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"['jd','jd2'&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意数组中的类名需要加单引号，数组里也可以用对象，对象的键名如果是不带<code>-</code>的可以不加单引号。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"[&#123;jd: true&#125;, &#123;'jd-2': true&#125;, 'jd2'&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>也可以在数组中使用三元表达式<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"[</span></span></span><br><span class="line"><span class="tag"><span class="string">  (item.jd === '增发预案' || item.jd === '已经实施') ? 'jd' :</span></span></span><br><span class="line"><span class="tag"><span class="string">  (item.jd === '董事会预案' || item.jd === '审核通过') ? 'jd2' :</span></span></span><br><span class="line"><span class="tag"><span class="string">  (item.jd === '增发失败') ? 'jd3' : 'jd4'</span></span></span><br><span class="line"><span class="tag"><span class="string">]"</span>&gt;</span>&#123;&#123;item.jd&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="函数的形式"><a href="#函数的形式" class="headerlink" title="函数的形式"></a>函数的形式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"getClass"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    method: &#123;</span><br><span class="line">      setClass () &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="string">'jd'</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>map数据结构</title>
      <link href="/2018/03/01/map%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2018/03/01/map%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。也就是说，Object 结构提供了“字符串—值”的对应，Map 结构提供了“值—值”的对应，是一种更完善的 Hash 结构实现。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">'name'</span>, <span class="string">'张三'</span>],</span><br><span class="line">  [<span class="string">'title'</span>, <span class="string">'Author'</span>]</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> map2 = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">  .set(<span class="string">'yes'</span>, <span class="literal">true</span>)</span><br><span class="line">  .set(<span class="string">'no'</span>, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure></p><p>Map 的键实际上是跟内存地址绑定的，只要内存地址不一样，就视为两个键。这就解决了同名属性碰撞（clash）的问题，我们扩展别人的库的时候，如果使用对象作为键名，就不用担心自己的属性与原作者的属性同名。<br>如果 Map 的键是一个简单类型的值（数字、字符串、布尔值），则只要两个值严格相等，Map 将其视为一个键，比如<code>0</code>和<code>-0</code>就是一个键，布尔值<code>true</code>和字符串<code>true</code>则是两个不同的键。另外，<code>undefined</code>和<code>null</code>也是两个不同的键。虽然<code>NaN</code>不严格相等于自身，但 Map 将其视为同一个键。</p><h3 id="map实例的属性"><a href="#map实例的属性" class="headerlink" title="map实例的属性"></a>map实例的属性</h3><ul><li>Map.prototype.size 返回map实例的成员总数。</li></ul><h3 id="map实例的操作方法"><a href="#map实例的操作方法" class="headerlink" title="map实例的操作方法"></a>map实例的操作方法</h3><ul><li>set(key, value) set方法设置键名key对应的键值为value，然后返回整个 Map 结构。如果key已经有值，则键值会被更新，否则就新生成该键。</li><li>get(key) get方法读取key对应的键值，如果找不到key，返回undefined。</li><li>has(key) has方法返回一个布尔值，表示某个键是否在当前 Map 对象之中。</li><li>delete(key) delete方法删除某个键，返回true。如果删除失败，返回false。</li><li>clear() clear方法清除所有成员，没有返回值。</li></ul><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">map.set(<span class="string">'foo'</span>, <span class="literal">true</span>)</span><br><span class="line">map.set(<span class="string">'bar'</span>, <span class="literal">false</span>)</span><br><span class="line">map.delete(<span class="string">'foo'</span>)</span><br><span class="line">map.size <span class="comment">// 1</span></span><br><span class="line">map.clear()</span><br><span class="line">map.size <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h3 id="map实例的遍历方法"><a href="#map实例的遍历方法" class="headerlink" title="map实例的遍历方法"></a>map实例的遍历方法</h3><ul><li>keys() 返回键名的遍历器。</li><li>values() 返回键值的遍历器。</li><li>entries() 返回所有成员的遍历器。</li><li>forEach() 遍历 Map 的所有成员。</li></ul><p>需要特别注意的是，Map 的遍历顺序就是插入顺序。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">'F'</span>, <span class="string">'no'</span>],</span><br><span class="line">  [<span class="string">'T'</span>,  <span class="string">'yes'</span>],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> map.keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// "F"</span></span><br><span class="line"><span class="comment">// "T"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> map.values()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// "no"</span></span><br><span class="line"><span class="comment">// "yes"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> map.entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item[<span class="number">0</span>], item[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// "F" "no"</span></span><br><span class="line"><span class="comment">// "T" "yes"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map.entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// "F" "no"</span></span><br><span class="line"><span class="comment">// "T" "yes"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于使用map.entries()</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// "F" "no"</span></span><br><span class="line"><span class="comment">// "T" "yes"</span></span><br></pre></td></tr></table></figure></p><p>Map 结构转为数组结构，比较快速的方法是使用扩展运算符<code>...</code>。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="number">1</span>, <span class="string">'one'</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="string">'two'</span>],</span><br><span class="line">  [<span class="number">3</span>, <span class="string">'three'</span>],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">[...map.keys()]</span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">[...map.values()]</span><br><span class="line"><span class="comment">// ['one', 'two', 'three']</span></span><br><span class="line"></span><br><span class="line">[...map.entries()]</span><br><span class="line"><span class="comment">// [[1,'one'], [2, 'two'], [3, 'three']]</span></span><br><span class="line"></span><br><span class="line">[...map]</span><br><span class="line"><span class="comment">// [[1,'one'], [2, 'two'], [3, 'three']]</span></span><br></pre></td></tr></table></figure></p><h3 id="WeekMap"><a href="#WeekMap" class="headerlink" title="WeekMap"></a>WeekMap</h3><p>WeakMap 结构与 Map 类似，区别是 WeakMap 只能是<strong>对象</strong>作为<strong>键名</strong>（<code>null</code>除外）。注意，WeakMap 弱引用的只是键名，而不是键值。键值依然是正常引用。WeakMap 键名 里面的引用，都不计入垃圾回收机制。WeakMap的专用场合就是，它的键所对应的对象，可能会在将来消失。WeakMap结构有助于防止内存泄漏。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>set数据结构</title>
      <link href="/2018/03/01/set%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2018/03/01/set%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。Set 本身是一个构造函数，用来生成 Set 数据结构。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>]); <span class="comment">// [[1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure></p><p>由此可以导出一种简单的数组去重方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dedupe</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [...new <span class="built_in">Set</span>(arr)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>Array.from</code>方法可以将 Set 结构转为数组，所以数组去重也可以这么写<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dedupe</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="set实例的属性"><a href="#set实例的属性" class="headerlink" title="set实例的属性"></a>set实例的属性</h3><ul><li>Set.prototype.size 返回Set实例的成员总数。</li></ul><h3 id="set实例的操作方法"><a href="#set实例的操作方法" class="headerlink" title="set实例的操作方法"></a>set实例的操作方法</h3><ul><li>add(value) 添加某个值，返回 Set 结构本身。</li><li>delete(value) 删除某个值，返回一个布尔值，表示删除是否成功。</li><li>has(value) 返回一个布尔值，表示该值是否为Set的成员。</li><li>clear() 清除所有成员，没有返回值。</li></ul><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s.add(<span class="number">1</span>).add(<span class="number">2</span>).add(<span class="number">2</span>);</span><br><span class="line">s.size <span class="comment">// 2</span></span><br><span class="line">s.has(<span class="number">1</span>) <span class="comment">// true</span></span><br><span class="line">s.has(<span class="number">2</span>) <span class="comment">// true</span></span><br><span class="line">s.has(<span class="number">3</span>) <span class="comment">// false</span></span><br><span class="line">s.delete(<span class="number">2</span>);</span><br><span class="line">s.has(<span class="number">2</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="set实例的遍历方法"><a href="#set实例的遍历方法" class="headerlink" title="set实例的遍历方法"></a>set实例的遍历方法</h3><ul><li>keys() 返回键名的遍历器</li><li>values() 返回键值的遍历器</li><li>entries() 返回键值对的遍历器</li><li>forEach() 使用回调函数遍历每个成员</li></ul><p>需要特别指出的是，Set的遍历顺序就是插入顺序。这个特性有时非常有用，比如使用 Set 保存一个回调函数列表，调用时就能保证按照添加顺序调用。由于 Set 结构没有键名，只有键值（或者说键名和键值是同一个值），所以keys方法和values方法的行为完全一致。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">set</span> = new Set([&#123;name: <span class="string">'red'</span>&#125;, <span class="string">'green'</span>, [<span class="string">'blue'</span>, <span class="string">'yellow'</span>]]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> <span class="keyword">set</span>.keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#123;name: "red"&#125;</span></span><br><span class="line"><span class="comment">// green</span></span><br><span class="line"><span class="comment">// ["blue", "yellow"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> <span class="keyword">set</span>.values()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#123;name: "red"&#125;</span></span><br><span class="line"><span class="comment">// green</span></span><br><span class="line"><span class="comment">// ["blue", "yellow"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> <span class="keyword">set</span>.entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [&#123;name: "red"&#125;, &#123;name: "red"&#125;]</span></span><br><span class="line"><span class="comment">// ["green", "green"]</span></span><br><span class="line"><span class="comment">// [["blue", "yellow"], ["blue", "yellow"]]</span></span><br></pre></td></tr></table></figure></p><h3 id="WeekSet"><a href="#WeekSet" class="headerlink" title="WeekSet"></a>WeekSet</h3><p>WeakSet 结构与 Set 类似，区别是 WeakSet 的成员只能是<strong>对象</strong>。WeakSet 里面的引用，都不计入垃圾回收机制，ES6 规定 WeakSet 不可遍历。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reduce方法</title>
      <link href="/2018/03/01/reduce%E6%96%B9%E6%B3%95/"/>
      <url>/2018/03/01/reduce%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>reduce() 是 ECMAScript5 规范中出现的数组方法。一般而言，可以通过reduce方法实现的逻辑都可以通过forEach方法来实现。根据规范： 在一个空数组上应用reduce会抛初始化错误的异常<code>TypeError</code>。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">total, currentValue, currentIndex, arr</span>), <span class="title">initialValue</span>)</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>function(total,currentValue, index,arr)</td><td>必需。用于执行每个数组元素的函数。</td></tr><tr><td>total</td><td>必需。初始值, 或者计算结束后的返回值。</td></tr><tr><td>currentValue</td><td>必需。当前元素</td></tr><tr><td>currentIndex</td><td>可选。当前元素的索引</td></tr><tr><td>arr</td><td>可选。当前元素所属的数组对象。</td></tr><tr><td>initialValue</td><td>可选。传递给函数的初始值</td></tr></tbody></table><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">25</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">total, item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> total + item;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(numbers.reduce(getSum)); <span class="comment">// 60</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> items = [<span class="number">7</span>, <span class="number">12.1</span>, <span class="number">100.3</span>];</span><br><span class="line"><span class="keyword">var</span> reducer = <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">total, item</span>) </span>&#123;</span><br><span class="line">  total.sum = total.sum + <span class="built_in">Math</span>.round(item);;</span><br><span class="line">  <span class="keyword">return</span> total;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(items.reduce(reducer, &#123;<span class="attr">sum</span>: <span class="number">0</span>&#125;)); <span class="comment">// &#123;sum:119&#125;</span></span><br></pre></td></tr></table></figure><p>reduce 方法可用于解析对象链式属性<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">num: &#123;</span><br><span class="line">a: <span class="number">12</span>,</span><br><span class="line">b: <span class="number">13</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">'num.a'</span>.split(<span class="string">'.'</span>).reduce(<span class="function">(<span class="params">obj, name</span>) =&gt;</span> obj[name], data) <span class="comment">// 12</span></span><br></pre></td></tr></table></figure></p><p>也可以用于函数式编程<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">...funcs</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (funcs.length === <span class="number">0</span>) <span class="keyword">return</span> <span class="function"><span class="params">arg</span> =&gt;</span> arg</span><br><span class="line">    <span class="keyword">if</span> (funcs.length === <span class="number">1</span>) <span class="keyword">return</span> funcs[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> funcs.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> a(b(...args)))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> func = compose(fn1,fn2,fn3) <span class="comment">// (i) =&gt; fn1(fn2(fn3(i)))</span></span><br><span class="line">func(<span class="number">5</span>) <span class="comment">// ((5 % 2) + 2) * 2 = 6</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>indexOf方法</title>
      <link href="/2018/02/28/indexOf%E6%96%B9%E6%B3%95/"/>
      <url>/2018/02/28/indexOf%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>indexOf() 方法可返回某个指定的值在字符串或数组中<strong>首次</strong>出现的位置，<strong>对象没有这个方法</strong>。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringObject.indexOf(searchvalue,fromindex)</span><br></pre></td></tr></table></figure><ul><li>searchvalue    必需。规定需检索的字符串值。</li><li>fromindex    可选的整数参数。规定在字符串中开始检索的位置。它的合法取值是 0 到 stringObject.length - 1。如省略该参数，则将从字符串的首字符开始检索。</li></ul><p><code>indexOf()</code> 方法对大小写敏感！<br>如果要检索的字符串值没有出现，则该方法返回 -1。<br>与<code>indexOf()</code>相对的方法是<code>lastIndexOf()</code>。</p><h3 id="应用拓展"><a href="#应用拓展" class="headerlink" title="应用拓展"></a>应用拓展</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str2 = <span class="string">'qwertyuioasdfghjke'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str2.indexOf(<span class="string">'wer'</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(str2.indexOf(<span class="string">'e'</span>)); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = [&#123;<span class="attr">aa</span>: <span class="number">13</span>&#125;, [<span class="number">12</span>, <span class="number">99</span>], <span class="number">96</span>, <span class="string">'55'</span>, <span class="literal">undefined</span>, <span class="literal">null</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr2.indexOf(&#123;<span class="attr">aa</span>: <span class="number">13</span>&#125;)); <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2.indexOf([<span class="number">12</span>, <span class="number">13</span>])); <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2.indexOf(<span class="number">96</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2.indexOf(<span class="string">'55'</span>)); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2.indexOf(<span class="string">'96'</span>)); <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2.indexOf(<span class="number">55</span>)); <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2.indexOf(<span class="literal">undefined</span>)); <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2.indexOf(<span class="literal">null</span>)); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>indexOf() 可以用来确定数组中是否存在某个<strong>基本类型的值</strong>或者<code>null</code>, 从上面的例子可以发现，indexOf无法确定数组和对象的存在，因为<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#125; == &#123;&#125; <span class="comment">// false</span></span><br><span class="line">[] == [] <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><p>但是如果是<strong>引用地址</strong>就可以确定是否存在<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">aa</span>: <span class="number">13</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">12</span>, <span class="number">99</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [obj, arr, <span class="number">96</span>, <span class="string">'55'</span>, <span class="literal">undefined</span>, <span class="literal">null</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr2.indexOf(obj)); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2.indexOf(arr)); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6中类的用法</title>
      <link href="/2018/02/28/ES6%E4%B8%AD%E7%B1%BB%E7%9A%84%E7%94%A8%E6%B3%95/"/>
      <url>/2018/02/28/ES6%E4%B8%AD%E7%B1%BB%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>ES6引入了Class（类）这个概念,作为对象的模板,通过class关键字,可以定义类。class不存在变量提升。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> methodName = <span class="string">"getInfo"</span>; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;  </span><br><span class="line">    <span class="comment">// constructor方法是类的构造函数是默认方法</span></span><br><span class="line">    <span class="keyword">constructor</span> (x,y) &#123;</span><br><span class="line">    <span class="comment">// ES6实例属性只能在constructor构造函数中定义  </span></span><br><span class="line">        <span class="keyword">this</span>.x = x;  </span><br><span class="line">        <span class="keyword">this</span>.y = y;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 注意！方法之间不需要逗号分隔！</span></span><br><span class="line"> <span class="comment">// toString方法是Person类内部定义的方法，ES6中它是不可枚举的，但ES5中可以枚举。</span></span><br><span class="line">    toString () &#123;  </span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span>.x + <span class="string">"的年龄是"</span> +<span class="keyword">this</span>.y+<span class="string">"岁"</span>);  </span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 在ES6中,类的属性名可以使用表达式</span></span><br><span class="line">    [methodName] () &#123;  </span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'输出'</span> + <span class="keyword">this</span>.x + <span class="string">'的基本信息'</span>);  </span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// static关键字，就表示该方法为“静态方法”，实例无法调用，只能类自身调用</span></span><br><span class="line">    <span class="keyword">static</span> getCommon()&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">'父类的静态方法'</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在类的原型上追加方法</span></span><br><span class="line"><span class="built_in">Object</span>.assign(Person.prototype, &#123;</span><br><span class="line">    getWeight()&#123;  </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'71kg'</span>);  </span><br><span class="line">    &#125;,  </span><br><span class="line">    getHeight()&#123;  </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'175cm'</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义静态属性，目前ES6，只有这种写法可行，因为ES6明确规定，Class内部只有静态方法，没有静态属性。</span></span><br><span class="line">Person.firstName = <span class="string">'pca'</span>;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom = <span class="keyword">new</span> Person(<span class="string">'tom'</span>, <span class="number">23</span>);</span><br><span class="line">tom.getInfo();</span><br><span class="line">tom.getWeight();</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shadowsocks的PAC模式与全局模式</title>
      <link href="/2018/02/25/Shadowsocks%E7%9A%84PAC%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%85%A8%E5%B1%80%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/02/25/Shadowsocks%E7%9A%84PAC%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%85%A8%E5%B1%80%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>Shadowsocks，即Sock5代理。采用socks协议的代理服务器就是SOCKS服务器，是一种通用的代理服务器。Socks 不要求应用程序遵循特定的操作系统平台，Socks 代理与应用层代理、 HTTP 层代理不同，Socks 代理只是简单地传递数据包，而不必关心是何种应用协议（比如FTP、HTTP和NNTP请求）。所以，Socks代理比其他应用层代理要快得多。</p><h3 id="全局模式"><a href="#全局模式" class="headerlink" title="全局模式"></a>全局模式</h3><p>Shadowsocks的全局模式，是设置你的系统代理的代理服务器，使你的所有http/socks数据经过代理服务器的转发送出。而只有支持socks5或者使用系统代理的软件才能使用Shadowsocks（一般的浏览器都是默认使用系统代理）。<br>经过代理服务器的IP会被更换。连接Shadowsocks需要知道IP、端口、账号密码和加密方式。但是Shadowsocks因为可以自由换端口，所以定期换端口就可以有效避免IP被封！</p><h3 id="PAC模式"><a href="#PAC模式" class="headerlink" title="PAC模式"></a>PAC模式</h3><p>上面已经解释了Shadowsocks的全局模式，而PAC模式就是会在你连接网站的时候读取PAC文件里的规则，来确定你访问的网站有没有被墙，如果符合，那就会使用代理服务器连接网站，而PAC列表一般都是从GFWList更新的。GFWList定期会更新被墙的网站（不过一般挺慢的）。<br>简单地说，在全局模式下，所有网站默认走代理。而PAC模式是只有被墙的才会走代理，<strong>推荐PAC模式</strong>，如果PAC模式无法访问一些网站，就换全局模式试试，一般是因为PAC更新不及时（也可能是GFWList更新不及时）导致的。</p><h3 id="ss-ssr"><a href="#ss-ssr" class="headerlink" title="ss/ssr"></a>ss/ssr</h3><p>ss：ss作者是clowwindy，大约两年前，他自己为了翻墙写了shadowsocks，简称ss或者叫影梭，后来他觉得这个东西非常好用，速度快，而且不会被封锁，他就把源码共享在了github上，然后就火了，但是后来作者被请去喝茶，删了代码，并且保证不再参与维护更新。现在这个好像是一个国外的大兄弟在维护。</p><p>ssr：在ss作者被喝茶之后，github上出现了一个叫breakwa11(破娃)的帐号，声称ss容易被防火墙检测到，所以在混淆和协议方面做了改进，更加不容易被检测到，而且兼容ss，改进后的项目叫shadowsocks-R，简称ssr，然后ss用户和ssr用户自然分成了两个派别，互相撕逼，直到前阵子，破娃被人肉出来，无奈之下删除了ssr的代码，并且解散了所有相关群组。</p><p>ss和ssr它的原理都是一样的，就是socks5代理。socks5代理是把你的网络数据请求通过一条连接你和代理服务器之间的通道，由服务器转发到目的地，这个过程中你是没有通过一条专用通道的，只是数据包的发出，然后被代理服务器收到，整个过程并没有额外的处理。通俗的说，现在你有一个代理服务器在香港，比如你现在想要访问google，你的电脑发出请求，流量通过socks5连接发到你在香港的服务器上，然后再由你在香港的服务器去访问google，再把访问结果传回你的电脑，这样就实现了翻墙。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>Chrome不需要Proxy SwitchyOmega和Proxy SwitchySharp插件，这两个插件的作用就是，快速切换代理，判断网站需不需要使用某个代理的（ss已经有pac模式了，所以不需要这个）。如果你用shadowsocks的话，就不需要这个插件了！</p><p>Shadowsocks客户端的<a href="https://shadowsocks.org/en/download/clients.html" target="_blank" rel="noopener">下载地址</a>，需要翻墙访问。</p>]]></content>
      
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VPN与VPS</title>
      <link href="/2018/02/25/VPN%E4%B8%8EVPS/"/>
      <url>/2018/02/25/VPN%E4%B8%8EVPS/</url>
      
        <content type="html"><![CDATA[<h3 id="VPN"><a href="#VPN" class="headerlink" title="VPN"></a>VPN</h3><p>VPN(Virtual Private Network 虚拟专用网络)属于远程访问技术，我们可以简单的把VPN当成是一个软件。用一个帐号和密码，就可以通过虚拟专线网络代理，突破网络限制来直接访问远程网站（比如上国外网站Facebook和Twitter），或着是加速网络访问和数据传输（比如网游加速器）。VPN分为两种，一种是静态的VPN，另外一种就是动态的VPN。动态的VPN是每登陆一次，就变化一次IP的。</p><h3 id="VPS"><a href="#VPS" class="headerlink" title="VPS"></a>VPS</h3><p>VPS(Virtual Private Server 虚拟专用服务器)属于虚拟主机技术，我们可以简单的把VPS作为服务器。一台服务器用软件分割开以后，就成了多台独立的（虚拟）服务器，他们有独立的操作系统和独立的IP，这个时候每一个独立的小的（虚拟）服务器，就是一个VPS。VPS是桌面操作的，用远程登陆以后，和自己的机器是一样的布局，可以在上面进行安装软件、搭建网站等操作。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p><a href="https://moshuqi.github.io/2017/07/20/%E8%87%AA%E5%B7%B1%E6%90%AD%E5%BB%BAVPN%E6%9C%8D%E5%8A%A1%E5%99%A8/#%E8%B4%AD%E4%B9%B0vps" target="_blank" rel="noopener">搬瓦工vps + shadowsock 搭建vpn</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS文本省略显示</title>
      <link href="/2018/02/24/CSS%E6%96%87%E6%9C%AC%E7%9C%81%E7%95%A5%E6%98%BE%E7%A4%BA/"/>
      <url>/2018/02/24/CSS%E6%96%87%E6%9C%AC%E7%9C%81%E7%95%A5%E6%98%BE%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<p>当页面上有过多文字的时候，往往需要省略显示，CSS可以很方便的做到这点。</p><blockquote><p>单行文本省略显示<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">width: 68%; // 需要固定一个宽度</span><br><span class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;</span><br><span class="line"><span class="selector-tag">text-overflow</span>: <span class="selector-tag">ellipsis</span>;</span><br><span class="line"><span class="selector-tag">white-space</span>: <span class="selector-tag">nowrap</span>;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>多行文本省略显示(适用于WebKit浏览器和移动端)<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">-webkit-box</span>;</span><br><span class="line"><span class="selector-tag">-webkit-box-orient</span>: <span class="selector-tag">vertical</span>;</span><br><span class="line">-webkit-line-clamp: 2; // 设置需要显示的行数</span><br><span class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搬瓦工VPS搭建教程</title>
      <link href="/2018/02/22/%E6%90%AC%E7%93%A6%E5%B7%A5VPS%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"/>
      <url>/2018/02/22/%E6%90%AC%E7%93%A6%E5%B7%A5VPS%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>官网提供了<a href="http://www.chexixi.com.cn/gonglue.html" target="_blank" rel="noopener">购买服务器的教程</a>，这里主要讲一下之后的步骤。</p><h3 id="install-new-os"><a href="#install-new-os" class="headerlink" title="install new os"></a>install new os</h3><ol><li>登录自己账号后点击“Services”中的“My Services”，进入到自己购买的VPS列表，然后点击“KiwiVM Control Panel”进入到管理面板</li><li>点击“stop”停止VPS运行，然后点击左侧“Install new OS”进入到系统重装页面</li><li>最后选择你要安装的系统版本（见邮件），点击“Reload”进行安装</li><li>安装成功后你的邮箱会收到安装成功提示，记下系统重装后的ROOT密码和SSH端口</li></ol><h3 id="Shadowsocks-Server"><a href="#Shadowsocks-Server" class="headerlink" title="Shadowsocks Server"></a>Shadowsocks Server</h3><ol><li>击左侧“Shadowsocks Server”进行安装</li><li>点击下方的说明，配置并安装“Shadowsocks Server”</li><li>说明文档中<strong>标黄</strong>的部分是需要手动输入的参数，必须一致</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>label标签属性</title>
      <link href="/2018/02/22/label%E6%A0%87%E7%AD%BE%E5%B1%9E%E6%80%A7/"/>
      <url>/2018/02/22/label%E6%A0%87%E7%AD%BE%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>label标签用来定义表单控件间的关系，当用户选择该标签时，浏览器会自动将焦点转到和标签相关的表单控件上。label标签有两个属性<code>for</code>和<code>accesskey</code>。</p><p><code>for</code>属性：表示label标签要绑定的HTML元素，你点击这个标签的时候，所绑定的元素将获取焦点。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Label</span> <span class="attr">for</span>=<span class="string">"InputBox"</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">Label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"InputBox"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>accesskey</code>属性：表示访问label标签所绑定的元素的热键，当您按下热键，所绑定的元素将获取焦点。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Label</span> <span class="attr">for</span>=<span class="string">"InputBox"</span> <span class="attr">ACCESSKEY</span>=<span class="string">"N"</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">Label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"InputBox"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>new操作符工作原理</title>
      <link href="/2018/02/21/new%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
      <url>/2018/02/21/new%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// f 为构造函数，o 为创建的对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">New</span> (<span class="params">f</span>) </span>&#123; </span><br><span class="line">   <span class="comment">/*1*/</span>  </span><br><span class="line">   <span class="keyword">var</span> o = &#123; <span class="string">'__proto__'</span>: f.prototype &#125;; </span><br><span class="line">   <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">      <span class="comment">/*2*/</span>    </span><br><span class="line">      f.apply(o, <span class="built_in">arguments</span>); </span><br><span class="line">      <span class="comment">/*3*/</span>    </span><br><span class="line">      <span class="keyword">return</span> o; </span><br><span class="line">   &#125;; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>创建对象<code>o</code></li><li><code>o</code>的<code>__proto__</code>属性指向<code>f</code>的原型</li><li>将<code>f</code>内部的<code>this</code>指向<code>o</code></li><li>返回<code>o</code></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中引用图片地址</title>
      <link href="/2018/02/17/Vue%E4%B8%AD%E5%BC%95%E7%94%A8%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80/"/>
      <url>/2018/02/17/Vue%E4%B8%AD%E5%BC%95%E7%94%A8%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../../uploads/1-headimg.jpg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上写法合理的，但是以下写法就会报错<br><a id="more"></a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"headimg"</span>&gt;</span></span><br><span class="line">...</span><br><span class="line">data () &#123;</span><br><span class="line">return &#123;</span><br><span class="line">  headimg: '../../uploads/1-headimg.jpg'</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>这是因为放在模版里的图片地址是会被<code>webpack</code>打包出来，所以不会报错；而<code>js</code>里的图片地址只是字符串，<code>webpack</code>不会处理。如果想这么做，可以把图片放在最外层的<code>static</code>文件夹，或使用<code>import</code> <code>require</code>引入。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  headimg: <span class="built_in">require</span>(<span class="string">'../../uploads/1-headimg.jpg'</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> headimg <span class="keyword">from</span> <span class="string">'../../uploads/1-headimg.jpg'</span></span><br><span class="line">...</span><br><span class="line">data () &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  headimg: headimg</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>更简单的还可以这样写<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"require('../../uploads/1-headimg.jpg')"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p><strong><code>require</code>不接受变量为参数，只接受直接字符串！字符串中带有变量也不行！</strong><br>举个栗子，<code>xx</code>是一个变量，以下写法是非法的<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"require(xx)"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>合理写法应该是<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"xx"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue组件库构建.md</title>
      <link href="/2018/02/16/Vue%E7%BB%84%E4%BB%B6%E5%BA%93%E6%9E%84%E5%BB%BA/"/>
      <url>/2018/02/16/Vue%E7%BB%84%E4%BB%B6%E5%BA%93%E6%9E%84%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>从Vue项目实践中抽离出部分组件，并集合成一个组件库项目，本文会指导你构建一个组件库的开发和发布环境，以及如何编写一个Vue组件。阅读过程中建议结合项目代码<a href="https://github.com/hamger/hg-vcomponents" target="_blank" rel="noopener">hg-vcompoments</a>。</p><h2 id="搭建项目"><a href="#搭建项目" class="headerlink" title="搭建项目"></a>搭建项目</h2><p>为了快速搭建一个项目，我们使用vue-cli（<code>npm install -g vue-cli</code>）来创建。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack hg-vcomponents</span><br><span class="line"><span class="built_in">cd</span> hg-vcomponents</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="改造项目结构"><a href="#改造项目结构" class="headerlink" title="改造项目结构"></a>改造项目结构</h3><p>使用vue-cli创建的目录结构并不是我们需要的结构，应此需要进行改造，改造后结构如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">. hg-vcomponents</span><br><span class="line">├── package.json  --------------------- 项目配置</span><br><span class="line">├── README.md  ------------------------ 说明文件</span><br><span class="line">├── build  ---------------------------- 构建代码文件</span><br><span class="line">├── config  --------------------------- 构建配置文件</span><br><span class="line">├── dist  ----------------------------- 组件打包后代码</span><br><span class="line">├── index.html  ----------------------- 入口页面</span><br><span class="line">└── src  ------------------------------ 源码目录</span><br><span class="line">    └── components  ------------------- 所有组件的目录</span><br><span class="line">        └── HollowArrow  -------------- 某个组件的目录</span><br><span class="line">            ├── hollow-arrow.vue  ----- 组件代码</span><br><span class="line">            └── README.md  ------------ 组件使用说明</span><br><span class="line">        └── index.js  ----------------- 导出所有组件</span><br><span class="line">    ├── examples  --------------------- 组件Demo的目录</span><br><span class="line">        ├── arrows.vue  --------------- 某个组件的Demo</span><br><span class="line">        └── index.vue  ---------------- 所有Demo的入口</span><br><span class="line">    ├── router  ----------------------- vue-router目录</span><br><span class="line">    ├── App.vue  ---------------------- vue根组件文件</span><br><span class="line">    └── main.js  ---------------------- 项目入口文件</span><br></pre></td></tr></table></figure></p><blockquote><p>src/components/index.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> HollowArrow <span class="keyword">from</span> <span class="string">'./HollowArrow/hollow-arrow.vue'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  HollowArrow</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>src/examples/index.vue<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab"</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/arrows"</span>&gt;</span>箭头组件<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">'el-index'</span></span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>src/router/index.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span>;</span><br><span class="line"><span class="keyword">const</span> Index = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/examples/index.vue'</span>); <span class="comment">// 所有的组件测试案例入口页面</span></span><br><span class="line"><span class="keyword">const</span> Arrows = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/examples/arrows.vue'</span>); <span class="comment">// hollow-arrow组件的测试案例</span></span><br><span class="line">Vue.use(Router);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      name: <span class="string">'index'</span>,</span><br><span class="line">      component: Index</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/arrows'</span>,</span><br><span class="line">      name: <span class="string">'arrows'</span>,</span><br><span class="line">      component: Arrows</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="开发与生产"><a href="#开发与生产" class="headerlink" title="开发与生产"></a>开发与生产</h3><p>通过设置<code>build/webpack.base.conf.js</code>，使<code>build</code>时打包<code>components</code>文件夹里的内容<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line">    app: process.env.NODE_ENV === <span class="string">'production'</span></span><br><span class="line">      ? <span class="string">'./src/components/index.js'</span> <span class="comment">// 生产模式下导入文件</span></span><br><span class="line">      : <span class="string">'./src/main.js'</span> <span class="comment">// 开发模式下导入文件</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>这样设置后使得项目的开发与生产独立开来，使用<code>npm run dev</code>进入开发环境，就可以看到组件的demo页面，方便本地调试。使用<code>npm run build</code>打包组件库代码。<br>由于<code>dist</code>文件夹下文件是要导出的文件，所以在<code>.gitignore</code>文件中记得把<code>dist/</code>去掉。</p><h2 id="编写组件"><a href="#编写组件" class="headerlink" title="编写组件"></a>编写组件</h2><p>编写一个Vue组件经常会用到<code>props</code>和<code>slot</code>。</p><h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><p>vue父组件通过<code>props</code>向子组件传递数据<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"hg-to-top"</span> <span class="attr">:style</span>=<span class="string">"&#123;height: height&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">...</span><br><span class="line">props: &#123;</span><br><span class="line">  height: &#123;</span><br><span class="line">    type: String,</span><br><span class="line">    default: '30px'</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h3 id="slot"><a href="#slot" class="headerlink" title="slot"></a>slot</h3><p>vue父组件通过<code>slot</code>向子组件传递<code>template</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"hg-to-top"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"hg-to-top-arrows"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">slot</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>如果父组件中不传入<code>slot</code>，默认显示子组件中<code>slot</code>标签里的内容。</p><p>完整组件代码见<a href="https://github.com/hamger/hg-vcomponents/blob/master/src/components/ToTop/to-top.vue" target="_blank" rel="noopener">这里</a>。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>开发一个组件的同时会需要进行本地测试，在<code>examples</code>下新建<code>arrows.vue</code>用来测试组件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hollow-arrow</span> <span class="attr">:direction</span>=<span class="string">"'left'"</span>&gt;</span><span class="tag">&lt;/<span class="name">hollow-arrow</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; HollowArrow &#125; <span class="keyword">from</span> <span class="string">'@/components'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    HollowArrow</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="上传NPM"><a href="#上传NPM" class="headerlink" title="上传NPM"></a>上传NPM</h2><p>开发的组件希望被更多的人使用，这时就需要上传NPM。</p><blockquote><p>修改<code>package.json</code>配置<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">"private": false, // 因为组件包是公用的，所以 private 为 false</span><br><span class="line">"main": "dist/hg-vcomponents.min.js", // 导出文件名，即 import 引入的文件</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>登录npm后，在根目录输入命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm version patch</span><br><span class="line">npm publish</span><br></pre></td></tr></table></figure></p></blockquote><p>现在你可以使用<code>npm install hg-vconponents</code>下载自己的组件库了，并通过如下方式引入<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'hg-vcomponents/dist/hg-vcomponents.min.css'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HollowArrow &#125; <span class="keyword">from</span> <span class="string">'hg-vcomponents'</span>;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>form标签属性</title>
      <link href="/2018/02/15/form%E6%A0%87%E7%AD%BE%E5%B1%9E%E6%80%A7/"/>
      <url>/2018/02/15/form%E6%A0%87%E7%AD%BE%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p><code>&lt;form&gt;</code>标签用于为用户输入创建 HTML 表单。表单能够包含 input 元素，如文本字段、复选框、单选框、提交按钮等。表单还可以包含 menus、textarea、fieldset、legend 和 label 元素。</p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>action</td><td>String</td><td>规定当提交表单时向何处发送表单数据</td></tr><tr><td>method</td><td><code>get/post</code></td><td>规定用于发送 form-data 的 HTTP 方法</td></tr><tr><td>name</td><td>String</td><td>规定表单的名称，一般不设置</td></tr><tr><td>autocomplete</td><td><code>on/off</code></td><td>H5属性，规定是否启用表单的自动完成功能</td></tr><tr><td>novalidate</td><td><code>novalidate</code></td><td>H5属性，如果使用该属性，则提交表单时不进行验证</td></tr><tr><td>target</td><td>见下方说明</td><td>规定在何处打开 action 的 URL</td></tr><tr><td>enctype</td><td>见下方说明</td><td>规定在发送表单数据之前如何对其进行编码</td></tr></tbody></table><h3 id="target-可能的值"><a href="#target-可能的值" class="headerlink" title="target 可能的值"></a>target 可能的值</h3><ul><li><code>_blank</code>：指定action的Url在新开的浏览器窗口中</li><li><code>_parent</code>：指定action的Url在父级浏览器窗口中</li><li><code>_self</code>：指定action的Url在当前浏览器窗口中</li><li><code>_top</code>：指定action的Url在顶级浏览器窗口中</li><li>framename：指定action的Url在指定的 iframe 中打开</li></ul><p>利用 target 可以实现表单提交不刷新，让 form 表单的 target 属性等于 iframe 的 name 属性<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://localhost:8085/api/uploadimg"</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> <span class="attr">target</span>=<span class="string">"nm_iframe"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"imgfile"</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">name</span>=<span class="string">"nm_iframe"</span> <span class="attr">style</span>=<span class="string">"display:none;"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="enctype-可能的值"><a href="#enctype-可能的值" class="headerlink" title="enctype 可能的值"></a>enctype 可能的值</h3><ul><li><code>application/x-www-form-urlencoded</code>: 默认，在发送前编码所有字符（空格转换为<code>+</code>加号，特殊符号转换为 ASCII HEX 值）</li><li><code>multipart/form-data</code>: 不对字符编码，在使用包含文件上传控件的表单时，必须使用该值</li><li><code>text/plain</code>: 空格转换为<code>+</code>加号，但不对特殊字符编码</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>event.srcElement与event.target的区别</title>
      <link href="/2018/02/14/event-srcElement%E4%B8%8Eevent-target%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2018/02/14/event-srcElement%E4%B8%8Eevent-target%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p><code>event.srcElement</code>与<code>event.target</code>两者作用相同，都是指向触发事件的元素，包含了该元素的各种属性。IE浏览器支持<code>srcElement</code>，而firefox支持<code>target</code>，解决兼容的方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> eve = event.srcElement ? event.srcElement : event.target;</span><br></pre></td></tr></table></figure></p><h3 id="this-与-event-srcElement"><a href="#this-与-event-srcElement" class="headerlink" title="this 与 event.srcElement"></a>this 与 event.srcElement</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">onblur</span>=<span class="string">"alert(this.value)"</span>/&gt;</span> // 合法</span><br><span class="line"><span class="comment">&lt;!-- fuction method() &#123;</span></span><br><span class="line"><span class="comment">  alert(this.value);</span></span><br><span class="line"><span class="comment">&#125; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">onblur</span>=<span class="string">"method()"</span>/&gt;</span> // 非法，method() 是被响应函数调用的函数。</span><br></pre></td></tr></table></figure><p>解决方法如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- fuction method(btn) &#123;</span></span><br><span class="line"><span class="comment">  alert(btn.value);</span></span><br><span class="line"><span class="comment">&#125; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">onblur</span>=<span class="string">"method(this)"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>或者<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- fuction method() &#123;</span></span><br><span class="line"><span class="comment">  alert(window.event.srcElement.value);</span></span><br><span class="line"><span class="comment">&#125; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">onblur</span>=<span class="string">"method()"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>less语法基础</title>
      <link href="/2018/02/11/less%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/02/11/less%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h3><p><code>less</code>定义变量的符号是<code>@</code>，<code>sass</code>定义变量符号是<code>$</code>。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@images:</span> <span class="string">"../img"</span>;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#444</span>;</span><br><span class="line">  <span class="attribute">background</span>: url(<span class="string">"@&#123;images&#125;/white-sand.png"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">@property:</span> color;</span><br><span class="line"><span class="selector-class">.widget</span> &#123;</span><br><span class="line">  <span class="attribute">@&#123;property&#125;</span>: <span class="number">#0ee</span>;</span><br><span class="line">  <span class="selector-tag">background-</span><span class="variable">@&#123;property&#125;</span>: <span class="selector-id">#999</span>;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="selector-tag">mySelector</span>: <span class="selector-tag">banner</span>;</span><br><span class="line"><span class="selector-class">.@&#123;mySelector&#125;</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="Mixins"><a href="#Mixins" class="headerlink" title="Mixins"></a>Mixins</h3><p><code>less</code>的<code>mixin</code>比<code>sass</code>更简洁。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span>, <span class="selector-id">#b</span> &#123;<span class="attribute">color</span>: red;&#125;</span><br><span class="line"><span class="selector-class">.mixin-class</span> &#123;</span><br><span class="line">  <span class="selector-class">.a</span>; <span class="comment">// 等价于 .a();</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mixin-id</span> &#123;</span><br><span class="line">  <span class="selector-id">#b</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.my-mixin</span> &#123; <span class="comment">// 会输出在 css 中</span></span><br><span class="line">  <span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my-other-mixin</span>() &#123; <span class="comment">// 不会输出在 css 中</span></span><br><span class="line">  <span class="attribute">background</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">  <span class="selector-class">.my-mixin</span>;</span><br><span class="line">  <span class="selector-class">.my-other-mixin</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.border-radius</span>(<span class="variable">@radius</span>: <span class="number">5px</span>) &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="variable">@radius</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mixin</span>() &#123;</span><br><span class="line">  <span class="variable">@width:</span>  <span class="number">100%</span>;</span><br><span class="line">  <span class="variable">@height:</span> <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.caller</span> &#123;</span><br><span class="line">  <span class="selector-class">.mixin</span>();</span><br><span class="line">  <span class="attribute">width</span>:  <span class="variable">@width</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">@height</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Extend"><a href="#Extend" class="headerlink" title="Extend"></a>Extend</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span><span class="selector-pseudo">:extend(.b)</span> &#123;&#125;</span><br><span class="line"><span class="comment">// the above block does the same thing as the below block</span></span><br><span class="line"><span class="selector-class">.a</span> &#123;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:extend(.b)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.e</span><span class="selector-pseudo">:extend(.f)</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.e</span><span class="selector-pseudo">:extend(.g)</span> &#123;&#125;</span><br><span class="line"><span class="comment">// the above an the below do the same thing</span></span><br><span class="line"><span class="selector-class">.e</span><span class="selector-pseudo">:extend(.f</span>, <span class="selector-class">.g</span>) &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="Import"><a href="#Import" class="headerlink" title="Import"></a>Import</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">'reset'</span>; <span class="comment">// reset.less</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> less </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sass语法基础</title>
      <link href="/2018/02/11/sass%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/02/11/sass%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h3><p><code>sass</code>定义变量符号是<code>$</code>，<code>less</code>定义变量的符号是<code>@</code>。<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$bule</span>: <span class="number">#2a8ee3</span> !global; <span class="comment">// 全局变量</span></span><br><span class="line"><span class="variable">$borderDirection</span>: top !default; <span class="comment">// 默认值</span></span><br><span class="line"><span class="variable">$baseFontSize</span>: <span class="number">12px</span>;</span><br><span class="line"><span class="variable">$baseLineHeight</span>: <span class="number">1.5</span>;</span><br><span class="line"><span class="selector-class">.border-</span>#&#123;<span class="variable">$borderDirection</span>&#125;&#123;</span><br><span class="line">  <span class="attribute">border</span>-#&#123;<span class="variable">$borderDirection</span>&#125;:<span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">font</span>:#&#123;<span class="variable">$baseFontSize</span>&#125;/#&#123;<span class="variable">$baseLineHeight</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$linkColor</span>: <span class="number">#08c</span> <span class="number">#333</span> !default;<span class="comment">//第一个值为默认值，第二个鼠标滑过值</span></span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:nth(<span class="variable">$linkColor</span>,<span class="number">1</span>);</span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:nth(<span class="variable">$linkColor</span>,<span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sass style</span></span><br><span class="line"><span class="variable">$headings</span>: (h1: <span class="number">2em</span>, h2: <span class="number">1.5em</span>, h3: <span class="number">1.2em</span>);</span><br><span class="line"><span class="keyword">@each</span> <span class="variable">$header</span>, <span class="variable">$size</span> in <span class="variable">$headings</span> &#123;</span><br><span class="line">  #&#123;<span class="variable">$header</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="variable">$size</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//css style</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2em</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.5em</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.2em</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Mixins"><a href="#Mixins" class="headerlink" title="Mixins"></a>Mixins</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> border-radius(<span class="variable">$radius</span>: <span class="number">5px</span>) &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="variable">$radius</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123; <span class="keyword">@include</span> border-radius(<span class="number">10px</span>); &#125;</span><br></pre></td></tr></table></figure><h3 id="Extend"><a href="#Extend" class="headerlink" title="Extend"></a>Extend</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// %定义占位符选择器，不调用则不会有任何多余的css文件</span></span><br><span class="line">%message-shared &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.message</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> %message-shared;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> %message-shared;</span><br><span class="line">  <span class="attribute">border-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$baseFontSize</span>:      <span class="number">10px</span>;</span><br><span class="line"><span class="variable">$gray</span>:              <span class="number">#ccc</span>;        </span><br><span class="line"><span class="keyword">@function</span> pxToRem(<span class="variable">$px</span>) &#123;</span><br><span class="line">  <span class="keyword">@return</span> <span class="variable">$px</span> / <span class="variable">$baseFontSize</span> * <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>:<span class="variable">$baseFontSize</span>;</span><br><span class="line">  <span class="attribute">color</span>:lighten(<span class="variable">$gray</span>,<span class="number">10%</span>); <span class="comment">// 颜色减淡 10%</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.test</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>:pxToRem(<span class="number">16px</span>);</span><br><span class="line">  <span class="attribute">color</span>:darken(<span class="variable">$gray</span>,<span class="number">10%</span>); <span class="comment">// 颜色加深 10%</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Import"><a href="#Import" class="headerlink" title="Import"></a>Import</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">'reset'</span>; <span class="comment">// 导入 reset.scss</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> sass </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SVG 图形</title>
      <link href="/2018/02/10/SVG-%E5%9B%BE%E5%BD%A2/"/>
      <url>/2018/02/10/SVG-%E5%9B%BE%E5%BD%A2/</url>
      
        <content type="html"><![CDATA[<p>SVG 意为可缩放矢量图形（Scalable Vector Graphics），SVG 使用 XML 格式定义图像。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">version</span>=<span class="string">"1.1"</span> <span class="attr">width</span>=<span class="string">"140"</span> <span class="attr">height</span>=<span class="string">"140"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">"100"</span> <span class="attr">cy</span>=<span class="string">"50"</span> <span class="attr">r</span>=<span class="string">"40"</span> <span class="attr">stroke</span>=<span class="string">"black"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">stroke-width</span>=<span class="string">"2"</span> <span class="attr">fill</span>=<span class="string">"red"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>SVG 代码在<code>&lt;svg&gt;&lt;/svg&gt;</code>内，这是根元素。<code>width</code>和<code>height</code>属性可设置此 SVG 文档的宽度和高度。<code>version</code>属性可定义所使用的 SVG 版本，<code>xmlns</code>属性可定义 SVG 命名空间。SVG 有一些预定义形状可以放在<code>&lt;svg&gt;&lt;/svg&gt;</code>里面。</p><p><strong>注意</strong>！<code>cx</code> <code>cy</code> <code>r</code> <code>x</code> <code>y</code>等这些属性不要写在<code>style</code>属性里，会有兼容性问题。</p><a id="more"></a><h3 id="SVG-矩形-lt-rect-gt"><a href="#SVG-矩形-lt-rect-gt" class="headerlink" title="SVG 矩形 - &lt;rect&gt;"></a>SVG 矩形 - <code>&lt;rect&gt;</code></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">version</span>=<span class="string">"1.1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"50"</span> <span class="attr">y</span>=<span class="string">"20"</span> <span class="attr">rx</span>=<span class="string">"20"</span> <span class="attr">ry</span>=<span class="string">"20"</span> <span class="attr">width</span>=<span class="string">"150"</span> <span class="attr">height</span>=<span class="string">"150"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">"fill:red;stroke:black;stroke-width:5;opacity:0.5"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>height/width</td><td>定义矩形高宽</td></tr><tr><td>fill</td><td>定义矩形的填充颜色</td></tr><tr><td>stroke-width</td><td>定义矩形边框的宽度</td></tr><tr><td>stroke</td><td>定义矩形边框的颜色</td></tr><tr><td>x</td><td>定义矩形的左侧位置</td></tr><tr><td>y</td><td>定义矩形的顶端位置</td></tr><tr><td>fill-opacity</td><td>定义填充颜色透明度（合法值：0~1）</td></tr><tr><td>stroke-opacity</td><td>定义笔触颜色的透明度（合法值：0~1）</td></tr><tr><td>opacity</td><td>定义整个元素的不透明度（合法值：0~1）</td></tr><tr><td>rx</td><td>定义水平圆角大小</td></tr><tr><td>ry</td><td>定义垂直圆角大小 </td></tr></tbody></table><h3 id="SVG-圆形-lt-circle-gt"><a href="#SVG-圆形-lt-circle-gt" class="headerlink" title="SVG 圆形 - &lt;circle&gt;"></a>SVG 圆形 - <code>&lt;circle&gt;</code></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">version</span>=<span class="string">"1.1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">"100"</span> <span class="attr">cy</span>=<span class="string">"50"</span> <span class="attr">r</span>=<span class="string">"40"</span> <span class="attr">stroke</span>=<span class="string">"black"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">stroke-width</span>=<span class="string">"2"</span> <span class="attr">fill</span>=<span class="string">"red"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>cx/cy</td><td>定义圆点的x和y坐标，默认圆心(0, 0)</td></tr><tr><td>r</td><td>定义圆的半径</td></tr></tbody></table><h3 id="SVG-椭圆-lt-ellipse-gt"><a href="#SVG-椭圆-lt-ellipse-gt" class="headerlink" title="SVG 椭圆 - &lt;ellipse&gt;"></a>SVG 椭圆 - <code>&lt;ellipse&gt;</code></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">version</span>=<span class="string">"1.1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ellipse</span> <span class="attr">cx</span>=<span class="string">"300"</span> <span class="attr">cy</span>=<span class="string">"80"</span> <span class="attr">rx</span>=<span class="string">"100"</span> <span class="attr">ry</span>=<span class="string">"50"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">"fill:yellow;stroke:purple;stroke-width:2"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>cx/cy</td><td>定义椭圆中心的x和y坐标</td></tr><tr><td>rx</td><td>定义椭圆的水平半径</td></tr><tr><td>ry</td><td>定义椭圆的垂直半径</td></tr></tbody></table><h3 id="SVG-直线-lt-line-gt"><a href="#SVG-直线-lt-line-gt" class="headerlink" title="SVG 直线 - &lt;line&gt;"></a>SVG 直线 - <code>&lt;line&gt;</code></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">version</span>=<span class="string">"1.1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">"0"</span> <span class="attr">y1</span>=<span class="string">"0"</span> <span class="attr">x2</span>=<span class="string">"200"</span> <span class="attr">y2</span>=<span class="string">"200"</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">"stroke:rgb(255,0,0);stroke-width:2"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>x1/y1</td><td>定义直线起点</td></tr><tr><td>x2/y2</td><td>定义直线终点</td></tr></tbody></table><h3 id="SVG-Stroke-属性"><a href="#SVG-Stroke-属性" class="headerlink" title="SVG Stroke 属性"></a>SVG Stroke 属性</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">version</span>=<span class="string">"1.1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">g</span> <span class="attr">fill</span>=<span class="string">"none"</span> <span class="attr">stroke</span>=<span class="string">"black"</span> <span class="attr">stroke-width</span>=<span class="string">"4"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span> <span class="attr">stroke-dasharray</span>=<span class="string">"5,5"</span> <span class="attr">d</span>=<span class="string">"M5 20 l215 0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span> <span class="attr">stroke-dasharray</span>=<span class="string">"10,10"</span> <span class="attr">d</span>=<span class="string">"M5 40 l215 0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span> <span class="attr">stroke-dasharray</span>=<span class="string">"20,10,5,5,5,10"</span> <span class="attr">d</span>=<span class="string">"M5 60 l215 0"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>stroke</td><td>定义描边颜色</td></tr><tr><td>stroke-width</td><td>定义描边组粗</td></tr><tr><td>stroke-linecap</td><td>定义开放路径头尾样式（butt、round、square）</td></tr><tr><td>stroke-dasharray</td><td>用于创建虚线，第一个参数为划线长度，第二个是缺口长度，如此循环</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> SVG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用SQL语句</title>
      <link href="/2018/02/07/%E5%B8%B8%E7%94%A8SQL%E8%AF%AD%E5%8F%A5/"/>
      <url>/2018/02/07/%E5%B8%B8%E7%94%A8SQL%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<p>SQL 是用于访问和处理数据库的标准的计算机语言。<strong>SQL 语句不区分大小写</strong>。注意在命名表的时候<strong>不要用MySQL的关键字</strong>（<a href="https://www.cnblogs.com/wuyifu/p/5949764.html" target="_blank" rel="noopener">关键字一览表</a>），否则插入数据的时候就报错。</p><h3 id="SELECT-从数据库中提取数据"><a href="#SELECT-从数据库中提取数据" class="headerlink" title="SELECT - 从数据库中提取数据"></a>SELECT - 从数据库中提取数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 查询整个表</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table_name;</span><br><span class="line">// 查询指定列</span><br><span class="line"><span class="keyword">SELECT</span> column_name, column_name2</span><br><span class="line"><span class="keyword">FROM</span> table_name;</span><br><span class="line">// 查询作者是 hanger 的文章，并按发布时间降序排序(默认升序 aes)</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> articles <span class="keyword">where</span> author = <span class="string">'hanger'</span> <span class="keyword">order</span> <span class="keyword">by</span> publish_time <span class="keyword">desc</span></span><br><span class="line">// <span class="string">"Websites"</span> 表中选取所有网站，并按照 <span class="string">"country"</span> 和 <span class="string">"alexa"</span> 列排序</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> country,alexa;</span><br><span class="line">// DISTINCT 使查询结果去除重复值</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> column_name, column_name</span><br><span class="line"><span class="keyword">FROM</span> table_name;</span><br><span class="line">// "Websites" 表中选取 alexa 排名大于 "15" 且国家为 "CN" 或 "USA" 的所有网站</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">WHERE</span> alexa &gt; <span class="number">15</span></span><br><span class="line"><span class="keyword">AND</span> (country=<span class="string">'CN'</span> <span class="keyword">OR</span> country=<span class="string">'USA'</span>);</span><br><span class="line">// 查询前五条数据(limit index, length)</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons</span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">5</span>;</span><br></pre></td></tr></table></figure><a id="more"></a><p>SQL 使用单引号来环绕文本值（大部分数据库系统也接受双引号）。如果是数值字段，请不要使用引号。<br>下面的运算符可以在 WHERE 子句中使用：</p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt;</td><td>不等于。注释：在 SQL 的一些版本中，该操作符可被写成 !=</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>BETWEEN</td><td>在某个范围内</td></tr><tr><td>LIKE</td><td>搜索某种模式</td></tr><tr><td>IN</td><td>指定针对某个列的多个可能值</td></tr></tbody></table><h3 id="INSERT-INTO-向数据库中插入新数据"><a href="#INSERT-INTO-向数据库中插入新数据" class="headerlink" title="INSERT INTO - 向数据库中插入新数据"></a>INSERT INTO - 向数据库中插入新数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 无需指定要插入数据的列名(按列顺序插入数据)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name</span><br><span class="line"><span class="keyword">VALUES</span> (value1,value2,value3,...);</span><br><span class="line">// 需要指定列名及被插入的值</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name (column1,column2,column3,...)</span><br><span class="line"><span class="keyword">VALUES</span> (value1,value2,value3,...);</span><br></pre></td></tr></table></figure><h3 id="UPDATE-更新数据库中的数据"><a href="#UPDATE-更新数据库中的数据" class="headerlink" title="UPDATE - 更新数据库中的数据"></a>UPDATE - 更新数据库中的数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 把 "菜鸟教程" 的 alexa 排名更新为 5000，country 改为 USA</span><br><span class="line"><span class="keyword">UPDATE</span> Websites </span><br><span class="line"><span class="keyword">SET</span> alexa=<span class="string">'5000'</span>, country=<span class="string">'USA'</span> </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">name</span>=<span class="string">'菜鸟教程'</span>;</span><br></pre></td></tr></table></figure><p><strong>警告！</strong>在更新记录时要格外小心！在上面的实例中，如果省略了<code>WHERE</code>，执行后将<code>Websites</code>表中所有数据的<code>alexa</code>改为<code>5000</code>，<code>country</code>改为<code>USA</code>！</p><h3 id="DELETE-从数据库中删除数据"><a href="#DELETE-从数据库中删除数据" class="headerlink" title="DELETE - 从数据库中删除数据"></a>DELETE - 从数据库中删除数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 删除指定行</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> some_column=some_value;</span><br><span class="line">// 删除表中所有的行，但表结构、属性、索引将保持不变</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name;</span><br><span class="line"><span class="keyword">DELETE</span> * <span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure><h3 id="CREATE-创建数据库、表、索引"><a href="#CREATE-创建数据库、表、索引" class="headerlink" title="CREATE - 创建数据库、表、索引"></a>CREATE - 创建数据库、表、索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 创建数据库</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> dbname;</span><br><span class="line">// 创建 persons 表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line">(</span><br><span class="line">PersonID <span class="built_in">int</span>,</span><br><span class="line">LastName <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">FirstName <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">Address <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">City <span class="built_in">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br><span class="line">// 在 "Persons" 表的 "LastName"、"FirstName" 列上创建一个名为 "PIndex" 的索引，允许使用重复的值</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> PIndex</span><br><span class="line"><span class="keyword">ON</span> Persons (LastName, FirstName)</span><br><span class="line">// <span class="keyword">UNIQUE</span> 在表上创建一个唯一的索引。不允许使用重复的值</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> index_name</span><br><span class="line"><span class="keyword">ON</span> table_name (column_name)</span><br></pre></td></tr></table></figure><p>在不读取整个表的情况下，索引使数据库应用程序可以更快地查找数据。更新一个包含索引的表需要比更新一个没有索引的表花费更多的时间，这是由于索引本身也需要更新。因此，理想的做法是仅仅在常常被搜索的列（以及表）上面创建索引。</p>]]></content>
      
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js中的this指向</title>
      <link href="/2018/01/28/js%E4%B8%AD%E7%9A%84this%E6%8C%87%E5%90%91/"/>
      <url>/2018/01/28/js%E4%B8%AD%E7%9A%84this%E6%8C%87%E5%90%91/</url>
      
        <content type="html"><![CDATA[<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Obj = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.msg = msg;</span><br><span class="line">  <span class="keyword">this</span>.shout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.msg);</span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="keyword">this</span>.waitAndShout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">this</span>.shout();</span><br><span class="line">      &#125;.call(<span class="keyword">this</span>),<span class="number">200</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Obj(<span class="string">'haha'</span>);</span><br><span class="line">obj.waitAndShout();</span><br></pre></td></tr></table></figure><p><code>obj</code>对象调用了<code>waitAndShout</code>,所以<code>waitAndShout</code>中的<code>this</code>指向<code>obj</code>，而<code>setTimeout</code>第一个参数的函数<code>this</code>被<code>call</code>指向了外层作用域的对象，即<code>obj</code>对象，所以打印出<code>haha</code>。这里如果不加<code>.call(this)</code>,就会报错<code>this.shout is not a function</code>。</p><h3 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h3><p>this永远指向最后调用它的对象（其上一级对象）；<br>函数没有被其上一级对象调用，其this指向window，严格模式下指向undefined；<br>函数被其上一级对象调用，其this指向其上一级对象。<br><a id="more"></a></p><h3 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">this</span>.user = <span class="string">'Hank'</span>;  </span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> fn;  </span><br><span class="line"><span class="built_in">console</span>.log(a.user); <span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">this</span>.user = <span class="string">'Hank'</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> fn;  </span><br><span class="line"><span class="built_in">console</span>.log(a.user); <span class="comment">//Hank</span></span><br></pre></td></tr></table></figure><p>如果返回值是一个对象(非 null )，那么this指向的就是那个返回的对象，如果返回值不是一个对象那么this还是指向函数的实例。</p><h3 id="ES6中箭头函数的this指向"><a href="#ES6中箭头函数的this指向" class="headerlink" title="ES6中箭头函数的this指向"></a>ES6中箭头函数的<code>this</code>指向</h3><p>箭头函数的<code>this</code>指向<strong>定义时所在的作用域</strong>，而不是运行时所在的作用域。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    id: <span class="number">2333</span>,</span><br><span class="line">    test: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">obj2.test() <span class="comment">// Window</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj3 = &#123;</span><br><span class="line">    id: <span class="number">2333</span>,</span><br><span class="line">    test: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>)&#125;</span><br><span class="line">&#125;</span><br><span class="line">obj3.test() <span class="comment">// obj3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 改成ES5写法如下</span></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;&#125;;</span><br><span class="line">obj2.id = <span class="number">2333</span>;</span><br><span class="line"><span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">obj2.test = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(_this);&#125;</span><br></pre></td></tr></table></figure></p><p>此时<code>_this</code>的指向已经确定好了，无论使用任何<code>call</code>或者<code>apply</code>调用，都不会改变<code>_this</code>的值。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归函数</title>
      <link href="/2018/01/14/%E9%80%92%E5%BD%92%E5%87%BD%E6%95%B0/"/>
      <url>/2018/01/14/%E9%80%92%E5%BD%92%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>递归函数定义：<strong> 函数体内调用自身的函数 </strong>。<br>递归函数只有在特定的情况下使用 ，比如阶乘问题：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> num * <span class="built_in">arguments</span>.callee(num - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">factorial(<span class="number">4</span>); <span class="comment">// 24</span></span><br></pre></td></tr></table></figure></p><p>代码中的<code>arguments.callee</code>可以替换为<code>factorial</code>，但是如下情况会导致错误：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> anotherFactorial = factorial; </span><br><span class="line">factorial = <span class="literal">null</span>;</span><br><span class="line">anotherFactorial(<span class="number">4</span>); <span class="comment">// Uncaught TypeError: factorial is not a function</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-cli使用方法</title>
      <link href="/2018/01/07/vue-cli%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2018/01/07/vue-cli%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="安装-vue-cli"><a href="#安装-vue-cli" class="headerlink" title="安装 vue-cli"></a>安装 vue-cli</h3><p>使用<code>npm install vue-cli -g</code>来安装或者更新<code>vue -cli</code>。</p><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><p><code>vue init 模板名称 项目名称</code><br>这里的模板名称官方提供5种：<code>webpack</code>、<code>webpack-simple</code>、<code>browserify</code>、<code>browserify-simple</code>、<code>simple</code>。<br>项目名称自己取，<strong>不需要加引号</strong>，<strong>不能大写</strong>。<br>创建好项目后<code>npm install</code>下载依赖，然后<code>npm run dev</code>启动项目。<br><a id="more"></a></p><h3 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">|-- build                            // 项目构建(webpack)相关代码</span><br><span class="line">|   |-- build.js                     // 生产环境构建代码</span><br><span class="line">|   |-- check-version.js             // 检查node、npm等版本</span><br><span class="line">|   |-- dev-client.js                // 热重载相关</span><br><span class="line">|   |-- dev-server.js                // 构建本地服务器</span><br><span class="line">|   |-- utils.js                     // 构建工具相关</span><br><span class="line">|   |-- webpack.base.conf.js         // webpack基础配置</span><br><span class="line">|   |-- webpack.dev.conf.js          // webpack开发环境配置</span><br><span class="line">|   |-- webpack.prod.conf.js         // webpack生产环境配置</span><br><span class="line">|-- config                           // 项目开发环境配置</span><br><span class="line">|   |-- dev.env.js                   // 开发环境变量</span><br><span class="line">|   |-- index.js                     // 项目一些配置变量</span><br><span class="line">|   |-- prod.env.js                  // 生产环境变量</span><br><span class="line">|   |-- test.env.js                  // 测试环境变量</span><br><span class="line">|-- src                              // 源码目录</span><br><span class="line">|   |-- components                   // vue 公共组件</span><br><span class="line">|   |-- store                        // vuex 的状态管理</span><br><span class="line">|   |-- App.vue                      // 页面入口文件</span><br><span class="line">|   |-- main.js                      // 程序入口文件，加载各种公共组件</span><br><span class="line">|-- static                           // 静态文件，比如一些图片，json数据等</span><br><span class="line">|-- .babelrc                         // ES6语法编译配置</span><br><span class="line">|-- .editorconfig                    // 定义代码格式</span><br><span class="line">|-- .gitignore                       // git上传需要忽略的文件格式</span><br><span class="line">|-- README.md                        // 项目说明</span><br><span class="line">|-- index.html                       // 入口页面</span><br><span class="line">|-- package.json                     // 项目基本信息</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue里native的用法</title>
      <link href="/2017/12/24/vue%E9%87%8Cnative%E7%9A%84%E7%94%A8%E6%B3%95/"/>
      <url>/2017/12/24/vue%E9%87%8Cnative%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>用vue写的项目中遇到给<code>router-link</code>标签添加事件<code>@click</code>、<code>@mouseover</code>等无效的情况<br>解决方法是使用<code>native</code></p><p>原代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span>  <span class="attr">v-for</span>=<span class="string">"(item, index) in pageMenuList"</span> <span class="attr">:to</span>=<span class="string">"&#123; path: item.listLink &#125;"</span> @<span class="attr">mouseover</span>=<span class="string">"overTag(index)"</span> @<span class="attr">mouseout</span>=<span class="string">"outTag(index)"</span>&gt;</span>&#123;&#123;item.listTitle&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"contain_tab_close"</span> <span class="attr">v-show</span>=<span class="string">"selected==index"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>根据Vue2.0官方文档关于父子组件通讯的原则，父组件通过prop传递数据给子组件，子组件触发事件给父组件。但父组件想在子组件上监听自己的click的话，需要加上native修饰符。</p><p>如果在想要在<code>router-link</code>上添加事件的话需要<a href="mailto:`@click.native" target="_blank" rel="noopener">`@click.native</a>`这样写。</p><p>所以如果要事件有效的话，应改成如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span>  <span class="attr">v-for</span>=<span class="string">"(item, index) in pageMenuList"</span> <span class="attr">:to</span>=<span class="string">"&#123; path: item.listLink &#125;"</span> @<span class="attr">mouseover.native</span>=<span class="string">"overTag(index)"</span> @<span class="attr">mouseout.native</span>=<span class="string">"outTag(index)"</span>&gt;</span>&#123;&#123;item.listTitle&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"contain_tab_close"</span> <span class="attr">v-show</span>=<span class="string">"selected==index"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Math对象</title>
      <link href="/2017/10/22/Math%E5%AF%B9%E8%B1%A1/"/>
      <url>/2017/10/22/Math%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<p>Math 对象用于执行数学任务。Math 对象并不像 Date 和 String 那样是对象的类，因此没有构造函数。</p><table><thead><tr><th>常用方法</th><th>描述 </th></tr></thead><tbody><tr><td>abs(x)</td><td>返回 x 的绝对值</td></tr><tr><td>ceil(x)</td><td>对 x 进行上舍入</td></tr><tr><td>floor(x)</td><td>对 x 进行下舍入</td></tr><tr><td>round(x)</td><td>把数四舍五入为最接近的整数</td></tr><tr><td>max(x,y,z,…,n)</td><td>返回 x,y,z,…,n 中的最高值</td></tr><tr><td>min(x,y,z,…,n)</td><td>返回 x,y,z,…,n中的最低值</td></tr><tr><td>random()</td><td>返回 0 ~ 1 之间的随机数</td></tr><tr><td>sqrt(x)</td><td>返回 x 的平方根</td></tr><tr><td>pow(x,y)</td><td>返回 x 的 y 次幂的值</td></tr></tbody></table><p>其中<code>max()</code>和<code>min()</code>的参数不能是数组只能是数字，如果要求数组中的极值则可以使用<code>Math.max.apply(Math, array)</code>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Date 对象</title>
      <link href="/2017/10/22/Date%E5%AF%B9%E8%B1%A1/"/>
      <url>/2017/10/22/Date%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<p>Date 对象用于处理日期与实际，记录一下它的方法以及传参。</p><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><table><thead><tr><th>方法</th><th>描述 </th></tr></thead><tbody><tr><td>getFullYear()</td><td>返回四位数字年份</td></tr><tr><td>getMonth()</td><td>返回月份 (0 ~ 11)</td></tr><tr><td>getDate()</td><td>返回一个月中的某一天 <strong>(1 ~ 31)</strong></td></tr><tr><td>getHours()</td><td>返回 Date 对象的小时 (0 ~ 23)</td></tr><tr><td>getMinutes()</td><td>返回 Date 对象的分钟 (0 ~ 59)</td></tr><tr><td>getSeconds()</td><td>返回 Date 对象的秒数 (0 ~ 59)</td></tr><tr><td>getDay()</td><td>返回一周中的某一天 (0 ~ 6)</td></tr><tr><td>getTime()</td><td>返回 1970 年 1 月 1 日至今的毫秒数</td></tr></tbody></table><h3 id="new-Date-参数"><a href="#new-Date-参数" class="headerlink" title="new Date() 参数"></a>new Date() 参数</h3><ul><li><code>new Date(&quot;month dd,yyyy hh:mm:ss&quot;)</code> 这里的<code>month</code>是一个英文月份单词如<code>January</code></li><li><code>new Date(&quot;yyyy/MM/dd hh:mm:ss&quot;)</code> 用<code>/</code>分隔日期比用<code>-</code>等分隔兼容性更好</li><li><code>new Date(yyyy, MM, dd, hh, mm, ss)</code> 参数不能放 Array 类型，且每项必须是 String 或 Number 类型</li><li><code>new Date(milliseconds)</code> 参数必须是 Number 类型</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"January 12,2006 22:19:35"</span>); <span class="comment">// 注意格式 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"January 12,2006"</span>); <span class="comment">// String 类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"2006/2/2 22:19:35"</span>); <span class="comment">// String 类型 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2006</span>,<span class="number">0</span>,<span class="number">12</span>,<span class="number">22</span>,<span class="number">19</span>,<span class="number">35</span>); <span class="comment">// 不能放 Array 类型 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2006</span>,<span class="number">0</span>,<span class="number">12</span>); <span class="comment">// 可以是String 或 Number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">1137075575000</span>); <span class="comment">// 必须是 Number 类型</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现双向绑定</title>
      <link href="/2017/09/24/%E5%AE%9E%E7%8E%B0%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/"/>
      <url>/2017/09/24/%E5%AE%9E%E7%8E%B0%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<p>Vue 的一个最明显的特性就是其不太引人注意的响应式系统。数据模型仅仅是普通的 JavaScript 对象，而当你修改它们时，视图会进行更新。<br>这是如何做到的呢？下面我将实现一个双向绑定的简单案例，我将分三步来实现：</p><ol><li>model -&gt; view 初始化</li><li>view -&gt; model 绑定</li><li>model -&gt; view 绑定</li></ol><p>学习过程需要结合代码（<a href="https://github.com/hamger/vue-study" target="_blank" rel="noopener">源码地址</a>），<br>以上三步分别对应<code>vue-es5</code>下的<code>step1.html</code>、<code>step2.html</code>、<code>step3.html</code>。</p><h3 id="step1"><a href="#step1" class="headerlink" title="step1"></a>step1</h3><p>第一步我们要考虑的应该是如何把<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"start"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span> &#123;&#123;start&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">        start: <span class="string">'hello world'</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>中<code>input</code>的<code>value</code>值和<code></code>变为<code>vm.data.start</code>的值，即将 model 转化为 view 。我们需要一个方法，该方法可以实现以上的转化，让<code>v-mode=&quot;start&quot;</code>和<code></code>绑定到的<code>data.start</code>的值，代码如下，具体代码和效果见step1.html。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 劫持节点并转化为文档片段</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">node2Fragment</span>(<span class="params">node, vm</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="built_in">document</span>.createDocumentFragment()</span><br><span class="line">    <span class="keyword">var</span> child</span><br><span class="line">    <span class="keyword">while</span> (child = node.firstChild) &#123; <span class="comment">// 编译每个节点，直到node下无子节点</span></span><br><span class="line">        compile(child, vm)</span><br><span class="line">        flag.appendChild(child) <span class="comment">// appendchild方法会自动删除node的child节点（子节点有且仅有一个父节点）</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag <span class="comment">// 返回填充后的文档片段</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译节点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compile</span>(<span class="params">node, vm</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> reg = <span class="regexp">/\&#123;\&#123;(.*)\&#125;\&#125;/</span></span><br><span class="line">    <span class="keyword">if</span> (node.nodeType === <span class="number">1</span>) &#123; <span class="comment">// 元素节点</span></span><br><span class="line">        <span class="keyword">var</span> attr = node.attributes</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; attr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (attr[i].nodeName == <span class="string">'v-model'</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> name = attr[i].nodeValue.trim()</span><br><span class="line">                node.value = vm.data[name]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (node.nodeType === <span class="number">3</span>) &#123; <span class="comment">// 文本节点</span></span><br><span class="line">        <span class="keyword">if</span> (reg.test(node.nodeValue)) &#123;</span><br><span class="line">            <span class="keyword">var</span> name = <span class="built_in">RegExp</span>.$<span class="number">1.</span>trim()</span><br><span class="line">            node.nodeValue = vm.data[name]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建Vue对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.data = options.data</span><br><span class="line">    <span class="keyword">var</span> node = <span class="built_in">document</span>.getElementById(options.el)</span><br><span class="line">    <span class="keyword">var</span> dom = node2Fragment(node, <span class="keyword">this</span>)</span><br><span class="line">    <span class="comment">// 将dom片段添加到目标元素</span></span><br><span class="line">    node.appendChild(dom)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="step2"><a href="#step2" class="headerlink" title="step2"></a>step2</h3><p>第二步需要实现view层向model层的绑定，当用户输入改变input的值(view层)时，反映到data中(model层)并改变对应的值。这里需要用到<code>Object.defineProperty()</code>来设置对象的访问器属性。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将vm.data上的数据挂载在vm上</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">obj, vm</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">Object</span>.keys(obj).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">        defineReactive(vm, key, obj[key])</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建响应式数据</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">obj, key, val</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">        <span class="keyword">get</span>: function() &#123;</span><br><span class="line">            <span class="keyword">return</span> val</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">set</span>: function(newVal) &#123;</span><br><span class="line">            <span class="keyword">if</span> (newVal === val) <span class="keyword">return</span></span><br><span class="line">            val = newVal</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"新属性值为"</span> + val)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>把observe函数在vue构造器中调用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.data = options.data</span><br><span class="line">    <span class="keyword">var</span> node = <span class="built_in">document</span>.getElementById(options.el)</span><br><span class="line">    observe(<span class="keyword">this</span>.data,<span class="keyword">this</span>) <span class="comment">// 监听数据</span></span><br><span class="line">    <span class="keyword">var</span> dom = node2Fragment(node, <span class="keyword">this</span>)</span><br><span class="line">    node.appendChild(dom)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>同时我们也需要修改一下原来的<code>compile</code>函数,将<code>vm.data[name]</code>改为<code>vm.[name]</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compile</span>(<span class="params">node, vm</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> reg = <span class="regexp">/\&#123;\&#123;(.*)\&#125;\&#125;/</span></span><br><span class="line">    <span class="keyword">if</span> (node.nodeType === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> attr = node.attributes <span class="comment">// 获取节点的所有属性</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; attr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (attr[i].nodeName == <span class="string">'v-model'</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> name = attr[i].nodeValue.trim()</span><br><span class="line">                node.addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                    vm[name] = e.target.value; </span><br><span class="line">                &#125;);</span><br><span class="line">                node.value = vm[name]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (node.nodeType === <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (reg.test(node.nodeValue)) &#123;</span><br><span class="line">            <span class="keyword">var</span> name = <span class="built_in">RegExp</span>.$<span class="number">1.</span>trim()</span><br><span class="line">            node.nodeValue = vm[name]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样当view层被改动时，相应的model层中对应的数据也会改变，具体代码和效果见step2.html。</p><h3 id="step3"><a href="#step3" class="headerlink" title="step3"></a>step3</h3><p>现在我们离双向绑定只差最后一步了，也是最重要和最难理解的一步，如何实现当model层中数据改变的时候响应式地改变view层的显示，即当改变<code>input</code>输入的时候能马上在下方视图得到显示。第一步做的是初始化绑定，现在要完成的是，当用户改变data值，再回过头去改变view层，这里将用到一个设计模式：观察者模式。<br>观察者模式是程序设计中的一种设计模式，定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态上发生变化时，会通知所有观察者对象，让他们能够自动更新自己。下面代码是一个应用观察者模式的简单例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个主题类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dep</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.subs = [] <span class="comment">// 主题的订阅者们</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 添加订阅者</span></span><br><span class="line">Dep.prototype.addSub = <span class="function"><span class="keyword">function</span>(<span class="params">sub</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.subs.push(sub)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 发布公告</span></span><br><span class="line">Dep.prototype.notify = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.subs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">sub</span>) </span>&#123;</span><br><span class="line">        sub.update()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个订阅者类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">Watcher</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 更新自己</span></span><br><span class="line">Watcher.prototype.update = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name+<span class="string">'更新了'</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化一个主题</span></span><br><span class="line"><span class="keyword">var</span> dep = <span class="keyword">new</span> Dep()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化订阅者并添加到主题</span></span><br><span class="line"><span class="keyword">var</span> sub1 = <span class="keyword">new</span> Watcher(<span class="string">'sub1'</span>)</span><br><span class="line">dep.addSub(sub1)</span><br><span class="line"><span class="keyword">var</span> sub2 = <span class="keyword">new</span> Watcher(<span class="string">'sub2'</span>)</span><br><span class="line">dep.addSub(sub2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主题发布公告，订阅者更新自己</span></span><br><span class="line">dep.notify()</span><br></pre></td></tr></table></figure></p><p>接下来我们要将该模式应用在我们的案例中，添加如下代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个主题类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.subs = [] <span class="comment">// 主题的订阅者</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Dep.prototype = &#123;</span><br><span class="line">    <span class="comment">// 添加订阅者</span></span><br><span class="line">    addSub: <span class="function"><span class="keyword">function</span>(<span class="params">sub</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subs.push(sub) </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 发布更新公告</span></span><br><span class="line">    notify: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">sub</span>) </span>&#123;</span><br><span class="line">            sub.update() <span class="comment">// 触发对应属性的 setter</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个订阅者类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Watcher</span>(<span class="params">vm, node, name</span>) </span>&#123;</span><br><span class="line">    Dep.target = <span class="keyword">this</span> <span class="comment">// 未订阅标记</span></span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.node = node</span><br><span class="line">    <span class="keyword">this</span>.vm = vm</span><br><span class="line">    <span class="keyword">this</span>.update() <span class="comment">// 初始化视图，触发对应属性的 getter</span></span><br><span class="line">    Dep.target = <span class="literal">null</span> <span class="comment">// 已订阅标记</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Watcher.prototype = &#123;</span><br><span class="line">    update: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.node.nodeValue = <span class="keyword">this</span>.vm[<span class="keyword">this</span>.name] <span class="comment">// 触发对应属性的 getter/setter</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>还需要修改一下<code>defineReactive</code>函数和<code>compile</code>函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">obj, key, val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dep = <span class="keyword">new</span> Dep() <span class="comment">// 实例化一个主题</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">        <span class="keyword">get</span>: function() &#123;</span><br><span class="line">            <span class="comment">// 添加订阅者到主题</span></span><br><span class="line">            <span class="keyword">if</span> (Dep.target) dep.addSub(Dep.target)</span><br><span class="line">            <span class="keyword">return</span> val</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">set</span>: function(newVal) &#123;</span><br><span class="line">            <span class="keyword">if</span> (newVal === val) <span class="keyword">return</span></span><br><span class="line">            val = newVal</span><br><span class="line">            dep.notify() <span class="comment">// 发布更新公告</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compile</span>(<span class="params">node, vm</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> reg = <span class="regexp">/\&#123;\&#123;(.*)\&#125;\&#125;/</span></span><br><span class="line">    <span class="keyword">if</span> (node.nodeType === <span class="number">1</span>) &#123; </span><br><span class="line">        <span class="keyword">var</span> attr = node.attributes</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; attr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (attr[i].nodeName == <span class="string">'v-model'</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> name = attr[i].nodeValue.trim()</span><br><span class="line">                node.addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                    vm[name] = e.target.value</span><br><span class="line">                &#125;);</span><br><span class="line">                node.value = vm[name]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (node.nodeType === <span class="number">3</span>) &#123; </span><br><span class="line">        <span class="keyword">if</span> (reg.test(node.nodeValue)) &#123;</span><br><span class="line">            <span class="keyword">var</span> name = <span class="built_in">RegExp</span>.$<span class="number">1.</span>trim()</span><br><span class="line">            <span class="keyword">new</span> Watcher(vm, node, name) <span class="comment">// 初始化数据并添加订阅者</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此我们已经实现了基础的双向绑定功能，具体代码和效果见step3.html。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>最后在理解一下 Vue 官网对其响应式原理的解释：<a href="https://cn.vuejs.org/v2/guide/reactivity.html#%E5%A6%82%E4%BD%95%E8%BF%BD%E8%B8%AA%E5%8F%98%E5%8C%96" target="_blank" rel="noopener">Vue响应式原理</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>列表模板引擎进化之路</title>
      <link href="/2017/06/08/%E5%88%97%E8%A1%A8%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E8%BF%9B%E5%8C%96%E4%B9%8B%E8%B7%AF/"/>
      <url>/2017/06/08/%E5%88%97%E8%A1%A8%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E8%BF%9B%E5%8C%96%E4%B9%8B%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<p>平时的工作中，经常会遇到渲染列表的需求，比如下面的代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = [&#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'hanger'</span>&#125;, &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'Alice'</span>&#125;]</span><br><span class="line"><span class="keyword">var</span> tableContent = <span class="string">''</span></span><br><span class="line">data.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    tableContent += <span class="string">'&lt;tr&gt;'</span> +</span><br><span class="line">        <span class="string">'&lt;th &gt;'</span> + obj.id + <span class="string">'&lt;/th&gt;'</span> +</span><br><span class="line">        <span class="string">'&lt;th&gt;'</span> + obj.name + <span class="string">'&lt;/th&gt;'</span> +</span><br><span class="line">        <span class="string">'&lt;/tr&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(tableContent)</span><br></pre></td></tr></table></figure></p><p>向上面这样写一个字符串十分繁琐，而且不可复用。那么有什么办法可以解决这样的问题呢？<br>我们都知道js的replace()函数可以实现字符串的替换，replace()第二个参数可以为函数，在开启列表模板引擎进化之旅之前需要先理解<a href="https://hangermeng.top/2017/03/17/replace-%E6%96%B9%E6%B3%95/">replace方法</a>。<br>现在我要利用replace()的强大能力来解决上面这个问题。直接上最初的代码：<br><a id="more"></a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tplEngine1</span>(<span class="params">tpl, obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tpl = tpl.replace(<span class="regexp">/&lt;%([^%&gt;]+)?%&gt;/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> b = b.trim()</span><br><span class="line">        <span class="keyword">return</span> obj[b]</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> tpl</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> tpl = <span class="string">'&lt;tr&gt;'</span> +</span><br><span class="line">    <span class="string">'&lt;th&gt;&lt;%id%&gt;&lt;/th&gt;'</span> +</span><br><span class="line">    <span class="string">'&lt;th&gt;&lt;%name%&gt;&lt;/th&gt;'</span> +</span><br><span class="line">    <span class="string">'&lt;/tr&gt;'</span></span><br><span class="line"><span class="keyword">var</span> tableContent = <span class="string">''</span></span><br><span class="line">data.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    tableContent += tplEngine1(tpl, obj)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(tableContent)</span><br></pre></td></tr></table></figure></p><p>在控制台打印一下，你会得到同样的结果，是不是觉得这样的字符串简单多了呢。<br>但是上面这个版本的模板引擎还是最简单的、功能最弱的版本，随着需求的增加，我们需要不断改进它。</p><h3 id="解决两层数据对象"><a href="#解决两层数据对象" class="headerlink" title="解决两层数据对象"></a>解决两层数据对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tplEngine2</span>(<span class="params">tpl, obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tpl = tpl.replace(<span class="regexp">/&lt;%([^%&gt;]+)?%&gt;/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> b = b.trim()</span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/\./</span>.test(b)) &#123;</span><br><span class="line">            <span class="keyword">var</span> arr = b.split(<span class="string">'.'</span>)</span><br><span class="line">            <span class="keyword">return</span> obj[arr[<span class="number">0</span>]][arr[<span class="number">1</span>]]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> obj[b]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> tpl</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解决得到的数据是数组"><a href="#解决得到的数据是数组" class="headerlink" title="解决得到的数据是数组"></a>解决得到的数据是数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tplEngine3</span>(<span class="params">tpl, obj, separator</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> separator = separator || <span class="string">','</span></span><br><span class="line">    <span class="keyword">var</span> tpl = tpl.replace(<span class="regexp">/&lt;%([^%&gt;]+)?%&gt;/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> b = b.trim()</span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/\./</span>.test(b)) &#123;</span><br><span class="line">            <span class="keyword">var</span> arr = b.split(<span class="string">'.'</span>)</span><br><span class="line">            <span class="keyword">if</span> (obj[arr[<span class="number">0</span>]][arr[<span class="number">1</span>]] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> obj[arr[<span class="number">0</span>]][arr[<span class="number">1</span>]].join(separator)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> obj[arr[<span class="number">0</span>]][arr[<span class="number">1</span>]]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (obj[b] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> obj[b].join(separator)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> obj[b]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> tpl</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="避免显示undefined"><a href="#避免显示undefined" class="headerlink" title="避免显示undefined"></a>避免显示undefined</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tplEngine4</span>(<span class="params">tpl, obj, fruitless, separator</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> fruitless = fruitless || <span class="string">''</span></span><br><span class="line"><span class="keyword">var</span> separator = separator || <span class="string">','</span></span><br><span class="line">    <span class="keyword">var</span> tpl = tpl.replace(<span class="regexp">/&lt;%([^%&gt;]+)?%&gt;/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> b = b.trim()</span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/\./</span>.test(b)) &#123;</span><br><span class="line">            <span class="keyword">var</span> arr = b.split(<span class="string">'.'</span>)</span><br><span class="line">            <span class="keyword">if</span> (obj[arr[<span class="number">0</span>]][arr[<span class="number">1</span>]] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (obj[arr[<span class="number">0</span>]][arr[<span class="number">1</span>]].length == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> fruitless</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> obj[arr[<span class="number">0</span>]][arr[<span class="number">1</span>]].join(separator)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> obj[arr[<span class="number">0</span>]][arr[<span class="number">1</span>]]</span><br><span class="line">                <span class="keyword">if</span> (obj[arr[<span class="number">0</span>]][arr[<span class="number">1</span>]]) &#123;&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> fruitless</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (obj[b] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (obj[b].length == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> fruitless</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> obj[b].join(separator)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (obj[b]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> obj[b]</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> fruitless</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> tpl</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="填充变量"><a href="#填充变量" class="headerlink" title="填充变量"></a>填充变量</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tplEngine5</span>(<span class="params">tpl, obj, fruitless, separator</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fruitless = fruitless || <span class="string">''</span></span><br><span class="line">    <span class="keyword">var</span> separator = separator || <span class="string">','</span></span><br><span class="line">    <span class="keyword">var</span> tpl = tpl.replace(<span class="regexp">/&lt;@([^@&gt;]+)?@&gt;/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">match, $<span class="number">1</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> $<span class="number">1</span> = $<span class="number">1.</span>trim()</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">eval</span>($<span class="number">1</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">var</span> tpl = tpl.replace(<span class="regexp">/&lt;%([^%&gt;]+)?%&gt;/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> b = b.trim()</span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/\./</span>.test(b)) &#123;</span><br><span class="line">            <span class="keyword">var</span> arr = b.split(<span class="string">'.'</span>)</span><br><span class="line">            <span class="keyword">if</span> (obj[arr[<span class="number">0</span>]][arr[<span class="number">1</span>]] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (obj[arr[<span class="number">0</span>]][arr[<span class="number">1</span>]].length == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> fruitless</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> obj[arr[<span class="number">0</span>]][arr[<span class="number">1</span>]].join(separator)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> obj[arr[<span class="number">0</span>]][arr[<span class="number">1</span>]]</span><br><span class="line">                <span class="keyword">if</span> (obj[arr[<span class="number">0</span>]][arr[<span class="number">1</span>]]) &#123;&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> fruitless</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (obj[b] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (obj[b].length == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> fruitless</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> obj[b].join(separator)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (obj[b]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> obj[b]</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> fruitless</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> tpl</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加过滤函数"><a href="#添加过滤函数" class="headerlink" title="添加过滤函数"></a>添加过滤函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tplEngine6</span>(<span class="params">tpl, data, separator</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化参数</span></span><br><span class="line">    <span class="keyword">if</span> (!separator &amp;&amp; separator !== <span class="number">0</span>) &#123;</span><br><span class="line">        separator = <span class="string">','</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">$<span class="number">1</span>, filter</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/\./</span>.test($<span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">var</span> arr2 = $<span class="number">1.</span>split(<span class="string">'.'</span>)</span><br><span class="line">            <span class="keyword">var</span> arr3 = data[arr2[<span class="number">0</span>]][arr2[<span class="number">1</span>]]</span><br><span class="line">            <span class="keyword">if</span> (arr3 <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (filter) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr3.length; i++) &#123;</span><br><span class="line">                        arr3[i] = filter(arr3[i])</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> arr3.join(separator)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (filter) &#123;</span><br><span class="line">                    arr3 = filter(arr3)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> arr3</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> arr4 = data[$<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> (arr4 <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (filter) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr4.length; i++) &#123;</span><br><span class="line">                        arr4[i] = filter(arr4[i])</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> arr4.join(separator)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (filter) &#123;</span><br><span class="line">                    arr4 = filter(arr4)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> arr4</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 变量填充 </span></span><br><span class="line">    <span class="keyword">var</span> tpl = tpl.replace(<span class="regexp">/&lt;@([^@&gt;]+)?@&gt;/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">match, $<span class="number">1</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> $<span class="number">1</span> = $<span class="number">1.</span>trim()</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/\|/</span>.test($<span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">var</span> arr = $<span class="number">1.</span>split(<span class="string">'|'</span>)</span><br><span class="line">        <span class="keyword">var</span> filter = <span class="built_in">eval</span>(arr[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">var</span> variate = <span class="built_in">eval</span>(arr[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">return</span> filter(variate)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>($<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 属性填充</span></span><br><span class="line">    <span class="keyword">var</span> tpl = tpl.replace(<span class="regexp">/&lt;%([^%&gt;]+)?%&gt;/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">match, $<span class="number">1</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> $<span class="number">1</span> = $<span class="number">1.</span>trim()</span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/\|/</span>.test($<span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">var</span> arr = $<span class="number">1.</span>split(<span class="string">'|'</span>)</span><br><span class="line">            <span class="keyword">var</span> filter = <span class="built_in">eval</span>(arr[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">return</span> print(arr[<span class="number">0</span>], filter)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> print($<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> tpl</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了过滤函数，就可以处理没值的情况了，因此去掉了fruitless参数，封装了print()函数使代码更加简洁。至此，列表模板引擎已经可以处理大部分工作中遇到的情况了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6常用语法</title>
      <link href="/2017/05/18/ES6%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/"/>
      <url>/2017/05/18/ES6%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>let,const </p></blockquote><p>let用于变量的声明，可以防止变量提升，实际上为JavaScript新增了块级作用域。用它所声明的变量，只在let命令所在的代码块内有效。const也用来声明变量，但是声明的是常量。一旦声明，常量的值就不能改变。</p><blockquote><p>class,extends,super </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123; <span class="comment">// class定义一个“类”</span></span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = <span class="string">'animal'</span></span><br><span class="line">    &#125;</span><br><span class="line">    says(say)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.type + <span class="string">' says '</span> + say)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> animal = <span class="keyword">new</span> Animal()</span><br><span class="line">animal.says(<span class="string">'hello'</span>) <span class="comment">//animal says hello</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123; <span class="comment">// extends实现继承</span></span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">super</span>() <span class="comment">// 指代父类的this对象</span></span><br><span class="line">        <span class="keyword">this</span>.type = <span class="string">'cat'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cat = <span class="keyword">new</span> Cat()</span><br><span class="line">cat.says(<span class="string">'hello'</span>) <span class="comment">//cat says hello</span></span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>arrow function</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123; <span class="keyword">return</span> i + <span class="number">1</span>; &#125; <span class="comment">//ES5</span></span><br><span class="line">(i) =&gt; i + <span class="number">1</span> <span class="comment">//ES6</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    x++;</span><br><span class="line">    y--;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line">(x, y) =&gt; &#123;x++; y--; <span class="keyword">return</span> x+y&#125;</span><br></pre></td></tr></table></figure><p>当我们使用箭头函数时，函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。并不是因为箭头函数内部有绑定this的机制，实际原因是箭头函数根本没有自己的this，它的this是继承外面的，因此内部的this就是外层代码块的this。</p><blockquote><p>template string</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#result"</span>).append(</span><br><span class="line">  <span class="string">"There are &lt;b&gt;"</span> + basket.count + <span class="string">"&lt;/b&gt; "</span> +</span><br><span class="line">  <span class="string">"items in your basket, "</span> +</span><br><span class="line">  <span class="string">"&lt;em&gt;"</span> + basket.onSale +</span><br><span class="line">  <span class="string">"&lt;/em&gt; are on sale!"</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$(<span class="string">"#result"</span>).append(<span class="string">`</span></span><br><span class="line"><span class="string">  There are &lt;b&gt;<span class="subst">$&#123;basket.count&#125;</span>&lt;/b&gt; items</span></span><br><span class="line"><span class="string">   in your basket, &lt;em&gt;<span class="subst">$&#123;basket.onSale&#125;</span>&lt;/em&gt;</span></span><br><span class="line"><span class="string">  are on sale!</span></span><br><span class="line"><span class="string">`</span>);</span><br></pre></td></tr></table></figure><blockquote><p>destructuring</p></blockquote><p>ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cat = <span class="string">'ken'</span></span><br><span class="line"><span class="keyword">let</span> dog = <span class="string">'lili'</span></span><br><span class="line"><span class="keyword">let</span> zoo = &#123;<span class="attr">cat</span>: cat, <span class="attr">dog</span>: dog&#125;</span><br><span class="line"><span class="built_in">console</span>.log(zoo)  <span class="comment">//Object &#123;cat: "ken", dog: "lili"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cat = <span class="string">'ken'</span></span><br><span class="line"><span class="keyword">let</span> dog = <span class="string">'lili'</span></span><br><span class="line"><span class="keyword">let</span> zoo = &#123;cat, dog&#125;</span><br><span class="line"><span class="built_in">console</span>.log(zoo)  <span class="comment">//Object &#123;cat: "ken", dog: "lili"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dog = &#123;<span class="attr">type</span>: <span class="string">'animal'</span>, <span class="attr">many</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;type, many&#125; = dog</span><br><span class="line"><span class="built_in">console</span>.log(type, many)   <span class="comment">//animal 2</span></span><br></pre></td></tr></table></figure></p><blockquote><p>default,rest </p></blockquote><p>default语法为某个参数指定默认值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animal</span>(<span class="params">type</span>)</span>&#123;</span><br><span class="line">    type = type || <span class="string">'cat'</span>  </span><br><span class="line">    <span class="built_in">console</span>.log(type)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animal</span>(<span class="params">type = <span class="string">'cat'</span></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(type)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>rest语法用于指代一类参数，可以替代ES5中是<code>arguments</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animals</span>(<span class="params">...types</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(types)</span><br><span class="line">&#125;</span><br><span class="line">animals(<span class="string">'cat'</span>, <span class="string">'dog'</span>, <span class="string">'fish'</span>) <span class="comment">//["cat", "dog", "fish"]</span></span><br></pre></td></tr></table></figure></p><blockquote><p>import,export</p></blockquote><p>在ES6之前为解决模块化问题，我们得利用第三方提供的一些方案，主要有两种CommonJS(服务器端)和AMD（浏览器端，如require.js）。<br>假设我们有两个js文件:index.js和content.js,现在我们想要在index.js中使用content.js返回的结果，我们来看看三种写法。</p><ul><li><p>require.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//content.js</span></span><br><span class="line">define(<span class="string">'content.js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'A cat'</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">'./content.js'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">animal</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(animal);   <span class="comment">//A cat</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>CommonJs</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">var</span> animal = <span class="built_in">require</span>(<span class="string">'./content.js'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//content.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="string">'A cat'</span></span><br></pre></td></tr></table></figure></li><li><p>ES6</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> animal <span class="keyword">from</span> <span class="string">'./content'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//content.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'A cat'</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>ES6 module高级用法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//content.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'A cat'</span>    </span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello!'</span></span><br><span class="line">&#125;    </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> type = <span class="string">'dog'</span></span><br></pre></td></tr></table></figure><p>上面可以看出，export命令除了输出变量，还可以输出函数，甚至是类.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> animal, &#123; say, type &#125; <span class="keyword">from</span> <span class="string">'./content'</span>  </span><br><span class="line"><span class="keyword">let</span> says = say()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`The <span class="subst">$&#123;type&#125;</span> says <span class="subst">$&#123;says&#125;</span> to <span class="subst">$&#123;animal&#125;</span>`</span>)  </span><br><span class="line"><span class="comment">//The dog says Hello to A cat</span></span><br></pre></td></tr></table></figure></p><blockquote><p>as修改变量名</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> animal, &#123; say, type <span class="keyword">as</span> animalType &#125; <span class="keyword">from</span> <span class="string">'./content'</span>  </span><br><span class="line"><span class="keyword">let</span> says = say()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`The <span class="subst">$&#123;animalType&#125;</span> says <span class="subst">$&#123;says&#125;</span> to <span class="subst">$&#123;animal&#125;</span>`</span>)</span><br></pre></td></tr></table></figure><blockquote><p>模块的整体加载</p></blockquote><p>用星号（<em>）指定一个对象，所有输出值都加载在这个对象上面,通常星号</em>结合as一起使用比较合适。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> animal, * <span class="keyword">as</span> content <span class="keyword">from</span> <span class="string">'./content'</span>  </span><br><span class="line"><span class="keyword">let</span> says = content.say()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`The <span class="subst">$&#123;content.type&#125;</span> says <span class="subst">$&#123;says&#125;</span> to <span class="subst">$&#123;animal&#125;</span>`</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP字符串操作</title>
      <link href="/2017/04/09/PHP%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/"/>
      <url>/2017/04/09/PHP%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="定义字符串"><a href="#定义字符串" class="headerlink" title="定义字符串"></a>定义字符串</h2><p>PHP中定义字符串有三种方式(其中单引号和双引号的区别请详见<a href="https://hangermeng.top/2017/03/27/PHP%E5%8D%95%E5%8F%8C%E5%BC%95%E5%8F%B7%E5%8C%BA%E5%88%AB/">这里</a>)：</p><ul><li>单引号 <code>$hello = &#39;hello world&#39;;</code></li><li>双引号 <code>$hello = &quot;hello world&quot;;</code></li><li>heredoc语法结构<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$hello = <span class="string">&lt;&lt;&lt;TAG</span></span><br><span class="line"><span class="string">hello world</span></span><br><span class="line"><span class="string">TAG;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="操作字符串"><a href="#操作字符串" class="headerlink" title="操作字符串"></a>操作字符串</h2><table><thead><tr><th>方法</th><th>功能 </th></tr></thead><tbody><tr><td>.</td><td>连接字符串 </td></tr><tr><td>trim()/rtrim()/ltrim()</td><td>去除（两边/右边/左边）空格 </td></tr><tr><td>strlen()/mb_strlen()</td><td>获取字符串/中文字符串长度</td></tr><tr><td>substr($str,start,howmany）</td><td>截取字符串</td></tr><tr><td>md_substr($str,start,howmany,’utf8’）</td><td>截取中文字符串</td></tr><tr><td>strpos(要处理的字符串, 要定位的字符串, [定位的起始位置)</td><td>返回要定位的字符串索引</td></tr><tr><td>str_replace(被替换的字符串, 替换的字符串, 被搜索的字符串, [替换进行计数])</td><td>替换字符串（区分大小写）</td></tr><tr><td>sprintf(格式, 要转化的字符串)</td><td>格式化字符串 </td></tr><tr><td>implode(分隔符[可选], 数组)</td><td>把数组元素合并为一个字符串</td></tr><tr><td>explode(分隔符[可选], 字符串)</td><td>把一个字符串分隔为数组元素</td></tr><tr><td>addslashes()</td><td>转义字符串</td></tr></tbody></table><a id="more"></a><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$str = <span class="string">"what's your name?"</span>;</span><br><span class="line"><span class="keyword">echo</span> addslashes($str); <span class="comment">// what\'s your name?</span></span><br><span class="line"></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="string">'Hello'</span>, <span class="string">'World!'</span>);</span><br><span class="line">$result = implode(<span class="string">' '</span>, $arr);</span><br><span class="line">print_r($result); <span class="comment">// Hello World!</span></span><br><span class="line"></span><br><span class="line">$result2 = explode(<span class="string">' '</span>, $result);</span><br><span class="line">print_r($result2); <span class="comment">// Array ( [0] =&gt; Hello [1] =&gt; World! )</span></span><br><span class="line"></span><br><span class="line">$str2 = <span class="string">'99.9'</span>;</span><br><span class="line">$result3 = sprintf(<span class="string">'%01.2f'</span>, $str2);</span><br><span class="line"><span class="keyword">echo</span> $result3; <span class="comment">// 99.90</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pug模板语法</title>
      <link href="/2017/04/07/pug%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95/"/>
      <url>/2017/04/07/pug%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>pug 是 HTML 的模板引擎，原名 jade ，大大简化了 HTML 代码的书写，并且增加了许多功能，代码之间的嵌套关系是统一通过<strong> 空格 </strong>或者<strong> <code>tab</code> </strong>来实现的，<strong> 不能两者混合用 </strong>，并且<strong> 1个<code>tab</code>不等于4个空格 </strong>，请务必先记住这一点。</p><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>pug 长这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">doctype html  </span><br><span class="line">head  </span><br><span class="line"> meta(charset=&apos;utf-8&apos;)  </span><br><span class="line"> title my resume  </span><br><span class="line"> style.</span><br><span class="line">  body&#123;background-color:#ABFDBA&#125;</span><br><span class="line"> script.</span><br><span class="line">  var name = &apos;scoot&apos; </span><br><span class="line">body </span><br><span class="line"> - var jade = &#123;source:&apos;jade&apos;,level:&apos;high&apos;&#125;</span><br><span class="line"> h2 a frondend enginner #&#123;jade.level&#125; </span><br><span class="line"> p   </span><br><span class="line">  | Alice  </span><br><span class="line">  | Tom </span><br><span class="line">  | Hairen </span><br><span class="line">  a(href=&apos;www.baidu.com&apos;) baidu </span><br><span class="line"> .skills  haha</span><br><span class="line"> div.program  lalla</span><br><span class="line"> ul#fruit.fruit</span><br><span class="line">  li aaa</span><br><span class="line">  li bbb</span><br><span class="line"> div: a hahhah</span><br></pre></td></tr></table></figure></p><p>以上代码等价与：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>  &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>my resume  <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"><span class="selector-tag">body</span>&#123;<span class="attribute">background-color</span>:<span class="number">#ABFDBA</span>&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="keyword">var</span> name = <span class="string">'scoot'</span> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>a frondend enginner high<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>  </span><br><span class="line">    Alice  </span><br><span class="line">    Tom </span><br><span class="line">    Hairen <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"www.baidu.com"</span>&gt;</span>baidu <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"skills"</span>&gt;</span> haha<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"program"</span>&gt;</span> lalla<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"friuts"</span> <span class="attr">id</span>=<span class="string">"fruit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>hahhah <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h3><table><thead><tr><th>符号</th><th>含义 </th></tr></thead><tbody><tr><td>.</td><td>表示之后的内容翻译为纯文本</td></tr><tr><td>  :</td><td>表示嵌套关系，不需要换行</td></tr><tr><td>&#124;</td><td>表示之后的内容翻译为纯文本，不识别HTML标签</td></tr><tr><td>//</td><td>注释，在编译出来的html中显示</td></tr><tr><td>//-</td><td>注释，在编译出来的html中不显示</td></tr><tr><td>-</td><td>后接 js 代码</td></tr><tr><td>#{变量}</td><td>转义插值</td></tr><tr><td>!{变量}</td><td>非转义插值</td></tr></tbody></table><h3 id="逻辑操作"><a href="#逻辑操作" class="headerlink" title="逻辑操作"></a>逻辑操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- var list = [&apos;one&apos;, &apos;two&apos;,&apos;three&apos;] </span><br><span class="line">- for (k in list)</span><br><span class="line"> p= list[k] </span><br><span class="line">if list </span><br><span class="line"> if (list.length &gt; 2)</span><br><span class="line">  p lists more than two</span><br><span class="line"> else if (list.length &gt;= 1)</span><br><span class="line">  p two lists or one list</span><br><span class="line"> else </span><br><span class="line">  p no list   </span><br><span class="line">else </span><br><span class="line"> p no list</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>one<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>two<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>three<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>lists more than two<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="Mixin"><a href="#Mixin" class="headerlink" title="Mixin"></a>Mixin</h3><p>minix可以理解为就是在定义一个函数，然后用<code>+</code>来调用函数，函数可以进行嵌套。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mixin student(name,course)</span><br><span class="line"> p #&#123;name&#125; studing #&#123;course&#125;</span><br><span class="line">mixin group(obj)</span><br><span class="line"> h2 my name is #&#123;obj.name&#125;</span><br><span class="line"> +student(obj.name,obj.course)</span><br><span class="line">h1 </span><br><span class="line"> +group(&#123;name:&apos;tom&apos;,course:&apos;jade&apos;&#125;)</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>my name is tom<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>tom studing jade<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h3><table><thead><tr><th>关键词</th><th>描述</th></tr></thead><tbody><tr><td>block</td><td>占位符，通过其实现子模板的追加和替换</td></tr><tr><td>extends</td><td>继承，子模板继承父模板中的代码</td></tr><tr><td>append</td><td>在子模板中向后追加内容</td></tr><tr><td>prepend</td><td>在子模板中向前追加内容</td></tr><tr><td>include</td><td>引入文件，并将其中的代码放到模板中</td></tr></tbody></table><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>例如，父模板如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// layout.jade</span><br><span class="line">doctype html</span><br><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    block scripts</span><br><span class="line">      script(src=&apos;jquery.js&apos;)</span><br><span class="line">    block styles</span><br><span class="line">  body</span><br><span class="line">    block content</span><br><span class="line">      p there&apos;s no content here</span><br></pre></td></tr></table></figure></p><p>现在有一个子模板继承了上述父模板<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// page1.jade（假设和layout.jade相同路径）</span><br><span class="line"></span><br><span class="line">extends layout // .jade扩展名可以省略</span><br><span class="line"></span><br><span class="line">block scripts  </span><br><span class="line">  script(src=&apos;react.js&apos;)</span><br><span class="line"></span><br><span class="line">append scripts</span><br><span class="line">  script(src=&apos;underscore.js&apos;)</span><br><span class="line"></span><br><span class="line">prepend scripts</span><br><span class="line">  script(src=&apos;vue.js&apos;)  </span><br><span class="line"></span><br><span class="line">block content //内容被替换为空</span><br></pre></td></tr></table></figure></p><p>输出如下，留意脚本顺序：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"react.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"underscore.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="include"><a href="#include" class="headerlink" title="include"></a>include</h3><p>include一般用来引入模板间可以复用的代码（比如头部和尾部），实现代码的去冗余。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">doctype html</span><br><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    style(type=&apos;text/css&apos;)</span><br><span class="line">      include style.css</span><br><span class="line">  body</span><br><span class="line">    include content.html</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> pug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式中加变量</title>
      <link href="/2017/04/04/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%AD%E5%8A%A0%E5%8F%98%E9%87%8F/"/>
      <url>/2017/04/04/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%AD%E5%8A%A0%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<p>当我们定义一个字符串、数组、对象等等的时候，我们习惯用字面量来定义，例如:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">"string"</span>;</span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br></pre></td></tr></table></figure></p><p>当需要加入变量时也十分简单：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> v = <span class="string">"bl"</span>;</span><br><span class="line"><span class="keyword">var</span> s = <span class="string">"string"</span> + v;  <span class="comment">//"stringbl"</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,v];  <span class="comment">//[1,"bl"]</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">first</span> : v&#125;;  <span class="comment">//&#123;first : "bl"&#125;</span></span><br></pre></td></tr></table></figure></p><p>但是如果是正则的字面量，就不能像上面这样加入变量了。<br>此时应该采用构造函数的形式来加入变量：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> v = <span class="string">"bl"</span>;</span><br><span class="line"><span class="keyword">var</span> re = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"^\\d+"</span> + v + <span class="string">"$"</span>,<span class="string">"gim"</span>); <span class="comment">// re为/^\d+bl$/gim</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> RegExp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac下命令行</title>
      <link href="/2017/04/02/Mac%E4%B8%8B%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
      <url>/2017/04/02/Mac%E4%B8%8B%E5%91%BD%E4%BB%A4%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<p>记录下一些常用的 Mac 命令行。</p><h2 id="关于man命令"><a href="#关于man命令" class="headerlink" title="关于man命令"></a>关于man命令</h2><p>在命令行中输入 <code>man command-name</code> 会返回一个该条命令的使用指南，非常详细。<br>使用指南往往很长，可以使用 ▲（上箭头）或 ▼（下箭头）来上下移动，使用空格键来翻页，输入<code>/</code>和关键字来搜索，按 Q 退出。</p><h2 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h2><table><thead><tr><th>命令</th><th>描述</th><th>用法 </th></tr></thead><tbody><tr><td>mkdir</td><td>创建一个目录</td><td>mkdir dir1</td></tr><tr><td>rmdir</td><td>删除一个空目录</td><td>rmdir dir1</td></tr><tr><td>mv</td><td>重命名一个目录/文件</td><td>mvdir dir1 dir2</td></tr><tr><td>rm -r</td><td>删除一个目录</td><td>rm -r dir1</td></tr><tr><td>cd</td><td>切换到指定目录</td><td>cd dirPath</td></tr><tr><td>ls</td><td>显示目录内容</td><td>ls (dir1)</td></tr><tr><td>pwd</td><td>显示目录路径</td><td>pwd</td></tr></tbody></table><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><table><thead><tr><th>命令</th><th>描述</th><th>用法 </th></tr></thead><tbody><tr><td>&gt;</td><td>创建/覆盖文件（回车进入文件编辑，编辑的内容（最后一行之前的内容）会<strong>覆盖</strong>原文件内容，<code>ctrl</code>+<code>c</code>退出并保存编辑）</td><td>&gt; file1</td></tr><tr><td>&gt;&gt;</td><td>创建/追加文件（回车进入文件编辑，编辑的内容（最后一行之前的内容）会<strong>追加</strong>到原文件下一行，<code>ctrl</code>+<code>c</code>退出并保存编辑）</td><td>&gt;&gt; file1</td></tr><tr><td>cat</td><td>显示文件内容</td><td>cat flie1</td></tr><tr><td>more</td><td>分屏显示文件内容</td><td>more file1</td></tr><tr><td>cp</td><td>复制文件或目录</td><td>cp file1 file2</td></tr><tr><td>rm</td><td>删除一个文件</td><td>rm file1</td></tr><tr><td>flie</td><td>显示文件类型</td><td>file fiel1</td></tr><tr><td>open</td><td>用默认程序打开文件</td><td>open fiel1</td></tr><tr><td>nano</td><td>默认编辑器打开文件</td><td>nano fiel1</td></tr><tr><td>vim</td><td>使用<a href="https://hangermeng.top/2018/10/18/vim使用总结/">Vim</a>编辑文件</td><td>vim file1</td></tr></tbody></table><a id="more"></a><h2 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h2><p>用来修改某个目录或文件的访问权限。<br>语法：<code>chmod [who] [+|-|=] [mode] file1/dir1</code><br>命令中各选项的含义为：<br>操作对象 who 可是下述字母中的任一个或者它们的组合：</p><ul><li>u 表示“用户（user）”，即文件或目录的所有者。</li><li>g 表示“同组（group）用户”，即与文件属主有相同组ID的所有用户。</li><li>o 表示“其他（others）用户”。</li><li>a 表示“所有（all）用户”。它是系统默认值。</li></ul><p>操作符号可以是：</p><ul><li><code>+</code> 添加某个权限。</li><li><code>-</code> 取消某个权限。</li><li><code>=</code> 赋予给定权限并取消其他所有权限（如果有的话）。</li></ul><p>设置 mode 所表示的权限可用下述字母的任意组合：</p><ul><li>r 可读。</li><li>w 可写。</li><li>x 可执行。</li><li>X 只有目标文件对某些用户是可执行的或该目标文件是目录时才追加x 属性。</li><li>s 在文件执行时把进程的属主或组ID置为该文件的文件属主。</li><li>t 保存程序的文本到交换设备上。</li><li>u 与文件属主拥有一样的权限。</li><li>g 与和文件属主同组的用户拥有一样的权限。</li></ul><h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><table><thead><tr><th>命令</th><th>描述</th><th>用法 </th></tr></thead><tbody><tr><td>sudo</td><td>进入管理员模式(‘super user do’)</td><td>sudo -s </td></tr><tr><td>exit</td><td>退出管理员模式</td><td>exit</td></tr><tr><td>ps</td><td>显示进程</td><td>ps -u </td></tr><tr><td>kill</td><td>终止进程</td><td>kill -9 [pid]</td></tr><tr><td>clear 或 ctrl+L</td><td>清屏</td><td>clear </td></tr><tr><td>alias</td><td>给某个命令定义别名</td><td>alias del=rm -i</td></tr><tr><td>unalias</td><td>取消对某个别名的定义</td><td>unalias del</td></tr><tr><td>find</td><td>查找</td><td>find -name ‘*.html’</td></tr><tr><td>history</td><td>列出最近执行过的（n条）命令</td><td>history (n)</td></tr><tr><td>chown</td><td>更改某个目录或文件的用户名和用户组</td><td>chown root:root file1/dir1</td></tr><tr><td>chmod</td><td>修改某个目录或文件的访问权限</td><td>chmod [who] [+ &#124;-&#124;=] [mode] file1/dir1</td></tr><tr><td>who</td><td>列出当前登入的所有用户</td><td>who</td></tr><tr><td>whoami</td><td>列出当前操作的用户</td><td>whoami</td></tr><tr><td>lsof</td><td>查看端口的占用情况</td><td>lsof -i :[port]</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域请求</title>
      <link href="/2017/03/30/%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/"/>
      <url>/2017/03/30/%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<p>跨域是由浏览器的同源策略引起的，即不同源（协议,域名,端口中其中有一个不同）的js是不能读取对方的资源的。限制跨域是浏览器的行为，而不是JS的行为。要实现跨域请求，解决方法大致分为两类：</p><ul><li>一类是Hack，比如通过 title , navigation 等对象传递信息，JSONP可以说是一个最优秀的Hack。</li><li>另一类是HTML5支持，一个是 <code>Access-Control-Allow-Origin</code> 响应头，一个是 window.postMessage 。</li></ul><h2 id="document-domain"><a href="#document-domain" class="headerlink" title="document.domain"></a>document.domain</h2><p>原理：相同主域名不同子域名下的页面，可以设置 document.domain 让它们同域。<br>限制：同域document提供的是页面间的互操作，需要载入iframe页面。</p><a id="more"></a><h2 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h2><p>原理：<code>script</code>标签的<code>src</code>属性是可以跨域的，而且在跨域脚本中可以直接回调当前脚本的函数。<br>限制：需要创建一个<code>script</code>标签并且添加到DOM树，只能用于GET方法。<br>跨域URL返回的脚本不仅包含数据，还包含一个回调：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// URL: http://b.a.com/foo</span></span><br><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">    foo: <span class="string">'bar'</span>,</span><br><span class="line">    bar: <span class="string">'foo'</span></span><br><span class="line">&#125;;</span><br><span class="line">callback(data);</span><br></pre></td></tr></table></figure></p><p>在主站<code>http://a.com</code>中，可以这样来跨域获取<code>http://b.a.com</code>的数据：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// URL: http://a.com/foo</span></span><br><span class="line"><span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 处理跨域请求得到的数据</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> script = $(<span class="string">'&lt;script&gt;'</span>, &#123;<span class="attr">src</span>: <span class="string">'http://b.a.com/bar'</span>&#125;);</span><br><span class="line">$(<span class="string">'body'</span>).append(script);</span><br></pre></td></tr></table></figure></p><p>其实jQuery已经封装了JSONP的使用，我们可以这样来：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.getJSON( <span class="string">"http://b.a.com/bar?callback=callback"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> data </span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 处理跨域请求得到的数据</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h2><p>原理：服务器设置 <code>Access-Control-Allow-Origin</code> HTTP响应头之后，浏览器将会允许跨域请求。<br>限制：浏览器需要支持HTML5， 可以支持POST，PUT等方法。<br>前面提到的跨域手段都是某种意义上的Hack， HTML5标准中提出的跨域资源共享（Cross Origin Resource Share，CORS）才是正道。 它支持其他的HTTP方法如PUT, POST等，可以从本质上解决跨域问题。</p><h2 id="window-postMessage"><a href="#window-postMessage" class="headerlink" title="window.postMessage"></a>window.postMessage</h2><p>原理：HTML5允许窗口之间发送消息。<br>限制：浏览器需要支持HTML5，获取窗口句柄后才能相互通信。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS原生DOM操作</title>
      <link href="/2017/03/29/JS%E5%8E%9F%E7%94%9FDOM%E6%93%8D%E4%BD%9C/"/>
      <url>/2017/03/29/JS%E5%8E%9F%E7%94%9FDOM%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>jQuery 用久了，原生JS操作 DOM 的方法就容易忘，在此好好归纳一下原生的常用方法。</p><h2 id="创建元素"><a href="#创建元素" class="headerlink" title="创建元素"></a>创建元素</h2><blockquote><p>创建元素：document.createElement()</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">div.id = <span class="string">"myDiv"</span>;</span><br><span class="line">div.className = <span class="string">"div1"</span>;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(div);</span><br></pre></td></tr></table></figure><blockquote><p>创建文本节点 ：document.createTextNode()</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> node = <span class="built_in">document</span>.createTextNode(<span class="string">"我是文本节点"</span>);  </span><br><span class="line"><span class="built_in">document</span>.body.appendChild(node);</span><br></pre></td></tr></table></figure><h2 id="节点关系"><a href="#节点关系" class="headerlink" title="节点关系"></a>节点关系</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span> <span class="attr">name</span>=<span class="string">"nameone"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div2"</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>父节点：parentNode</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> child2 = <span class="built_in">document</span>.getElementById(<span class="string">"div2"</span>);</span><br><span class="line"><span class="keyword">var</span> parent = child2.parentNode;</span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>子节点：children、childNodes</p></blockquote><p>children 只读属性，返回节点的子节点集合，不包括文本节点，只有元素节点，推荐使用。<br>childNodes 只读属性，返回节点的子节点集合，包括元素节点和文本节点(换行，空格也算)。 该集合为即时更新的集合（live collection），即对节点元素的任意修改都会立即反映到结果里。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> allChilds = parent.childNodes;</span><br><span class="line"><span class="built_in">console</span>.log(allChilds.length) <span class="comment">// 返回7，IE返回3  </span></span><br><span class="line"><span class="keyword">var</span> nodeAdd = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line"><span class="keyword">var</span> textAdd = <span class="built_in">document</span>.createTextNode(<span class="string">"这是添加的文本节点"</span>);</span><br><span class="line">nodeAdd.appendChild(textAdd);</span><br><span class="line">parent.appendChild(nodeAdd);</span><br><span class="line"><span class="built_in">console</span>.log(allChilds.length);<span class="comment">// 返回8，IE返回4</span></span><br></pre></td></tr></table></figure></p><blockquote><p>兄弟节点：nextSibling、previousSibling</p></blockquote><p>node.nextSibling || node.nextElementSibling 下一个兄弟节点<br>node.previousSibling || node.previousElementSibling 上一个兄弟节点<br>注意，前者包含文本节点和元素节点，后者只包含元素节点，后者IE9+支持</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> next = child2.nextSibling;</span><br><span class="line"><span class="keyword">var</span> previous = child2.previousSibling;</span><br></pre></td></tr></table></figure><blockquote><p>第一个或最后一个子节点：firstChild、lastChild</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> first = parent.firstChild; </span><br><span class="line"><span class="keyword">var</span> last = parent.lastChild;</span><br></pre></td></tr></table></figure><h2 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h2><blockquote><p>添加节点：appendChild()</p></blockquote><p>appendChild()用于向childNodes列表的末尾添加一个节点，并且返回这个新增的节点。<br>如果传入到appendChild()里的节点已经是文档的一部分了，那结果就是将节点从原来的位置转移到新位置，任何一个节点不能同时出现在文档中的多个位置。</p><blockquote><p>插入节点：insetBefore()</p></blockquote><p>insetBefore()可以将节点插入到某个特定的位置。这个方法接受两个参数：要插入的节点和作为参照的节点。<br>插入节点后，被插入的节点变成参照节点的前一个同胞节点，同时被方法返回。 如果参照节点是null，则与appendChild()执行相同的操作。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> returnNode = someNode.insetBefore(newNode, <span class="literal">null</span>);</span><br><span class="line"><span class="keyword">var</span> returnNode = someNode.insetBefore(newNode, someNode.firstChild);</span><br><span class="line"><span class="keyword">var</span> returnNode = someNode.insetBefore(newNode, someNode.lastChild);</span><br></pre></td></tr></table></figure></p><blockquote><p>替换节点： replaceChild()</p></blockquote><p>replaceChild()接受两个参数：要插入的节点和要被替换的节点。被替换的节点将由这个方法返回并从文档中被移除，同时由要插入的节点占据其位置。</p><blockquote><p>删除节点：removeChild()</p></blockquote><p>该方法接受一个参数，即要移除的节点，同时该方法返回被移除的节点。只能是一个节点，不能是一组节点。</p><blockquote><p>克隆节点：cloneNode(true/false)</p></blockquote><p>返回节点的一个副本。参数表示是否采用深度克隆,如果为true,则该节点的所有后代节点也都会被克隆,如果为false,则只克隆该节点本身，文本、换行、空格等不会被复制。默认为true。<br>克隆一个元素节点会拷贝它所有的属性以及属性值,包括了属性上绑定的事件(比如onclick=”alert(1)”),但不会拷贝那些使用addEventListener()方法或者node.onclick = fn这种用JavaScript动态绑定的事件。<br>注意:为了防止一个文档中出现两个ID相同的元素,使用cloneNode()方法克隆的节点在需要时应该指定新ID值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cloneHtml = child2.cloneNode(<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(cloneHtml);</span><br></pre></td></tr></table></figure></p><h2 id="元素选择"><a href="#元素选择" class="headerlink" title="元素选择"></a>元素选择</h2><blockquote><p>querySelector()、querySelectorAll() (IE8+)</p></blockquote><p>querySelector 返回相匹配的<strong> 第一个 </strong>Element节点。如果没有相匹配的，则返回null。<br>querySelectorAll 返回相匹配的<strong> 所有 </strong>Element节点列表，如果没有相匹配的，则返回一个空节点列表。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> special = <span class="built_in">document</span>.querySelectorAll( <span class="string">"p.warning, p.note"</span> );</span><br><span class="line"><span class="keyword">var</span> el = <span class="built_in">document</span>.querySelector( <span class="string">"#main, #basic, #exclamation"</span> );</span><br></pre></td></tr></table></figure></p><p>执行上面的代码后，el包含了文档中元素的ID是main、basic<strong> 或 </strong>exclamation的<strong> 所有元素中的第一个元素 </strong>。</p><blockquote><p>getElementsBy系列</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> element1 = <span class="built_in">document</span>.getElementById(<span class="string">"div0"</span>);</span><br><span class="line"><span class="keyword">var</span> element2 = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"div2"</span>);</span><br><span class="line"><span class="keyword">var</span> element3 = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>);</span><br><span class="line"><span class="keyword">var</span> element4 = <span class="built_in">document</span>.getElementsByName(<span class="string">"nameone"</span>);</span><br></pre></td></tr></table></figure><h2 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h2><blockquote><p>Attribute系列</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">child2.setAttribute(<span class="string">"class"</span>, <span class="string">"new_class"</span>);</span><br><span class="line">child2.removeAttribute(<span class="string">"class"</span>);</span><br><span class="line"><span class="keyword">var</span> attr = child2.getAttribute(<span class="string">"class"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(attr); <span class="comment">// null</span></span><br><span class="line"><span class="keyword">var</span> hasName = child2.hasAttribute(<span class="string">"name"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(hasName); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><blockquote><p>自定义属性</p></blockquote><p>HTML5 中<code>data-*</code>可以给指定元素添加自定义的属性。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div4"</span> <span class="attr">data-aa</span>=<span class="string">"11"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>利用<code>div4.dataset</code>可以获得一个DOMStringMap，包含了元素的所有<code>data-*</code>。<br>使用<code>div4.dataset.aa</code>返回值为11。<br>通过设置<code>div4.dataset.bb = &quot;22&quot;</code>就可以添加一个新的自定义属性。<br>不兼容则使用getAttribute和setAttribute。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div4 = <span class="built_in">document</span>.getElementById(<span class="string">"div4"</span>);</span><br><span class="line"><span class="keyword">var</span> a = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (div4.dataset) &#123;</span><br><span class="line">    a = div4.dataset.aa;</span><br><span class="line">    div4.dataset.bb = <span class="string">"22"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    a = div4.getAttribute(<span class="string">"data-aa"</span>);</span><br><span class="line">    div4.setAttribute(<span class="string">"data-bb"</span>, <span class="string">"22"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>页面跳转方式</title>
      <link href="/2017/03/29/%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC%E6%96%B9%E5%BC%8F/"/>
      <url>/2017/03/29/%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>前端工作有很多地方需要页面跳转，有很多种实现方法。</p><h3 id="HTML标签"><a href="#HTML标签" class="headerlink" title="HTML标签"></a>HTML标签</h3><p>一般形式上可以用<code>&lt;a&gt;&lt;/a&gt;</code>、<code>&lt;button&gt;&lt;/button&gt;</code>、<code>&lt;input/&gt;</code>：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"链接"</span>&gt;</span>GO<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"window.location.href='链接'"</span>&gt;</span>GO<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"GO"</span> <span class="attr">onclick</span>=<span class="string">"location.href='链接'"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="JS跳转页面代码"><a href="#JS跳转页面代码" class="headerlink" title="JS跳转页面代码"></a>JS跳转页面代码</h3><h4 id="本页跳转"><a href="#本页跳转" class="headerlink" title="本页跳转"></a>本页跳转</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.location.href = <span class="string">'链接'</span>;</span><br><span class="line"><span class="built_in">window</span>.location = <span class="string">'链接'</span>;</span><br><span class="line">location.href = <span class="string">'链接'</span>;</span><br><span class="line">location = <span class="string">'链接'</span>;</span><br><span class="line">top.location = <span class="string">'链接'</span>;</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="新页跳转"><a href="#新页跳转" class="headerlink" title="新页跳转"></a>新页跳转</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.open(<span class="string">'链接'</span>);</span><br><span class="line">open(<span class="string">'链接'</span>);</span><br></pre></td></tr></table></figure><p>或者在HTML标签中添加<code>target=&quot;_blank&quot;</code>:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"链接"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>GO<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="历史跳转"><a href="#历史跳转" class="headerlink" title="历史跳转"></a>历史跳转</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"history.go(-1)"</span>&gt;</span>返回上一步<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"window.history.back()"</span>&gt;</span>返回上一步<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="选择框跳转"><a href="#选择框跳转" class="headerlink" title="选择框跳转"></a>选择框跳转</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"GO"</span> <span class="attr">onclick</span>=<span class="string">"logout()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">logout</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (confirm(<span class="string">"你确定要跳转页面吗？"</span>))&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.location = <span class="string">"https://hangermeng.top/"</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sublime Text3快捷键和插件</title>
      <link href="/2017/03/28/Sublime-Text3%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E6%8F%92%E4%BB%B6/"/>
      <url>/2017/03/28/Sublime-Text3%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>Sublime Text3 是一款很好用的编辑器，想要优雅地使用它，知道部分快捷键和插件是必须的。</p><h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><table><thead><tr><th>快捷键</th><th>描述</th></tr></thead><tbody><tr><td>control + -</td><td>回到上一个光标</td></tr><tr><td>control + shift + -</td><td>回到下一个光标</td></tr><tr><td>control + cdm + ↑/↓</td><td>移动当前行代码</td></tr><tr><td>control + option + t</td><td>交换选中的两部分代码</td></tr><tr><td>cmd + option + [</td><td>折叠选中的代码</td></tr><tr><td>cmd + option + ]</td><td>展开选中的代码</td></tr><tr><td>shift + cmd + p</td><td>打开命令面板</td></tr><tr><td>control + `</td><td>打开控制台</td></tr><tr><td>cmd + n</td><td>新建标签</td></tr><tr><td>cmd + 1/2/3…</td><td>标签切换</td></tr><tr><td>cmd + option + 2</td><td>分成两屏</td></tr><tr><td>cmd + delelte</td><td>删除本行光标前的所有字符</td></tr><tr><td>cmd + shift + ↑/↓</td><td>选中光标上下代码</td></tr><tr><td>cmd + f</td><td>查找</td></tr><tr><td>option + cmd + f</td><td>查找替换</td></tr><tr><td>cmd + t</td><td>跳转到指定文件</td></tr><tr><td>control + g</td><td>跳转到指定行</td></tr><tr><td>cmd + r</td><td>跳转到指定函数</td></tr><tr><td>cmd + l</td><td>选中当前行</td></tr><tr><td>cmd + /</td><td>注释当前行或注释选中代码</td></tr><tr><td>cmd + option + /</td><td>产生注释代码或注释选中代码</td></tr><tr><td>cmd + k + b</td><td>开关侧边栏</td></tr></tbody></table><a id="more"></a><h3 id="包管理器"><a href="#包管理器" class="headerlink" title="包管理器"></a>包管理器</h3><p>下载插件之前，你需要先添加 Package Control<br>安装过程: 使用快捷键 control + ` 或者菜单栏选择 View &gt; Show Console</p><ul><li><p>Sublime Text3 在控制台输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import urllib.request,os; pf = <span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), <span class="string">'wb'</span>).write(urllib.request.urlopen( <span class="string">'http://sublime.wbond.net/'</span> + pf.replace(<span class="string">' '</span>,<span class="string">'%20'</span>)).<span class="built_in">read</span>())</span><br></pre></td></tr></table></figure></li><li><p>Sublime Text2 在控制台输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import urllib2,os; pf=<span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) <span class="keyword">if</span> not os.path.exists(ipp) <span class="keyword">else</span> None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler( ))); open( os.path.join( ipp, pf), <span class="string">'wb'</span> ).write( urllib2.urlopen( <span class="string">'http://sublime.wbond.net/'</span> +pf.replace( <span class="string">' '</span>,<span class="string">'%20'</span> )).<span class="built_in">read</span>()); <span class="built_in">print</span>( <span class="string">'Please restart Sublime Text to finish installation'</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="推荐插件"><a href="#推荐插件" class="headerlink" title="推荐插件"></a>推荐插件</h3><table><thead><tr><th>插件</th><th>描述</th></tr></thead><tbody><tr><td>Emmet</td><td>大名鼎鼎，大大提高开发效率</td></tr><tr><td>BracketHighlighter</td><td>高亮显示匹配的括号、引号和标签</td></tr><tr><td>HTML-CSS-JS Prettify</td><td>node.js环境下，代码格式化(cmd + shift + h)</td></tr><tr><td>ColorPicker</td><td>调色盘(cmd+shift+c)</td></tr><tr><td>SideBarEnhancements</td><td>侧边栏增强</td></tr><tr><td>sublime tmpl</td><td>快速模板(control+option+h/c/j/p)</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Sublime </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP单双引号区别</title>
      <link href="/2017/03/27/PHP%E5%8D%95%E5%8F%8C%E5%BC%95%E5%8F%B7%E5%8C%BA%E5%88%AB/"/>
      <url>/2017/03/27/PHP%E5%8D%95%E5%8F%8C%E5%BC%95%E5%8F%B7%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<ul><li>单引号内字段不进行解释，直接输出。</li><li>双引号内字段会经过编译器解释，然后再当作HTML代码输出。</li></ul><p>双引号内部变量会解析,单引号则不解析。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$abc = <span class="string">'my name is Tom'</span>;</span><br><span class="line"><span class="keyword">echo</span> $abc; <span class="comment">//结果是:my name is Tom</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'$abc'</span>; <span class="comment">//结果是:$abc</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"$abc"</span>; <span class="comment">//结果是:my name is Tom</span></span><br></pre></td></tr></table></figure></p><p>建议 PHP 引号使用原则：</p><ol><li>纯字符串最外层用单引号。</li><li>包含变量时最外层用双引号。</li><li>包含特殊符号(如换行符\n)时最外层用双引号。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP基础3</title>
      <link href="/2017/03/27/PHP%E5%9F%BA%E7%A1%803/"/>
      <url>/2017/03/27/PHP%E5%9F%BA%E7%A1%803/</url>
      
        <content type="html"><![CDATA[<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>&#123; </span><br><span class="line">  <span class="comment">/* 成员变量 */</span> </span><br><span class="line">  <span class="keyword">var</span> $url; </span><br><span class="line">  <span class="keyword">var</span> $title; </span><br><span class="line">   </span><br><span class="line">  <span class="comment">/* 成员函数 */</span> </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setUrl</span><span class="params">($par)</span></span>&#123; </span><br><span class="line">     <span class="keyword">$this</span>-&gt;url = $par; </span><br><span class="line">  &#125; </span><br><span class="line">   </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getUrl</span><span class="params">()</span></span>&#123; </span><br><span class="line">     <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;url;</span><br><span class="line">  &#125; </span><br><span class="line">   </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setTitle</span><span class="params">($par)</span></span>&#123; </span><br><span class="line">     <span class="keyword">$this</span>-&gt;title = $par; </span><br><span class="line">  &#125; </span><br><span class="line">   </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getTitle</span><span class="params">()</span></span>&#123; </span><br><span class="line">     <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;title; </span><br><span class="line">  &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">$google = <span class="keyword">new</span> Site; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用成员函数，设置标题和URL </span></span><br><span class="line">$google-&gt;setTitle( <span class="string">"Google 搜索"</span> ); </span><br><span class="line">$google-&gt;setUrl( <span class="string">'www.google.com'</span> ); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用成员函数，获取标题和URL  </span></span><br><span class="line">$google-&gt;getTitle(); </span><br><span class="line">$google-&gt;getUrl(); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>PHP 使用关键字 extends 来继承一个类，PHP 不支持多继承，格式如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 代码部分</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h3><p>如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。</p><h3 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h3><p>PHP 对属性或方法的访问控制，是通过在前面添加关键字 public（公有），protected（受保护）或 private（私有）来实现的。类属性如果用 var 定义，则被视为公有。类方法如果没有设置这些关键字，则默认为公有。</p><ul><li>public（公有）：公有的类成员可以在任何地方被访问。</li><li>protected（受保护）：受保护的类成员则可以被其自身以及其子类和父类访问。</li><li>private（私有）：私有的类成员则只能被其定义所在的类访问。</li></ul><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>使用接口（interface），可以指定某个类必须实现哪些方法，但不需要定义这些方法的具体内容。<br>接口是通过 interface 关键字来定义的，就像定义一个标准的类一样，但其中定义所有的方法都是空的。<br>接口中定义的所有方法都必须是公有，这是接口的特性。<br>要实现一个接口，使用 implements 操作符。类中必须实现接口中定义的所有方法，否则会报一个致命错误。类可以实现多个接口，用逗号来分隔多个接口的名称。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 声明一个'iTemplate'接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">iTemplate</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setVariable</span><span class="params">($name, $var)</span></span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getHtml</span><span class="params">($template)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Template</span> <span class="keyword">implements</span> <span class="title">iTemplate</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $vars = <span class="keyword">array</span>();</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setVariable</span><span class="params">($name, $var)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;vars[$name] = $var;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getHtml</span><span class="params">($template)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="keyword">$this</span>-&gt;vars <span class="keyword">as</span> $name =&gt; $value) &#123;</span><br><span class="line">            $template = str_replace(<span class="string">'&#123;'</span> . $name . <span class="string">'&#125;'</span>, $value, $template);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>任何一个类，如果它里面至少有一个方法是被声明为抽象的，那么这个类就必须被声明为抽象的。<br>定义为抽象的类不能被实例化。<br>被定义为抽象的方法只是声明了其调用方式（参数），不能定义其具体的功能实现。<br>继承一个抽象类的时候，子类必须定义父类中的所有抽象方法；另外，这些方法的访问控制必须和父类中一样（或者更为宽松）。方法的调用方式必须匹配，即类型和所需参数数量必须一致。例如，子类定义了一个可选参数，而父类抽象方法的声明里没有，则两者的声明并无冲突。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"> <span class="comment">// 强制要求子类定义这些方法</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getValue</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">prefixValue</span><span class="params">($prefix)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 普通方法（非抽象方法）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">printOut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">print</span> <span class="keyword">$this</span>-&gt;getValue() . PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="static-关键字"><a href="#static-关键字" class="headerlink" title="static 关键字"></a>static 关键字</h3><p>声明类属性或方法为 static(静态)，就可以不实例化类而直接访问。<br>静态属性不能通过一个类已实例化的对象来访问（但静态方法可以）。<br>由于静态方法不需要通过对象即可调用，所以伪变量 $this 在静态方法中不可用。<br>静态属性不可以由对象通过 -&gt; 操作符来访问。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> $my_static = <span class="string">'foo'</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">staticValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">self</span>::$my_static;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> Foo::$my_static; <span class="comment">// 'foo'</span></span><br><span class="line">$foo = <span class="keyword">new</span> Foo();</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> $foo-&gt;staticValue(); <span class="comment">// 'foo'</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="Final-关键字"><a href="#Final-关键字" class="headerlink" title="Final 关键字"></a>Final 关键字</h3><p>PHP5 新增了一个 final 关键字。如果父类中的方法被声明为 final，则子类无法覆盖该方法。如果一个类被声明为 final，则不能被继承。</p><h3 id="调用父类构造方法"><a href="#调用父类构造方法" class="headerlink" title="调用父类构造方法"></a>调用父类构造方法</h3><p>PHP 不会在子类的构造方法中自动的调用父类的构造方法。要执行父类的构造方法，需要在子类的构造方法中调用 parent::__construct() 。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseClass</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">print</span> <span class="string">"BaseClass 类中构造方法"</span> . PHP_EOL;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">BaseClass</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">parent</span>::__construct();  <span class="comment">// 子类构造方法不能自动调用父类的构造方法</span></span><br><span class="line">       <span class="keyword">print</span> <span class="string">"SubClass 类中构造方法"</span> . PHP_EOL;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OtherSubClass</span> <span class="keyword">extends</span> <span class="title">BaseClass</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 继承 BaseClass 的构造方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 BaseClass 构造方法</span></span><br><span class="line">$obj = <span class="keyword">new</span> BaseClass();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 BaseClass、SubClass 构造方法</span></span><br><span class="line">$obj = <span class="keyword">new</span> SubClass();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 BaseClass 构造方法</span></span><br><span class="line">$obj = <span class="keyword">new</span> OtherSubClass();</span><br></pre></td></tr></table></figure></p><p>输出如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BaseClass 类中构造方法</span><br><span class="line">BaseClass 类中构造方法</span><br><span class="line">SubClass 类中构造方法</span><br><span class="line">BaseClass 类中构造方法</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP基础2</title>
      <link href="/2017/03/27/PHP%E5%9F%BA%E7%A1%802/"/>
      <url>/2017/03/27/PHP%E5%9F%BA%E7%A1%802/</url>
      
        <content type="html"><![CDATA[<h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>PHP 命名空间(namespace)是在PHP 5.3中加入的，可以解决以下两类问题：</p><ul><li>用户编写的代码与PHP内部的类/函数/常量或第三方类/函数/常量之间的名字冲突。</li><li>为很长的标识符名称创建一个别名（或简短）的名称，提高源代码的可读性。</li></ul><h3 id="定义命名空间"><a href="#定义命名空间" class="headerlink" title="定义命名空间"></a>定义命名空间</h3><p>默认情况下，所有常量、类和函数名都放在全局空间下，就和PHP支持命名空间之前一样。<br>命名空间通过关键字namespace 来声明。可以在同一个文件中定义不同的命名空间代码。<br>如果一个文件中包含命名空间，它必须在其它所有代码之前声明命名空间。在声明命名空间之前唯一合法的代码是用于定义源文件编码方式的 declare 语句。所有非 PHP 代码包括<strong> 空白符 </strong>都不能出现在命名空间的声明之前。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">declare</span>(encoding=<span class="string">'UTF-8'</span>); <span class="comment">//定义多个命名空间和不包含在命名空间中的代码</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyProject</span> &#123;</span><br><span class="line"><span class="title">const</span> <span class="title">CONNECT_OK</span> = 1;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connection</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">connect</span><span class="params">()</span> </span>&#123; <span class="comment">/* ... */</span>  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123; // 全局代码</span><br><span class="line"><span class="title">session_start</span>();</span><br><span class="line">$a = MyProject\connect();</span><br><span class="line"><span class="keyword">echo</span> MyProject\Connection::start();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>以下代码会出现语法错误：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyProject</span>; <span class="comment">// 命名空间前出现了“&lt;html&gt;”会致命错误 -　命名空间必须是程序脚本的第一条语句!</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="子命名空间"><a href="#子命名空间" class="headerlink" title="子命名空间"></a>子命名空间</h3><p>与目录和文件的关系很像，PHP 命名空间也允许指定层次化的命名空间的名称。因此，命名空间的名字可以使用分层次的方式定义：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyProject</span>\<span class="title">Sub</span>\<span class="title">Level</span>;  <span class="comment">//声明分层次的单个命名空间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> CONNECT_OK = <span class="number">1</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connection</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Connect</span><span class="params">()</span> </span>&#123; <span class="comment">/* ... */</span>  &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>上面的例子创建了常量 MyProject\Sub\Level\CONNECT_OK，类 MyProject\Sub\Level\Connection 和函数 MyProject\Sub\Level\Connect。</p><h3 id="别名-导入"><a href="#别名-导入" class="headerlink" title="别名/导入"></a>别名/导入</h3><p>PHP 命名空间支持 有两种使用别名或导入方式：为类使用别名、为命名空间使用别名。注意PHP不支持导入函数或常量。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">foo</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">My</span>\<span class="title">Full</span>\<span class="title">Classname</span> <span class="title">as</span> <span class="title">Another</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面的例子与 use My\Full\NSname as NSname 相同</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">My</span>\<span class="title">Full</span>\<span class="title">NSname</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入一个全局类</span></span><br><span class="line"><span class="keyword">use</span> \<span class="title">ArrayObject</span>;</span><br><span class="line"></span><br><span class="line">$obj = <span class="keyword">new</span> <span class="keyword">namespace</span>\<span class="title">Another</span>; <span class="comment">// 实例化 foo\Another 对象</span></span><br><span class="line">$obj = <span class="keyword">new</span> Another; <span class="comment">// 实例化 My\Full\Classname　对象</span></span><br><span class="line">NSname\subns\func(); <span class="comment">// 调用函数 My\Full\NSname\subns\func</span></span><br><span class="line">$a = <span class="keyword">new</span> ArrayObject(<span class="keyword">array</span>(<span class="number">1</span>)); <span class="comment">// 实例化 ArrayObject 对象</span></span><br><span class="line"><span class="comment">// 如果不使用 "use \ArrayObject" ，则实例化一个 foo\ArrayObject 对象</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="后备全局函数-常量"><a href="#后备全局函数-常量" class="headerlink" title="后备全局函数/常量"></a>后备全局函数/常量</h3><p>在一个命名空间中，当 PHP 遇到一个非限定的类、函数或常量名称时，它使用不同的优先策略来解析该名称。</p><ul><li>类名称总是解析到当前命名空间中的名称。因此在访问不包含在命名空间中的类名称时，必须使用完全限定名称。</li><li>对于函数和常量来说，如果当前命名空间中不存在该函数或常量，PHP 会退而使用全局空间中的函数或常量。</li></ul><h3 id="命名空间顺序"><a href="#命名空间顺序" class="headerlink" title="命名空间顺序"></a>命名空间顺序</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">A</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">B</span>\<span class="title">D</span>, <span class="title">C</span>\<span class="title">E</span> <span class="title">as</span> <span class="title">F</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数调用</span></span><br><span class="line"></span><br><span class="line">foo();      <span class="comment">// 首先尝试调用定义在命名空间"A"中的函数foo()</span></span><br><span class="line">            <span class="comment">// 再尝试调用全局函数 "foo"</span></span><br><span class="line"></span><br><span class="line">\foo();     <span class="comment">// 调用全局空间函数 "foo" </span></span><br><span class="line"></span><br><span class="line">my\foo();   <span class="comment">// 调用定义在命名空间"A\my"中函数 "foo" </span></span><br><span class="line"></span><br><span class="line">F();        <span class="comment">// 首先尝试调用定义在命名空间"A"中的函数 "F" </span></span><br><span class="line">            <span class="comment">// 再尝试调用全局函数 "F"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类引用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> B();    <span class="comment">// 创建命名空间 "A" 中定义的类 "B" 的一个对象</span></span><br><span class="line">            <span class="comment">// 如果未找到，则尝试自动装载类 "A\B"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> D();    <span class="comment">// 使用导入规则，创建命名空间 "B" 中定义的类 "D" 的一个对象</span></span><br><span class="line">            <span class="comment">// 如果未找到，则尝试自动装载类 "B\D"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> F();    <span class="comment">// 使用导入规则，创建命名空间 "C" 中定义的类 "E" 的一个对象</span></span><br><span class="line">            <span class="comment">// 如果未找到，则尝试自动装载类 "C\E"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> \B();   <span class="comment">// 创建定义在全局空间中的类 "B" 的一个对象</span></span><br><span class="line">            <span class="comment">// 如果未发现，则尝试自动装载类 "B"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> \D();   <span class="comment">// 创建定义在全局空间中的类 "D" 的一个对象</span></span><br><span class="line">            <span class="comment">// 如果未发现，则尝试自动装载类 "D"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> \F();   <span class="comment">// 创建定义在全局空间中的类 "F" 的一个对象</span></span><br><span class="line">            <span class="comment">// 如果未发现，则尝试自动装载类 "F"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用另一个命名空间中的静态方法或命名空间函数</span></span><br><span class="line"></span><br><span class="line">B\foo();    <span class="comment">// 调用命名空间 "A\B" 中函数 "foo"</span></span><br><span class="line"></span><br><span class="line">B::foo();   <span class="comment">// 调用命名空间 "A" 中定义的类 "B" 的 "foo" 方法</span></span><br><span class="line">            <span class="comment">// 如果未找到类 "A\B" ，则尝试自动装载类 "A\B"</span></span><br><span class="line"></span><br><span class="line">D::foo();   <span class="comment">// 使用导入规则，调用命名空间 "B" 中定义的类 "D" 的 "foo" 方法</span></span><br><span class="line">            <span class="comment">// 如果类 "B\D" 未找到，则尝试自动装载类 "B\D"</span></span><br><span class="line"></span><br><span class="line">\B\foo();   <span class="comment">// 调用命名空间 "B" 中的函数 "foo" </span></span><br><span class="line"></span><br><span class="line">\B::foo();  <span class="comment">// 调用全局空间中的类 "B" 的 "foo" 方法</span></span><br><span class="line">            <span class="comment">// 如果类 "B" 未找到，则尝试自动装载类 "B"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前命名空间中的静态方法或函数</span></span><br><span class="line"></span><br><span class="line">A\B::foo();   <span class="comment">// 调用命名空间 "A\A" 中定义的类 "B" 的 "foo" 方法</span></span><br><span class="line">              <span class="comment">// 如果类 "A\A\B" 未找到，则尝试自动装载类 "A\A\B"</span></span><br><span class="line"></span><br><span class="line">\A\B::foo();  <span class="comment">// 调用命名空间 "A\B" 中定义的类 "B" 的 "foo" 方法</span></span><br><span class="line">              <span class="comment">// 如果类 "A\B" 未找到，则尝试自动装载类 "A\B"</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac下速查文件</title>
      <link href="/2017/03/26/Mac%E4%B8%8B%E9%80%9F%E6%9F%A5%E6%96%87%E4%BB%B6/"/>
      <url>/2017/03/26/Mac%E4%B8%8B%E9%80%9F%E6%9F%A5%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>对于用 Mac 的小伙伴来说，这是一个非常实用的技能，我花了些时间研究了下，现在写下我的心得。<br>网上一查，主要有两种方法，首先请打开你的终端。</p><h4 id="通过Find命令搜索文件"><a href="#通过Find命令搜索文件" class="headerlink" title="通过Find命令搜索文件"></a>通过Find命令搜索文件</h4><p>find命令来自unix，OS X 和 Linux 系统同样支持该命令。find最基本的语法是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find 文件路径 选项 目标文件</span><br></pre></td></tr></table></figure></p><p>比如你可以通过以下命令全局搜索名字是 php.ini 的文件:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name  <span class="string">"php.ini"</span></span><br></pre></td></tr></table></figure></p><p>也可以在指定的文件夹中查找以 php 开头的文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find ~/Library/ -name <span class="string">"php*"</span></span><br></pre></td></tr></table></figure></p><h4 id="通过mdfind命令搜索文件"><a href="#通过mdfind命令搜索文件" class="headerlink" title="通过mdfind命令搜索文件"></a>通过mdfind命令搜索文件</h4><p>mdfind命令就是Spotlight功能的终端界面，mdfind命令非常迅速。最基本的使用方法是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mdfind -name 文件名</span><br></pre></td></tr></table></figure></p><p>和find一样请务必加上 -name 选项，不加就会搜出一大堆文件。</p><p>亲自试了一下这两个方法，速度上 mdfind 快 find 几条街，所以强烈推荐使用 mdfind 。但是使用<code>mdfind -name 文件名</code>和你用Spotlight终端一样是无法搜索被隐藏的文件的。如果你需要搜索隐藏文件，请在终端输入<code>sudo mdfind -name 文件名</code>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP基础</title>
      <link href="/2017/03/26/PHP%E5%9F%BA%E7%A1%80/"/>
      <url>/2017/03/26/PHP%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>PHP（全称：Hypertext Preprocessor，即：超文本预处理器”）是一种在服务器上执行的通用开源脚本语言。作为一位 PHP 初学者，决定将一些知识点记录下来。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="变量-1"><a href="#变量-1" class="headerlink" title="变量"></a>变量</h3><p>变量以 $ 符号开始，后面跟着变量的名称。<br>变量名必须以字母或者下划线字符开始，只能包含字母数字字符以及下划线。<br>PHP变量名和语句一样都是区分大小写的。<br>PHP 有四种不同的变量作用域：local、global、static、parameter。<br>global 关键字用于在函数内部访问全局变量。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$x=<span class="number">5</span>;</span><br><span class="line">$y=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">global</span> $x,$y;</span><br><span class="line">$y=$x+$y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myTest();</span><br><span class="line"><span class="keyword">echo</span> $y; <span class="comment">// 输出 15</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>当一个函数完成时，它的所有变量通常都会被删除。然而，有时候希望某个局部变量不要被删除。<br>static 关键字用于使被标记的变量不被删除。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> $x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">echo</span> $x;</span><br><span class="line">$x++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myTest();</span><br><span class="line">myTest();</span><br><span class="line">myTest();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="超级全局变量"><a href="#超级全局变量" class="headerlink" title="超级全局变量"></a>超级全局变量</h3><p>超级全局变量（superglobals）在PHP 4.1.0之后被启用, 是PHP系统中自带的变量，在一个脚本的全部作用域中都可用。<br>PHP 超级全局变量列表如下:</p><ul><li>$GLOBALS  一个包含了全部变量的全局组合数组，变量的名字就是数组的键。</li><li>$_SERVER  一个包含了诸如头信息(header)、路径(path)等信息的数组。</li><li>$_REQUEST  用于收集HTML表单提交的数据。</li><li>$_POST  应用于收集表单数据，在form标签的指定属性：”method=”post”。</li><li>$_GET  应用于收集表单数据，在form标签的指定属性：”method=”get”。</li><li>$_FILES</li><li>$_ENV</li><li>$_COOKIE</li><li>$_SESSION</li></ul><h3 id="魔术变量"><a href="#魔术变量" class="headerlink" title="魔术变量"></a>魔术变量</h3><p>有八个魔术常量它们的值随着它们在代码中的位置改变而改变。</p><ul><li><strong>LINE</strong> 文件中的当前行号。</li><li><strong>FILE</strong> 文件的完整路径和文件名。如果用在被包含文件中，则返回被包含的文件名。</li><li><strong>DIR</strong> 文件所在的目录。如果用在被包括文件中，则返回被包括的文件所在的目录。</li><li><strong>FUNCTION</strong> 函数名称。</li><li><strong>CLASS</strong> 类的名称。</li><li><strong>TRAIT</strong> Trait 的名字。</li><li><strong>METHOD</strong> 类的方法名。</li><li><strong>NAMESPACE</strong> 当前命名空间的名称。</li></ul><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>一个常量由英文字母、下划线、和数字组成,但数字不能作为首字母出现。常量名不需要加 $ 修饰符。常量在定义后，默认是全局变量。<br>设置常量，使用 define() 函数，函数语法如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">define ( string $name , mixed $value [, bool $case_insensitive = <span class="keyword">false</span> ] )</span><br></pre></td></tr></table></figure></p><p>该函数有三个参数:</p><ul><li>name：必选参数，常量名称，即标志符。</li><li>value：必选参数，常量的值。</li><li>case_insensitive ：可选参数，如果设置为 TRUE，该常量则大小写不敏感。默认是大小写敏感的。</li></ul><h2 id="echo-和-print-语句"><a href="#echo-和-print-语句" class="headerlink" title="echo 和 print 语句"></a>echo 和 print 语句</h2><p>两者都是语言结构，输出的字符串可以包含 HTML 标签。<br>echo 和 print 区别:</p><ul><li>echo 可以输出一个或多个字符串</li><li>print 只允许输出一个字符串，返回值总为 1</li></ul><p>提示：echo 输出的速度比 print 快， echo 没有返回值，print有返回值1。</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>PHP中的函数不支持重载。<br>函数名、方法名、类名不区分大小写，但推荐使用与定义时相同的名字。<br>任何的默认参数应该放在任何的非默认参数的<strong> 右侧 </strong>。<br>自PHP5起，默认值可以通过引用传递。<br>从函数返回一个引用，必须在函数声明和指派返回值给一个变量时都使用引用运算符 &amp; ：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> &amp; <span class="title">returns_reference</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $someref ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$newref =&amp; returns_reference ();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="可变函数"><a href="#可变函数" class="headerlink" title="可变函数"></a>可变函数</h3><p>PHP 支持可变函数的概念。这意味着如果一个变量名后有圆括号，PHP 将寻找与变量的值同名的函数，并且尝试执行它。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">foo</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span>  <span class="string">"In foo()&lt;br /&gt;\n"</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">bar</span> <span class="params">( $arg  =  <span class="string">''</span> )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span>  <span class="string">"In bar(); argument was ' $arg '.&lt;br /&gt;\n"</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$func  =  <span class="string">'foo'</span> ;</span><br><span class="line">$func ();         <span class="comment">// This calls foo()</span></span><br><span class="line"></span><br><span class="line">$func  =  <span class="string">'bar'</span> ;</span><br><span class="line">$func ( <span class="string">'test'</span> );   <span class="comment">// This calls bar()</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>replace方法</title>
      <link href="/2017/03/17/replace%E6%96%B9%E6%B3%95/"/>
      <url>/2017/03/17/replace%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>replace() 方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子字符串。<br>语法 <code>string.replace(searchvalue,newvalue)</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>searchvalue</td><td>必须。规定子字符串或要替换的模式的 RegExp 对象。</td></tr><tr><td>newvalue</td><td>必须。规定了替换文本或生成替换文本的函数。</td></tr></tbody></table><h2 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h2><p>执行一个全局替换, 忽略大小写:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"Mr Blue has a blue house and a blue car"</span>;</span><br><span class="line"><span class="keyword">var</span> n=str.replace(<span class="regexp">/blue/gi</span>, <span class="string">"red"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(n) <span class="comment">// Mr red has a red house and a red car</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><h2 id="newvalue-参数为函数"><a href="#newvalue-参数为函数" class="headerlink" title="newvalue 参数为函数"></a>newvalue 参数为函数</h2><p>newvalue 参数为字符串的情况很简单，但是该参数也可以为函数，该情况下使得 replace() 方法的功能得到巨大提升。 </p><p>下面这段代码等价于第一个例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n=str.replace(<span class="regexp">/blue/gi</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"red"</span>&#125;);</span><br></pre></td></tr></table></figure></p><p>上面代码中的匿名函数也可以接受参数，下面是该函数的参数(按参数先后排列)：</p><table><thead><tr><th>形参名</th><th>代表的值</th></tr></thead><tbody><tr><td>match</td><td>被匹配的<strong> 子字符串 </strong>。</td></tr><tr><td>$1,$2,…</td><td>如果 searchvalue 是正则表达式，则代表第n个小括号匹配的字符串。</td></tr><tr><td>offset</td><td>匹配到的子字符串在原字符串中的偏移量。（比如，如果原字符串是“abcd”，匹配到的子字符串时“bc”，那么这个参数将是1）</td></tr><tr><td>string</td><td>被匹配的<strong> 原字符串 </strong>。</td></tr></tbody></table><p>以下例子是很好的说明，代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tpl = <span class="string">'Hello, my name is &lt;%name%&gt;, I am &lt;%age%&gt; years old.'</span></span><br><span class="line"><span class="keyword">var</span> para = <span class="string">''</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tplEngine</span>(<span class="params">tpl</span>) </span>&#123;</span><br><span class="line">    tpl.replace(<span class="regexp">/&lt;%([^%&gt;]+)?%&gt;/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">a, b, c, d</span>) </span>&#123;</span><br><span class="line">        para += <span class="string">'第一个参数：'</span> + a + <span class="string">'， 第二个参数：'</span> + b + <span class="string">'，第三个参数：'</span> + c + <span class="string">'， 第四个参数：'</span> + d + <span class="string">'\n'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> para</span><br><span class="line">&#125;</span><br><span class="line">tplEngine(tpl)</span><br><span class="line"><span class="built_in">console</span>.log(para)</span><br><span class="line"><span class="comment">// 第一个参数：&lt;%name%&gt;, 第二个参数：name，第三个参数：18, 第四个参数：Hello, my name is &lt;%name%&gt;, I am &lt;%age%&gt; years old.</span></span><br><span class="line"><span class="comment">// 第一个参数：&lt;%age%&gt;, 第二个参数：age，第三个参数：33, 第四个参数：Hello, my name is &lt;%name%&gt;, I am &lt;%age%&gt; years old.</span></span><br></pre></td></tr></table></figure></p><p>这样每个参数对应的值就很明显了，并且我们还可以看到：如果 searchvalue 是正则表达式，并且其为全局匹配模式，那么该函数将被多次调用，每次匹配都会被调用。</p><h2 id="应用案例"><a href="#应用案例" class="headerlink" title="应用案例"></a>应用案例</h2><p>利用上述理论基础，我们可以自己做一个简易的模板引擎，代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'Tom'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">28</span>,</span><br><span class="line">    <span class="string">'occupation'</span>: <span class="string">'doctor'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tpl = <span class="string">'Hello, my name is &lt;%name%&gt;, I am &lt;%age%&gt; years old. My job is &lt;%occupation%&gt;.'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tplEngine</span>(<span class="params">tpl, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> text = tpl.replace(<span class="regexp">/&lt;%([^%&gt;]+)?%&gt;/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data[b]</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> text</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> text = tplEngine(tpl, data)</span><br><span class="line"><span class="built_in">console</span>.log(text)</span><br><span class="line"><span class="comment">// Hello, my name is Tom, I am 28 years old. My job is doctor.</span></span><br></pre></td></tr></table></figure></p><p>强化后的模板引擎如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = [&#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'Tom'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">28</span>,</span><br><span class="line">    <span class="string">'occupation'</span>: <span class="string">'doctor'</span>,</span><br><span class="line">    <span class="string">'grade'</span>: &#123;</span><br><span class="line">        <span class="string">'a'</span>: <span class="string">'A'</span>,</span><br><span class="line">        <span class="string">'b'</span>: <span class="string">'B'</span>,</span><br><span class="line">        <span class="string">'c'</span>: <span class="string">'C'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'fruits'</span>: [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'enanas'</span>]</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'Alice'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="string">'occupation'</span>: <span class="string">'student'</span>,</span><br><span class="line">    <span class="string">'grade'</span>: &#123;</span><br><span class="line">        <span class="string">'a'</span>: <span class="string">'A'</span>,</span><br><span class="line">        <span class="string">'b'</span>: <span class="string">'B'</span>,</span><br><span class="line">        <span class="string">'c'</span>: <span class="string">'C'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'fruits'</span>: [<span class="string">'watermelon'</span>, <span class="string">'orange'</span>, <span class="string">'pear'</span>]</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'Haren'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">32</span>,</span><br><span class="line">    <span class="string">'occupation'</span>: <span class="string">'teacher'</span>,</span><br><span class="line">    <span class="string">'grade'</span>: &#123;</span><br><span class="line">        <span class="string">'a'</span>: <span class="string">'A'</span>,</span><br><span class="line">        <span class="string">'b'</span>: <span class="string">'B'</span>,</span><br><span class="line">        <span class="string">'c'</span>: <span class="string">'C'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'fruits'</span>: [<span class="string">'apple'</span>, <span class="string">'grape'</span>, <span class="string">'pear'</span>]</span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tplA = <span class="string">'NO &lt;@1@&gt; &lt;@2@&gt;, my name is &lt;%name%&gt;, I am &lt;%age%&gt; years old. My job is &lt;%occupation%&gt;.The Grade of My  test is &lt;% grade.a %&gt;. My favorite fruits are &lt;%fruits%&gt;.\n'</span></span><br><span class="line"><span class="keyword">var</span> tplB = <span class="string">'NO &lt;@1@&gt; &lt;@2@&gt;, my name is &lt;%name%&gt;, I am &lt;%age%&gt; years old. My job is &lt;%occupation%&gt;.The Grade of My  test is &lt;% grade.b %&gt;. My favorite fruits are &lt;%fruits%&gt;.\n'</span></span><br><span class="line"><span class="keyword">var</span> tplC = <span class="string">'NO &lt;@1@&gt; &lt;@2@&gt;, my name is &lt;%name%&gt;, I am &lt;%age%&gt; years old. My job is &lt;%occupation%&gt;.The Grade of My  test is &lt;% grade.c %&gt;. My favorite fruits are &lt;%fruits%&gt;.\n'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tpl = [tplA, tplB, tplC]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tplEngine</span>(<span class="params">tpl, obj,variate1,variate2,separator</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (variate1 || variate1 === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> tpl = tpl.replace(<span class="regexp">/&lt;@1@&gt;/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> variate1</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (variate2 || variate2 === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> tpl = tpl.replace(<span class="regexp">/&lt;@2@&gt;/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> variate2</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!separator &amp;&amp; separator !== <span class="number">0</span>) &#123;</span><br><span class="line">        separator = <span class="string">','</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> tpl = tpl.replace(<span class="regexp">/&lt;%([^%&gt;]+)?%&gt;/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> b = b.trim()</span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/\./</span>.test(b)) &#123;</span><br><span class="line">            <span class="keyword">var</span> arr = b.split(<span class="string">'.'</span>)</span><br><span class="line">            <span class="keyword">if</span> (obj[arr[<span class="number">0</span>]][arr[<span class="number">1</span>]] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> obj[arr[<span class="number">0</span>]][arr[<span class="number">1</span>]].join(separator)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> obj[arr[<span class="number">0</span>]][arr[<span class="number">1</span>]]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (obj[b] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> obj[b].join(separator)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> obj[b]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> tpl</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++) &#123;</span><br><span class="line">        str += tplEngine(tpl[i], data[i],i,j)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS正则表达式2</title>
      <link href="/2017/03/16/JS%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F2/"/>
      <url>/2017/03/16/JS%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F2/</url>
      
        <content type="html"><![CDATA[<h3 id="RegExp-对象属性"><a href="#RegExp-对象属性" class="headerlink" title="RegExp 对象属性"></a>RegExp 对象属性</h3><table><thead><tr><th>属性</th><th>描述    </th></tr></thead><tbody><tr><td>global</td><td>RegExp 对象是否具有标志 g</td></tr><tr><td>ignoreCase</td><td>RegExp 对象是否具有标志 i</td></tr><tr><td>multiline</td><td>RegExp 对象是否具有标志 m</td></tr><tr><td>source</td><td>正则表达式的源文本</td></tr><tr><td>lastIndex</td><td>一个整数，标示开始下一次匹配的字符位置</td></tr></tbody></table><p>lastIndex 语法 <code>RegExpObject.lastIndex</code><br>该属性存放一个整数，它声明的是上一次匹配文本之后的第一个字符的位置，该属性是可读写。<br>注意：不具有标志 g 和不表示全局模式的 RegExp 对象不能使用 lastIndex 属性。如果在成功地匹配了某个字符串之后就开始检索另一个新的字符串，需要手动地把这个属性设置为 0。<br><a id="more"></a></p><h3 id="RegExp-对象方法"><a href="#RegExp-对象方法" class="headerlink" title="RegExp 对象方法"></a>RegExp 对象方法</h3><table><thead><tr><th>方法</th><th>描述</th><th>语法</th></tr></thead><tbody><tr><td>complie</td><td>重新编译正则表达式</td><td>RegExpObject.complie(regexp)</td></tr><tr><td>test</td><td>检索字符串中的指定值，返回 true 或 false</td><td>RegExpObject.test(string)</td></tr><tr><td>exec</td><td>检索字符串中指定的值，返回找到的值，并确定其位置，详见<a href="https://hangermeng.top/2018/05/10/exec%E6%96%B9%E6%B3%95/">exec方法</a></td><td>RegExpObject.exec(string)</td></tr></tbody></table><h3 id="支持正则表达式的-String-对象的方法"><a href="#支持正则表达式的-String-对象的方法" class="headerlink" title="支持正则表达式的 String 对象的方法"></a>支持正则表达式的 String 对象的方法</h3><table><thead><tr><th>方法</th><th>描述    </th></tr></thead><tbody><tr><td>search</td><td>检索与正则表达式相匹配的值    ，详见<a href="https://hangermeng.top/2017/03/16/String%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95/">String对象方法</a></td></tr><tr><td>match</td><td>找到一个或多个正则表达式的匹配，详见<a href="https://hangermeng.top/2018/05/10/match%E6%96%B9%E6%B3%95/">match方法</a></td></tr><tr><td>replace</td><td>替换与正则表达式匹配的子串，详见<a href="https://hangermeng.top/2017/03/17/replace%E6%96%B9%E6%B3%95/">replace方法</a></td></tr><tr><td>split</td><td>把字符串分割为字符串数组，详见<a href="https://hangermeng.top/2017/03/16/String%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95/">String对象方法</a></td></tr></tbody></table><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>利用小括号将正则表达式分组，用 $1、$2… 代表每个组。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="string">"2016-11-25"</span>.replace(<span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/g</span>,<span class="string">'$2\/$3\/$1'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(date) <span class="comment">// 11/25/2016</span></span><br></pre></td></tr></table></figure></p><h3 id="贪婪模式与非贪婪模式"><a href="#贪婪模式与非贪婪模式" class="headerlink" title="贪婪模式与非贪婪模式"></a>贪婪模式与非贪婪模式</h3><p>贪婪模式下会比非贪婪模式多匹配字符，使用<code>?</code>表明是非贪婪模式。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="string">"12345678"</span>.replace(<span class="regexp">/\d&#123;3,6&#125;/g</span>,<span class="string">'X'</span>) <span class="comment">// 贪婪模式取6个数字</span></span><br><span class="line"><span class="built_in">console</span>.log(num) <span class="comment">//  "X78"</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="string">"12345678"</span>.replace(<span class="regexp">/\d&#123;3,6&#125;?/g</span>,<span class="string">'X'</span>) <span class="comment">//非贪婪模式取3个数字</span></span><br><span class="line"><span class="built_in">console</span>.log(num) <span class="comment">// "XX78"</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> RegExp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS正则表达式</title>
      <link href="/2017/03/16/JS%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2017/03/16/JS%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="RegExp-对象"><a href="#RegExp-对象" class="headerlink" title="RegExp 对象"></a>RegExp 对象</h3><p>RegExp(regular expression) 对象表示正则表达式，它是对字符串执行模式匹配的强大工具。</p><h3 id="创建-RegExp-对象"><a href="#创建-RegExp-对象" class="headerlink" title="创建 RegExp 对象"></a>创建 RegExp 对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(pattern,modifiers);</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/pattern/m</span>odifiers;</span><br></pre></td></tr></table></figure><ul><li>pattern(模式) 描述了表达式的模式</li><li>modifiers(修饰符) 用于指定全局匹配、区分大小写的匹配和多行匹配</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 注意一个是引号包裹，一个是斜杠包裹，特殊字符需要转义 */</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="built_in">RegExp</span>(<span class="string">"^qq\.com$"</span>)</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/ ^qq\.com$ /</span></span><br></pre></td></tr></table></figure><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><table><thead><tr><th>修饰符</th><th>描述</th></tr></thead><tbody><tr><td>i</td><td>执行对大小写不敏感的匹配</td></tr><tr><td>g</td><td>执行全局匹配</td></tr><tr><td>m</td><td>执行多行匹配</td></tr></tbody></table><h3 id="方括号"><a href="#方括号" class="headerlink" title="方括号"></a>方括号</h3><p>方括号用于查找某个范围内的字符：</p><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>[mhg]</td><td>查找方括号之间的任何字符</td></tr><tr><td>[^mhg]</td><td>查找任何不在方括号之间的字符</td></tr><tr><td>[a-z]</td><td>查找任何从小写 a 到小写 z 的字符</td></tr><tr><td>(mh&#124;g&#124;abc)</td><td>查找任何指定的选项</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"Is this all there is?"</span>;</span><br><span class="line"><span class="keyword">var</span> patt1 = <span class="regexp">/[a-h]/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(patt1)); <span class="comment">// h,a,h,e,e</span></span><br><span class="line"><span class="keyword">var</span> patt2 = <span class="regexp">/(Is|is)/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(patt2)); <span class="comment">// Is,is,is</span></span><br></pre></td></tr></table></figure><h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><p>元字符（Metacharacter）是拥有特殊含义的字符(以下省略部分生僻元字符)：</p><table><thead><tr><th>元字符</th><th>描述</th></tr></thead><tbody><tr><td>.</td><td>所有单个字符，除了换行和行结束符</td></tr><tr><td>\w</td><td>单词字符</td></tr><tr><td>\W</td><td>非单词字符</td></tr><tr><td>\d</td><td>数字字符</td></tr><tr><td>\D</td><td>非数字字符</td></tr><tr><td>\s</td><td>空白字符</td></tr><tr><td>\S</td><td>非空白字符</td></tr><tr><td>\b</td><td>单词边界</td></tr><tr><td>\B</td><td>非单词边界</td></tr><tr><td>\n</td><td>换行符</td></tr><tr><td>\r</td><td>回车符(与换行符的区别请戳<a href="https://hangermeng.top/2017/03/10/%E6%8D%A2%E8%A1%8C%E7%AC%A6%E5%92%8C%E5%9B%9E%E8%BD%A6%E7%AC%A6%E7%9A%84%E5%8C%BA%E5%88%AB/">这里</a>)</td></tr><tr><td>\xxx</td><td>以八进制数 xxx 规定的字符</td></tr><tr><td>\xdd</td><td>以十六进制数 dd 规定的字符</td></tr><tr><td>\uxxxx</td><td>以十六进制数 xxxx 规定的 Unicode 字符</td></tr></tbody></table><h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><table><thead><tr><th>量词</th><th>描述</th></tr></thead><tbody><tr><td>n+</td><td>&gt;=1(至少一个)</td></tr><tr><td>n*</td><td>&gt;=0(任意个) </td></tr><tr><td>n?</td><td>&lt;=1(至多一个) </td></tr><tr><td>n{X}</td><td>X个n </td></tr><tr><td>n{X,Y}</td><td>X至Y个n </td></tr><tr><td>n{X,}</td><td>至少X个n </td></tr><tr><td>n{0,X}</td><td>至多X个n</td></tr><tr><td>n$</td><td>结尾为 n 的字符串</td></tr><tr><td>^n</td><td>开头为 n 的字符串</td></tr><tr><td>?=n</td><td>其后紧接 n 的字符串</td></tr><tr><td>?!n</td><td>其后没有紧接 n 的字符串</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> RegExp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String对象方法</title>
      <link href="/2017/03/16/String%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95/"/>
      <url>/2017/03/16/String%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>讨论完<a href="https://hangermeng.top/2017/03/14/Array%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95/">Array对象的方法</a>，再来讨论一下String对象的方法，两者拥有部分相似的方法：concat()、indexOf()、lastIndexOf()、slice()、valueOf()。这里不再赘述。</p><h3 id="提取字符串"><a href="#提取字符串" class="headerlink" title="提取字符串"></a>提取字符串</h3><ul><li>substr()  语法<code>string.substr(start,length)</code>。如果start是负数，那么该参数声明从字符串的尾部开始算起的位置。如果 length 为 0 或负数，将返回一个空字符串。</li><li>substring()  语法<code>string.substring(start,end)</code>。使用 start 和 end 两者中的较小值作为子字符串的起始点。如果 start 或 end 为 NaN 或者负数，那么将其替换为0。</li></ul><p>substr()、substring()、slice() 三者都不改变原数组或字符串的值。</p><a id="more"></a><h3 id="字符串转数组"><a href="#字符串转数组" class="headerlink" title="字符串转数组"></a>字符串转数组</h3><ul><li>split() 把字符串分割为字符串数组。语法<code>string.split(separator,limit)</code>。返回的数组中的字串不包括 separator 自身。</li></ul><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>separator</td><td>可选。字符串或正则表达式，从该参数指定的地方分割 string Object。</td></tr><tr><td>limit</td><td>可选。该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。</td></tr></tbody></table><p><code>split(&quot;&quot;)</code> 会将 stringObject 中的每个字符之间都分割。<br><code>split()</code> 会返回完整的字符串，即不做处理。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"How are you doing today?"</span>;</span><br><span class="line"><span class="keyword">var</span> n=str.split(<span class="string">" "</span>); <span class="comment">// 注意这里的分隔符是空格</span></span><br><span class="line"><span class="built_in">console</span>.log(n) <span class="comment">// ["How", "are", "you", "doing", "today?"]</span></span><br></pre></td></tr></table></figure></p><h3 id="去除空格"><a href="#去除空格" class="headerlink" title="去除空格"></a>去除空格</h3><ul><li>trim() 去除字符串两边的空白，不改变原字符串。</li></ul><p>注意到该方法只能去除两边的空白，实际工作中我们可能还需要将多个空格合并为一个空格，需要自己拓展：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.ResetBlank = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">  <span class="keyword">var</span> regEx = <span class="regexp">/\s+/g</span>; </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.replace(regEx, <span class="string">' '</span>); </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h3><ul><li>toLowerCase() 把字符串转换为小写。</li><li>toUpperCase() 把字符串转换为大写。</li></ul><h3 id="检索字符与转码"><a href="#检索字符与转码" class="headerlink" title="检索字符与转码"></a>检索字符与转码</h3><ul><li>charAt() 返回在指定位置的字符。</li><li>charCodeAt() 返回在指定的位置的字符的 Unicode 编码。</li><li>formCharCode() 将 Unicode 编码转为字符。</li></ul><h3 id="字符串查找与替换"><a href="#字符串查找与替换" class="headerlink" title="字符串查找与替换"></a>字符串查找与替换</h3><ul><li>search() 查找正则表达式的匹配项的位置，返回一个数值。语法 <code>string.search(regexp)</code></li></ul><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>regexp</td><td>该参数可以是需要在 string 中检索的子串，也可以是需要检索的 RegExp 对象。</td></tr></tbody></table><p>返回 string 中第一个与 regexp 相匹配的子串的起始位置。如果没有找到任何匹配的子串，则返回 -1。要执行忽略大小写的检索，请追加标志 i。search() 方法不执行全局匹配，它将忽略标志 g。它同时忽略 regexp 的 lastIndex 属性，并且总是从字符串的开始进行检索，这意味着它总是返回 string 的第一个匹配的位置。</p><ul><li>match() 查找正则表达式的匹配，返回一个数组。详见<a href="https://hangermeng.top/2018/05/10/match%E6%96%B9%E6%B3%95/">match方法</a>。</li><li>replace() 在字符串中查找匹配的子串，并替换之。详见<a href="https://hangermeng.top/2017/03/17/replace%E6%96%B9%E6%B3%95/">replace方法</a>。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS选择器优先级与效率</title>
      <link href="/2017/03/15/CSS%E9%80%89%E6%8B%A9%E5%99%A8%E4%BC%98%E5%85%88%E7%BA%A7%E4%B8%8E%E6%95%88%E7%8E%87/"/>
      <url>/2017/03/15/CSS%E9%80%89%E6%8B%A9%E5%99%A8%E4%BC%98%E5%85%88%E7%BA%A7%E4%B8%8E%E6%95%88%E7%8E%87/</url>
      
        <content type="html"><![CDATA[<h2 id="各类选择器的优先级"><a href="#各类选择器的优先级" class="headerlink" title="各类选择器的优先级"></a>各类选择器的优先级</h2><ol><li>important声明 1000</li><li>ID选择器 100</li><li>类选择器 10</li><li>伪类选择器 10</li><li>属性选择器 10</li><li>标签选择器 1</li><li>伪元素选择器 1</li><li>通配符选择器 0</li></ol><p>属性选择器 = 伪类选择器<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[src^=<span class="string">"https"</span>]</span> &#123; <span class="attribute">color</span>: green; &#125;</span><br><span class="line"><span class="selector-pseudo">:last-child</span> &#123; <span class="attribute">color</span>: red; &#125;</span><br></pre></td></tr></table></figure></p><p>伪类选择器 &gt; 相邻选择器<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:last-child</span> &#123; <span class="attribute">color</span>: green; &#125;</span><br><span class="line"><span class="selector-tag">p</span>~<span class="selector-tag">ul</span> &#123; <span class="attribute">color</span>: blue; &#125;</span><br></pre></td></tr></table></figure></p><p>相邻选择器 = 子选择器 = 后代选择器<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>~<span class="selector-tag">ul</span> &#123; <span class="attribute">color</span>: red; &#125;</span><br><span class="line"><span class="selector-tag">body</span> &gt; <span class="selector-tag">p</span> &#123; <span class="attribute">color</span>: green; &#125;</span><br><span class="line"><span class="selector-tag">body</span> <span class="selector-tag">p</span> &#123; <span class="attribute">color</span>: blue; &#125;</span><br></pre></td></tr></table></figure></p><p>后代选择器 &gt; 标签选择器<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> <span class="selector-tag">p</span> &#123; <span class="attribute">color</span>: blue; &#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">color</span>: green; &#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><ul><li><code>&lt;style&gt;&lt;/style&gt;</code> 同 <code>&lt;link /&gt;</code> 同级，应用取决于<code>&lt;style&gt;</code>标签和<code>&lt;link /&gt;</code> 标签的先后顺序</li><li>元素<code>style=&quot;&quot;</code>属性的优先级高于以上两种样式</li><li><code>!important</code> 优先级高于以上两种样式</li><li><code>!important</code> 在IE6中的BUG：在同一组CSS属性中, !important不起作用。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#selector</span>&#123;<span class="attribute">color</span>:blue <span class="meta">!important</span>;<span class="attribute">color</span>:green;&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="选择器效率"><a href="#选择器效率" class="headerlink" title="选择器效率"></a>选择器效率</h2><ol><li>ID选择器</li><li>类选择器</li><li>标签选择器</li><li>相邻选择器</li><li>子选择器</li><li>后代选择器</li><li>通配符选择器</li><li>属性选择器</li><li>伪类选择器</li></ol><p><strong> 优先级高不一定效率高 </strong> </p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS事件模拟</title>
      <link href="/2017/03/15/JS%E4%BA%8B%E4%BB%B6%E6%A8%A1%E6%8B%9F/"/>
      <url>/2017/03/15/JS%E4%BA%8B%E4%BB%B6%E6%A8%A1%E6%8B%9F/</url>
      
        <content type="html"><![CDATA[<p>事件通常是在由用户和浏览器进行交互时触发，其实通过 Javascript 也可以在任何时间触发特定的事件。这种能力在测试web应用程序的时候，模拟事件是非常有用的。</p><h2 id="事件模拟三步"><a href="#事件模拟三步" class="headerlink" title="事件模拟三步"></a>事件模拟三步</h2><ol><li>通过 document.createEvent() 方法创建 event 对象，接收一个参数，即表示要创建的事件类型的字符串：<ul><li>UIEvents：通用的 UI 事件，鼠标事件键盘事件都是继承自UI事件，在 DOM3  级上使用的是 UIEvent 。</li><li>MouseEvents：通用的鼠标事件，在 DOM3 级上使用的是 MouseEvent 。</li><li>MutationEvents：通用的突变事件，在 DOM3 级上使用的是 MutationEvent 。</li><li>HTMLEvents：通用的 HTML 事件，在 DOM3 级上还没有等效的。</li></ul></li></ol><ol start="2"><li>在创建了event对象之后，还需要使用与事件有关的信息对其进行初始化。每种类型的event对象都有一个特殊的方法，为它传入适当的数据就可以初始化该event对象。用 event.init……() 此类行的方法。</li><li>触发事件。这需要使用 dispatchEvent()方法，接收一个参数，即表示要触发的 event 对象。</li></ol><a id="more"></a><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>以模拟鼠标事件为例，首先创建鼠标事件对象的方法 createEvent()传入MouseEvents，返回的对象的方法 initMouseEvent()，接收15个信息：</p><ol><li>type（字符串）：事件类型如“click”；</li><li>bubble（布尔值）：是否冒泡；</li><li>cancelable（布尔值）：是否可取消；</li><li>view（AbstractView）：与事件关联的视图，一般为document.defaultView；</li><li>detail（整数）：一般为0，一般只有事件处理程序使用；</li><li>screenX（整数）：事件相对于屏幕的X坐标；</li><li>screenY（整数）；</li><li>clientX（整数）：事件相对于视口的X坐标；</li><li>clientY（整数）；</li><li>ctrlKey（布尔值）：是否按下了Ctrl键，默认为false；</li><li>altKey（布尔值）；</li><li>shiftKey（布尔值）；</li><li>metaKey（布尔值）；</li><li>button（整数）：表示按下了哪个鼠标键，默认为0；</li><li>relatedTarget（对象）：表示与事件相关的对象。一般只有在模拟mouseover与mouseout时使用。</li></ol><p>最后记得把 event 对象传给 dispatchEvent() 方法。代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">"#btn"</span>);</span><br><span class="line"><span class="comment">//创建event</span></span><br><span class="line"><span class="keyword">var</span> event = <span class="built_in">document</span>.createEvent(<span class="string">"MouseEvents"</span>);</span><br><span class="line"><span class="comment">//初始化event</span></span><br><span class="line">event.initMouseEvent(<span class="string">"click"</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="built_in">document</span>.defaultView,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="number">0</span>,<span class="literal">null</span>);</span><br><span class="line"><span class="comment">//click事件绑定事件处理程序</span></span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"hello"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//触发事件</span></span><br><span class="line">btn.dispatchEvent(event); <span class="comment">//hello</span></span><br><span class="line"><span class="comment">//取消引用</span></span><br><span class="line">btn.onclick = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Array对象方法</title>
      <link href="/2017/03/14/Array%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95/"/>
      <url>/2017/03/14/Array%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>在实际的 JavaScript 代码编写中，经常会遇到处理数组的需求，因此在这里罗列一下原生的数组操作方法，常用的方法在前。</p><h2 id="头尾增删"><a href="#头尾增删" class="headerlink" title="头尾增删"></a>头尾增删</h2><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><ul><li>push()     向数组的末尾添加一个或更多元素，并返回新的长度。</li><li>unshift()  向数组的开头添加一个或更多元素，并返回新的长度。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.push(<span class="string">'2'</span>)) <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [1, 2, 4, 5, "2"]</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ul><li>pop()      删除并返回数组的最后一个元素。</li><li>shift()    删除并返回数组的第一个元素。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.pop()) <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [1,2,4]</span></span><br></pre></td></tr></table></figure><h2 id="局部增删"><a href="#局部增删" class="headerlink" title="局部增删"></a>局部增删</h2><ul><li>slice()    选取数组的的一部分，并返回一个新数组。不改变原数组。</li><li>splice()   从数组中删除、插入、替换元素，并返回删除的数组。改变原数组。</li></ul><h3 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h3><p>语法 <code>array.slice(start, end)</code><br>返回从 start 到 end （<strong> 不包括该元素 </strong>）的数组。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>start</td><td>可选。规定从何处开始选取。如果是负数，那么它规定从数组尾部开始算起的位置。也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。</td></tr><tr><td>end</td><td>可选。规定从何处结束选取。该参数是数组片断结束处的数组下标。如果没有指定该参数，那么切分的数组包含从 start 到数组结束的所有元素。如果这个参数是负数，那么它规定的是从数组尾部开始算起的元素。</td></tr></tbody></table><h3 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h3><p>这是一个很强大的方法， slice() 能实现的功能它也可以实现，最大的区别是它还可以替换元素，另外这个方法是改变原数组的。<br>语法 <code>array.splice(index,howmany,item1,.....,itemX)</code></p><table><thead><tr><th>参数</th><th>描述 </th></tr></thead><tbody><tr><td>index</td><td>必需。规定从何处开始操作，必须是数字。</td></tr><tr><td>howmany</td><td>必需。规定应该删除多少元素，必须是数字，可以是 “0”。如果未规定此参数，则删除从 index 开始到原数组结尾的所有元素。</td></tr><tr><td>item1, …, itemX</td><td>可选。要添加到数组的新元素。</td></tr></tbody></table><h2 id="排序数组"><a href="#排序数组" class="headerlink" title="排序数组"></a>排序数组</h2><ul><li>reverse() 反转数组的元素顺序。改变原数组。</li><li>sort()     对数组的元素进行排序。改变原数组。</li></ul><p>这两个方法在本博客<a href="https://hangermeng.top/2017/03/14/JS%E9%87%8D%E6%8E%92%E6%96%B9%E6%B3%95/">JS重排方法</a>一文中有更详细的解释。</p><h2 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h2><ul><li>every() 检测数值元素的每个元素是否都符合条件。</li><li>some()  检测数组元素中是否有元素符合指定条件。</li><li>filter()     检测数值元素，并返回符合条件所有元素的数组。</li><li>map()  通过指定函数处理数组的每个元素，并返回处理后的数组。</li></ul><p>这四个方法在本博客<a href="https://hangermeng.top/2017/03/01/JS%E6%95%B0%E7%BB%84%E8%BF%AD%E4%BB%A3/">JS数组迭代</a>一文中有更详细的解释。</p><h2 id="连接数组"><a href="#连接数组" class="headerlink" title="连接数组"></a>连接数组</h2><p>concat() 方法用于连接两个或多个数组。该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。<br>语法 <code>array1.concat(array2,array3,...,arrayX)</code></p><h2 id="分隔数组"><a href="#分隔数组" class="headerlink" title="分隔数组"></a>分隔数组</h2><p>join() 方法用于把数组中的所有元素转换一个字符串。元素是通过指定的分隔符（默认为逗号）进行分隔的。不改变原数组。<br>语法 <code>array.join(separator)</code>  </p><h2 id="检索数组"><a href="#检索数组" class="headerlink" title="检索数组"></a>检索数组</h2><ul><li>indexOf() 从头到尾搜索，并返回第一个指定项的索引。</li><li>lastIndexOf() 从尾到头搜索，并返回第一个指定项的索引。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array.indexOf(item,start)</span><br><span class="line">array.lastIndexOf(item,start)</span><br></pre></td></tr></table></figure><p>start 是可选参数，规定在数组中开始检索的位置。</p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><ul><li>toString() 把数组转换为字符串，并返回结果。不改变原数组。</li><li>valueOf() 返回数组对象的原始值。不改变原数组。</li></ul><p><code>array.toString()</code> 等价于 <code>array.join()</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.valueOf()) <span class="comment">// [1, 2, 4, 5]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.toString()) <span class="comment">// 1,2,4,5</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS重排方法</title>
      <link href="/2017/03/14/JS%E9%87%8D%E6%8E%92%E6%96%B9%E6%B3%95/"/>
      <url>/2017/03/14/JS%E9%87%8D%E6%8E%92%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>数组中已经存在两个可以直接用来重排序的方法：reverse() 和 sort() 。</p><h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h2><p>reverse() 直接颠倒数组的顺序，改变原数组。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>]</span><br><span class="line">arr.reverse()</span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [15, 10, 5, 1, 0]</span></span><br></pre></td></tr></table></figure></p><p>这个方法的作用很直观，但是很明显不够灵活，因此才有了 sort() 方法。<br><a id="more"></a></p><h2 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h2><p>sort() 方法会先调用每个数组项的 toString() 方法，然后再比较得到的字符串。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>]</span><br><span class="line">arr.sort()</span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [0, 1, 10, 15, 5]</span></span><br></pre></td></tr></table></figure></p><p>但是这种效果一般都不是我们想要的，sort() 可以接受一个参数，该参数必须是函数，该函数接受两个参数。如果第一个参数应该位于第二个参数之前则返回负值，反之则改为正值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">5</span>,<span class="number">100</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">-12</span>];</span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a-b; <span class="comment">// a-b 升序;b-a 降序</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [-12, 3, 5, 6, 100]</span></span><br></pre></td></tr></table></figure></p><p>可见，利用 sort() 方法可以用来求数组的极值，极值即为重排序后数组的第一项和最后一项。<br>请注意，数组在原数组上进行排序，不生成副本。<br>如果需要通过对象数组中的每项的某个属性值来排序，可以这样：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[&#123;<span class="attr">a</span>:<span class="number">5</span>&#125;,&#123;<span class="attr">a</span>:<span class="number">100</span>&#125;,&#123;<span class="attr">a</span>:<span class="number">6</span>&#125;];</span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.a-b.a;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS事件委托</title>
      <link href="/2017/03/12/JS%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/"/>
      <url>/2017/03/12/JS%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/</url>
      
        <content type="html"><![CDATA[<h2 id="事件委托是什么"><a href="#事件委托是什么" class="headerlink" title="事件委托是什么"></a>事件委托是什么</h2><p>事件委托，又叫事件代理，JavaScript高级程序设计上讲：事件委托就是利用<strong> 事件冒泡 </strong>，只指定一个事件处理程序，就可以管理某一类型的所有事件。</p><h2 id="为什么需要事件委托"><a href="#为什么需要事件委托" class="headerlink" title="为什么需要事件委托"></a>为什么需要事件委托</h2><ol><li>在 JavaScript 中，添加到页面上的事件处理程序数量将直接关系到页面的整体运行性能。如果用事件委托，与 dom 的操作就只需要交互一次，这样就能大大的减少与dom的交互次数，提高性能。</li><li>每个函数都是一个对象，是对象就会占用内存，对象越多，内存占用率就越大，自然性能就越差了。如果用事件委托，那么我们就可以只对它的父级进行操作，这样就需要一个内存空间就够了，提高性能。</li></ol><a id="more"></a><h2 id="事件委托怎么实现"><a href="#事件委托怎么实现" class="headerlink" title="事件委托怎么实现"></a>事件委托怎么实现</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"add"</span> <span class="attr">value</span>=<span class="string">"添加"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"remove"</span> <span class="attr">value</span>=<span class="string">"删除"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"move"</span> <span class="attr">value</span>=<span class="string">"移动"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"select"</span> <span class="attr">value</span>=<span class="string">"选择"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oBox = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</span><br><span class="line">    oBox.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ev = ev || <span class="built_in">window</span>.event;</span><br><span class="line">        <span class="keyword">var</span> target = ev.target || ev.srcElement;</span><br><span class="line">        <span class="keyword">if</span> (target.nodeName.toLocaleLowerCase() == <span class="string">'input'</span>) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (target.id) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'add'</span>:</span><br><span class="line">                    alert(<span class="string">'添加'</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'remove'</span>:</span><br><span class="line">                    alert(<span class="string">'删除'</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'move'</span>:</span><br><span class="line">                    alert(<span class="string">'移动'</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'select'</span>:</span><br><span class="line">                    alert(<span class="string">'选择'</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Event 对象提供了一个属性叫 target ，可以返回事件的目标节点，也就是说，target 就可以表示为当前的事件操作的 dom 。存在兼容性问题，标准浏览器用 ev.target ，IE浏览器用 event.srcElement ，此时只是获取了当前节点的位置，并不知道是什么节点名称，这里我们用 nodeName 来获取具体是什么标签名，这个返回的是一个大写的，我们需要转成小写再做比较（习惯问题）。</p><h2 id="适用事件"><a href="#适用事件" class="headerlink" title="适用事件"></a>适用事件</h2><p>适合用事件委托的事件：click，mousedown，mouseup，keydown，keyup，keypress。<br>值得注意的是，mouseover 和 mouseout 虽然也有事件冒泡，但是处理它们的时候需要特别的注意，因为需要经常计算它们的位置，处理起来不太容易。<br>不适合的就有很多了，比如 mousemove 每次都要计算它的位置，非常不好把控。还有 focus，blur之类的，本身就没用冒泡的特性，自然就不能用事件委托了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对象数组排序</title>
      <link href="/2017/03/12/%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F/"/>
      <url>/2017/03/12/%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>网上看到这样一个问题：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> objArr = [&#123;</span><br><span class="line">        <span class="string">'a'</span>: <span class="number">999</span>,</span><br><span class="line">        <span class="string">'b'</span>: <span class="number">888</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="string">'a'</span>: <span class="number">123</span>,</span><br><span class="line">        <span class="string">'b'</span>: <span class="number">345</span>,</span><br><span class="line">        <span class="string">'c'</span>: <span class="number">345</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="string">'a'</span>: <span class="number">666</span></span><br><span class="line">    &#125;]</span><br></pre></td></tr></table></figure></p><p>请把以上的对象数组，根据数组每项属性个数的多少排序，使其转化为<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> objArr = [&#123;</span><br><span class="line">        <span class="string">'a'</span>: <span class="number">666</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        <span class="string">'a'</span>: <span class="number">999</span>,</span><br><span class="line">        <span class="string">'b'</span>: <span class="number">888</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        <span class="string">'a'</span>: <span class="number">123</span>,</span><br><span class="line">        <span class="string">'b'</span>: <span class="number">345</span>,</span><br><span class="line">        <span class="string">'c'</span>: <span class="number">345</span></span><br><span class="line">    &#125;]</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>我想了挺久才解决，思路是给每项对象挂上一个新属性(表示对象属性的个数)，再利用 sort() 函数来进行排序，最后把该属性去掉。代码如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*获得对象属性的个数*/</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.getProperNum = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> propNum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> <span class="keyword">this</span>) &#123;</span><br><span class="line">        ++propNum</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> propNum</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*给对象添加properNum的属性*/</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; objArr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> num = objArr[i].getProperNum()</span><br><span class="line">    objArr[i][<span class="string">'properNum'</span>] = num</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*比较函数*/</span></span><br><span class="line"><span class="keyword">var</span> compare = <span class="function"><span class="keyword">function</span>(<span class="params">obj1, obj2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> val1 = obj1.properNum;</span><br><span class="line">    <span class="keyword">var</span> val2 = obj2.properNum;</span><br><span class="line">    <span class="keyword">return</span> val1 - val2 <span class="comment">//升序</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> objArr2 = objArr.sort(compare)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; objArr2.length; i++) &#123;</span><br><span class="line">    <span class="keyword">delete</span> objArr2[i].proper</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(objArr2)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>清除浮动</title>
      <link href="/2017/03/12/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/"/>
      <url>/2017/03/12/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么要清除浮动"><a href="#为什么要清除浮动" class="headerlink" title="为什么要清除浮动"></a>为什么要清除浮动</h2><p>浮动是魔鬼，会脱离文档流，从而破坏原有的文档结构，最典型的例子就是造成父元素的高度塌陷。</p><h2 id="清除浮动的方法"><a href="#清除浮动的方法" class="headerlink" title="清除浮动的方法"></a>清除浮动的方法</h2><p>清除浮动有多种方法，这里讲三种方法，个人推荐第三种。</p><h3 id="添加新元素、定义-clear-both"><a href="#添加新元素、定义-clear-both" class="headerlink" title="添加新元素、定义 clear:both"></a>添加新元素、定义 clear:both</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clear"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clear</span>&#123;</span><br><span class="line"><span class="attribute">clear</span>:both; </span><br><span class="line"><span class="attribute">height</span>: <span class="number">0</span>; </span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">0</span>; </span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="父元素定义-overflow-auto"><a href="#父元素定义-overflow-auto" class="headerlink" title="父元素定义 overflow:auto"></a>父元素定义 overflow:auto</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer clearfix"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">    overflow: auto;  // hidden 也可以 </span><br><span class="line">    zoom: 1; // 兼容IE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-after-伪元素"><a href="#使用-after-伪元素" class="headerlink" title="使用 :after 伪元素"></a>使用 :after 伪元素</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">'.'</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">    <span class="attribute">zoom</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 clear:both; 指清除所有浮动；content:’.’;display:block; 对于FF/chrome/opera/IE8不能缺少，其中 content() 可以取值也可以为空。visibility:hidden; 的作用是允许浏览器渲染它，但不显示出来。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>margin负值</title>
      <link href="/2017/03/12/margin%E8%B4%9F%E5%80%BC/"/>
      <url>/2017/03/12/margin%E8%B4%9F%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<p>margin 为负值是符合 W3C 标准的，完全没有兼容性问题，另外需要一提的是 padding 和 border 不支持负值。存在就是有意义的，那么负边距究竟有什么样的作用？ </p><h2 id="在普通文档流中的效果"><a href="#在普通文档流中的效果" class="headerlink" title="在普通文档流中的效果"></a>在普通文档流中的效果</h2><p>那些没有脱离文档流的元素，其在页面中的位置是跟随者文档流的变化而变化的。看下面这幅图：<br><img src="http://images.cnblogs.com/cnblogs_com/2050/201208/201208131525098932.png" alt="未设置负边距的文档流"><br>现在我们把上图中的块状元素、行内元素以及inline-block元素都设一个负边距 margin:-10px; 看看会发生什么：<br><img src="http://images.cnblogs.com/cnblogs_com/2050/201208/201208131525134914.png" alt="设置负边距的文档流"><br>注意到根据文档流的渲染顺序，前面的元素的会被后面的元素覆盖10px，另外顶部的块状元素也向上隐藏了10px。<br>由此可知，在文档流中，元素的最终边界是由margin决定的，margin为负的时候就相当于元素的边界向里收，文档流只认这个边界，不会管元素的实际尺寸是多少。<br><a id="more"></a></p><h2 id="对元素宽度的影响"><a href="#对元素宽度的影响" class="headerlink" title="对元素宽度的影响"></a>对元素宽度的影响</h2><p>如果一个元素未设置宽度(或者width:auto)，负边距能增加元素的宽度。<br>比如下图的黑灰色部分是一个块状元素，它没有设定宽度。它被包裹在一个宽度为400px,且水平居中的父元素中。<br><img src="http://images.cnblogs.com/cnblogs_com/2050/201208/20120813152515780.png" alt="未设置宽度"><br>现在给这个元素的设一个 margin-right:-100px;<br><img src="http://images.cnblogs.com/cnblogs_com/2050/201208/201208131525179959.png" alt="设置负边距"></p><h2 id="对浮动和绝对定位元素的影响"><a href="#对浮动和绝对定位元素的影响" class="headerlink" title="对浮动和绝对定位元素的影响"></a>对浮动和绝对定位元素的影响</h2><p>浮动元素或者绝对定位的元素会根据元素的边界来定位，而这个边界是由 margin 值来决定的，因此 margin 值的改变会影响元素的位置。</p><h3 id="浮动定位"><a href="#浮动定位" class="headerlink" title="浮动定位"></a>浮动定位</h3><p>利用浮动元素的负边距，可以实现将写在后面的某个元素前置显示。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"> <span class="selector-class">.ul</span> &gt; <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"> width: 300px;</span><br><span class="line">     height: 300px;</span><br><span class="line">     float: left;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="css"> <span class="selector-class">.li1</span> &#123;       </span></span><br><span class="line"><span class="css">     <span class="selector-tag">background-color</span>: <span class="selector-id">#B7FF7C</span>;       </span></span><br><span class="line"> &#125;    </span><br><span class="line"><span class="css"> <span class="selector-class">.li2</span> &#123;</span></span><br><span class="line"><span class="css">     <span class="selector-tag">background-color</span>: <span class="selector-id">#F9715F</span>;</span></span><br><span class="line"> &#125;    </span><br><span class="line"><span class="css"> <span class="selector-class">.li3</span> &#123;</span></span><br><span class="line"><span class="css">     <span class="selector-tag">background-color</span>: <span class="selector-id">#83F2FB</span>;</span></span><br><span class="line">     margin-left: -450px;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ul"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"li1"</span>&gt;</span>list1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"li2"</span>&gt;</span>list2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"li3"</span>&gt;</span>list3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h3><p>绝对定位的元素定义的top、right、bottom、left等值是元素自身的边界到最近的已定位的祖先元素的距离，这个元素自身的边界指的就是 margin 定义的边界，如果margin为负则它的边界是向里收的。利用这点，就有了经典的利用绝对定位来居中的方法。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;  </span><br><span class="line">    <span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: -<span class="number">150px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">250px</span>; <span class="comment">/* 外边距为自身宽高的一半 */</span></span><br><span class="line">    <span class="attribute">background-color</span>: pink;   </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><h2 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h2><h3 id="两栏等高布局"><a href="#两栏等高布局" class="headerlink" title="两栏等高布局"></a>两栏等高布局</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.box</span> &#123;</span></span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.list1</span>,</span></span><br><span class="line"><span class="css"><span class="selector-class">.list2</span> &#123;</span></span><br><span class="line">    width: 300px;</span><br><span class="line">    float: left;</span><br><span class="line">    margin-bottom: -1000px;</span><br><span class="line">    padding-bottom: 1000px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.list1</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#B7FF7C</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.list2</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#F9715F</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>左列<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>左列<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>左列<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>右列<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>右列<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="列表去边"><a href="#列表去边" class="headerlink" title="列表去边"></a>列表去边</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.box</span> &#123;</span></span><br><span class="line">    width: 1200px;</span><br><span class="line">    margin: auto;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#FEB91E</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.ul</span> &#123;</span></span><br><span class="line">    overflow: hidden;</span><br><span class="line">    margin-right: -20px; // 增大了容器宽度</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.li</span> &#123;</span></span><br><span class="line">    width: 386.66px; // 计算后的宽度</span><br><span class="line">    height: 300px;</span><br><span class="line">    margin-right: 20px;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#B7FF7C</span>;</span></span><br><span class="line">    float: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ul"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"li"</span>&gt;</span>list1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"li"</span>&gt;</span>list2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"li"</span>&gt;</span>list3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>URL的获取和组装</title>
      <link href="/2017/03/11/URL%E7%9A%84%E8%8E%B7%E5%8F%96%E5%92%8C%E7%BB%84%E8%A3%85/"/>
      <url>/2017/03/11/URL%E7%9A%84%E8%8E%B7%E5%8F%96%E5%92%8C%E7%BB%84%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>实际开发中，我们会遇到需要处理当前页面 URL 的问题。</p><h2 id="获取-URL-参数"><a href="#获取-URL-参数" class="headerlink" title="获取 URL 参数"></a>获取 URL 参数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> urlPara = （ <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> url = <span class="built_in">window</span>.document.location.href.toString()</span><br><span class="line">    <span class="keyword">var</span> urlSlice = url.split(<span class="string">'?'</span>)</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span>(urlSlice[<span class="number">1</span>]) == <span class="string">'string'</span>) &#123;</span><br><span class="line">        urlSlice = urlSlice[<span class="number">1</span>].split(<span class="string">'&amp;'</span>)</span><br><span class="line">        <span class="keyword">var</span> getPara = &#123;&#125;</span><br><span class="line">        <span class="keyword">var</span> urlPara = []</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; urlSlice.length; i++) &#123;</span><br><span class="line">            urlPara = urlSlice[i].split(<span class="string">'='</span>)</span><br><span class="line">            getPara[urlPara[<span class="number">0</span>]] = urlPara[<span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> getPara</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;）()</span><br></pre></td></tr></table></figure><a id="more"></a><p>urlPara 是一个存储了 URL 参数的对象，因此通过 urlPara.属性名 就可得到对应的属性值。</p><h2 id="组装-URL-参数"><a href="#组装-URL-参数" class="headerlink" title="组装 URL 参数"></a>组装 URL 参数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">assemblyPara</span>(<span class="params">start,urlPara</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> url = start</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> urlPara)&#123;</span><br><span class="line">url += (prop + <span class="string">'='</span> + urlPara[prop] + <span class="string">'&amp;'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> url</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS数组去重</title>
      <link href="/2017/03/11/JS%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/"/>
      <url>/2017/03/11/JS%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(array) &amp;&amp; array.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> arr = []</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr.indexOf(array[i]) == <span class="number">-1</span>) &#123;</span><br><span class="line">                arr.push(array[i])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*你可以像下面这样调用该函数了*/</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">66</span>, <span class="number">55</span>, <span class="number">33</span>, <span class="number">55</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">32</span>, <span class="number">2</span>]</span><br><span class="line"><span class="built_in">console</span>.log(unique(arr))</span><br></pre></td></tr></table></figure><a id="more"></a><p>也可以将去重函数挂载在数组原型上，拓展了数组的基本方法，省去了判断参数类型的代码。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.unique = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> res = []</span><br><span class="line">        <span class="keyword">var</span> json = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!json[<span class="keyword">this</span>[i]]) &#123; </span><br><span class="line">                res.push(<span class="keyword">this</span>[i])</span><br><span class="line">                json[<span class="keyword">this</span>[i]] = <span class="number">1</span> <span class="comment">// 传值随意</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*你可以像下面这样调用该函数了*/</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">66</span>, <span class="number">55</span>, <span class="number">33</span>, <span class="number">55</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">32</span>, <span class="number">2</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.unique())</span><br></pre></td></tr></table></figure></p><h3 id="最简单的实现"><a href="#最简单的实现" class="headerlink" title="最简单的实现"></a>最简单的实现</h3><p>如果使用 es6 ，使用 set 可以快速实现<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dedupe</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [...new <span class="built_in">Set</span>(arr)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bootstrap栅格布局原理</title>
      <link href="/2017/03/11/Bootstrap%E6%A0%85%E6%A0%BC%E5%B8%83%E5%B1%80%E5%8E%9F%E7%90%86/"/>
      <url>/2017/03/11/Bootstrap%E6%A0%85%E6%A0%BC%E5%B8%83%E5%B1%80%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>今天有个电话面试问到 Bootstrap 栅格布局的原理，当时没答出来，之后百度了下，发现这个问题我应该答出来的。<br>实现列组合方式非常简单，只涉及两个CSS两个特性：浮动与宽度百分比。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.col-md-1</span>, <span class="selector-class">.col-md-2</span>,... <span class="selector-class">.col-md-11</span>, <span class="selector-class">.col-md-12</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="selector-class">.col-md-12</span> &#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.col-md-11</span> &#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">91.66666667%</span>;</span><br><span class="line"> &#125;</span><br><span class="line">...</span><br><span class="line"> <span class="selector-class">.col-md-2</span> &#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">16.66666667%</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.col-md-1</span> &#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">8.33333333%</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>列偏移是通过设置 margin-left 百分比值来实现的。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  <span class="selector-class">.col-md-offset-12</span> &#123;</span><br><span class="line">   <span class="attribute">margin-left</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="selector-class">.col-md-offset-11</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">91.66666667%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br><span class="line">  <span class="selector-class">.col-md-offset-1</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">8.33333333%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.col-md-offset-0</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Bootstrap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>换行符和回车符的区别</title>
      <link href="/2017/03/10/%E6%8D%A2%E8%A1%8C%E7%AC%A6%E5%92%8C%E5%9B%9E%E8%BD%A6%E7%AC%A6%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2017/03/10/%E6%8D%A2%E8%A1%8C%E7%AC%A6%E5%92%8C%E5%9B%9E%E8%BD%A6%E7%AC%A6%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>换行(\n)就是光标下移一行但不移到这一行的开头，回车(\r)就是回到当前行的开头但不下移一行。按下 Enter 键后会执行 \n\r 。</p><h2 id="来历"><a href="#来历" class="headerlink" title="来历"></a>来历</h2><p>在计算机还没有出现之前，有一种叫做电传打字机的玩意，每秒钟可以打10个字符。但是它有一个问题，就是打完一行换行的时候，要用去0.2秒，正 好可以打两个字符。要是在这0.2秒里面，又有新的字符传过来，那么这个字符将丢失。<br>于是，研制人员想了个办法解决这个问题，就是在每行后面加两个表示结束的字符。一个叫做“回车”，告诉打字机把打印头定位在左边界；另一个叫做“换行”，告诉打字机把纸向下移一行。<br>后来，计算机发明了，这两个概念也就被般到了计算机上。那时，存储器很贵，一些科学家认为在每行结尾加两个字符太浪费了，加一个就可以。于是，就出现了分歧。<br>Unix/Mac系统里，每行结尾只有“&lt;换行&gt;”，即”\n”；Windows系统里面，每行结尾是“&lt;换行&gt;&lt;回车&gt;”，即“\n\r”。一个直接后果是，Unix/Mac系统下的文件在 Windows里打开的话，所有文字会变成一行；而Windows里的文件在Unix/Mac下打开的话，在每行的结尾可能会多出一个^M符号。</p>]]></content>
      
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>null,undefined</title>
      <link href="/2017/03/09/null-undefined/"/>
      <url>/2017/03/09/null-undefined/</url>
      
        <content type="html"><![CDATA[<h3 id="相似性"><a href="#相似性" class="headerlink" title="相似性"></a>相似性</h3><p>变量分别被赋值为undefined和null，这两种写法几乎等价。<br>undefined和null在if语句中，都会被自动转为false，相等运算符甚至直接报告两者相等。</p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><blockquote><p>null:  表示一个对象的值为空<br>undefined:  表示一个变量声明了但没有被赋值</p></blockquote><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span> <span class="comment">//"undefined"</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> <span class="comment">//"object"</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：在验证null时，一定要使用<code>===</code>，因为<code>==</code>无法区别 null 和 undefined<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span> <span class="comment">// true</span></span><br><span class="line"><span class="literal">null</span> === <span class="literal">undefined</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>null 表示”没有对象”，即该处不应该有值。典型用法是：</p><ul><li>作为函数的参数，表示该函数的参数不是对象</li><li>作为对象原型链的终点</li></ul><p>undefined 表示”缺少值”，就是此处应该有一个值，但还没有被赋值。典型用法是：</p><ul><li>变量被声明了，但没有赋值时，就等于undefined</li><li>调用函数时，应该提供的参数没有提供，该参数等于undefined</li><li>对象没有赋值的属性，该属性的值为undefined</li><li>函数没有返回值时，默认返回undefined</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>伪类和伪元素</title>
      <link href="/2017/03/09/%E4%BC%AA%E7%B1%BB%E5%92%8C%E4%BC%AA%E5%85%83%E7%B4%A0/"/>
      <url>/2017/03/09/%E4%BC%AA%E7%B1%BB%E5%92%8C%E4%BC%AA%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="伪类种类"><a href="#伪类种类" class="headerlink" title="伪类种类"></a>伪类种类</h2><table><thead><tr><th>伪类</th><th>作用</th></tr></thead><tbody><tr><td>:active</td><td>将样式添加到被激活的元素</td></tr><tr><td>:focus</td><td>将样式添加到被选中的元素</td></tr><tr><td>:link</td><td>将样式添加到未被访问过的的链接</td></tr><tr><td>:visited</td><td>将样式添加到被访问过的链接</td></tr><tr><td>:lang</td><td>规定元素中使用的语言</td></tr><tr><td>:hover</td><td>当鼠标悬浮在元素上方时，向元素添加样式</td></tr><tr><td>:first-child</td><td>将样式添加到第一个元素</td></tr></tbody></table><h2 id="伪元素种类"><a href="#伪元素种类" class="headerlink" title="伪元素种类"></a>伪元素种类</h2><table><thead><tr><th>伪元素</th><th>作用</th></tr></thead><tbody><tr><td>:first-letter</td><td>将样式添加到文本的首字母</td></tr><tr><td>:first-line</td><td>将样式添加到文本的首行</td></tr><tr><td>:before</td><td>在某元素之前插入内容</td></tr><tr><td>:after</td><td>在某元素之后插入内容</td></tr></tbody></table><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ul><li>伪类的效果是通过给要加特殊样式的元素，增加一个类来完成实现的；伪元素的效果是通过给要加特殊样式的内容加一个元素来实现的</li><li>伪类，首先是类的一种，作用域标签本身（状态）；伪元素，首先是元素，作用于内容本身</li></ul><a id="more"></a><p>这里用伪类 :first-child 和伪元素 :first-letter 来举例说明。</p><hr><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">p &gt; i:first-child &#123;color: red&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>first<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>second<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">// 等价于</span><br><span class="line">.first-child &#123;color: red&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"first-child"</span>&gt;</span>first<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>second<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p:first-letter &#123;color: red&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>I am stephen lee.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">// 等价于</span><br><span class="line">.first-letter &#123;color: red&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">'first-letter'</span>&gt;</span>I<span class="tag">&lt;/<span class="name">span</span>&gt;</span> am stephen lee.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>从例子中可以看到，伪类的效果只需要通过添加一个类名就可以达到，而伪元素的效果需要先添加一个实际的元素再添加一个类名来达到。也就是说，<strong> 伪元素需要额外创建一个元素，而伪类不需要 </strong>。</p><h2 id="CSS3规范"><a href="#CSS3规范" class="headerlink" title="CSS3规范"></a>CSS3规范</h2><p>伪元素和伪类容易混淆，但实际上 css3 为了区分两者，已经明确规定了伪类用一个冒号来表示，而伪元素则用两个冒号来表示。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:Pseudo-classes  // 伪类</span><br><span class="line">::Pseudo-elements  // 伪元素</span><br></pre></td></tr></table></figure></p><p>但因为兼容性的问题，所以现在大部分还是统一的单冒号，但是抛开兼容性的问题，我们在书写时应该尽可能养成好习惯，区分两者。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>div居中</title>
      <link href="/2017/03/09/div%E5%B1%85%E4%B8%AD/"/>
      <url>/2017/03/09/div%E5%B1%85%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<h2 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h2><h3 id="定宽水平居中"><a href="#定宽水平居中" class="headerlink" title="定宽水平居中"></a>定宽水平居中</h3><p>给div设置一个宽度，然后添加margin:0 auto属性。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="不定宽水平居中"><a href="#不定宽水平居中" class="headerlink" title="不定宽水平居中"></a>不定宽水平居中</h3><p>设置 display:table ，这个样式会告知浏览器当前元素的宽度，采用最小的宽度，不是默认全宽。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="attribute">display</span>:table;</span><br><span class="line"><span class="attribute">margin</span>:<span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h2 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a>水平垂直居中</h2><h3 id="居中一"><a href="#居中一" class="headerlink" title="居中一"></a>居中一</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;   <span class="comment">/* 方便看效果 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="居中二"><a href="#居中二" class="headerlink" title="居中二"></a>居中二</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;     <span class="comment">/* 相对定位或绝对定位均可 */</span></span><br><span class="line">    <span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: -<span class="number">150px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">250px</span>;      <span class="comment">/* 外边距为自身宽高的一半 */</span></span><br><span class="line">    <span class="attribute">background-color</span>: pink;   </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="居中三"><a href="#居中三" class="headerlink" title="居中三"></a>居中三</h3><p>未知容器的宽高，利用 <code>transform</code> 属性<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;     <span class="comment">/* 相对定位或绝对定位均可 */</span></span><br><span class="line">    <span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">    <span class="attribute">background-color</span>: pink;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="居中四"><a href="#居中四" class="headerlink" title="居中四"></a>居中四</h3><p>利用 flex 布局，实际使用时应考虑兼容性。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;        <span class="comment">/* 垂直居中 */</span></span><br><span class="line">    <span class="attribute">justify-content</span>: center;    <span class="comment">/* 水平居中 */</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用markdown语法</title>
      <link href="/2017/03/07/%E5%B8%B8%E7%94%A8markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/2017/03/07/%E5%B8%B8%E7%94%A8markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 文本1</span><br><span class="line">   * 二级文本</span><br><span class="line">- 文本2</span><br><span class="line">- 文本3</span><br></pre></td></tr></table></figure><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 文本1</span><br><span class="line">2. 文本2</span><br><span class="line">3. 文本3</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># h1</span><br><span class="line">## h2</span><br><span class="line">### h3</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><h3 id="文字链接"><a href="#文字链接" class="headerlink" title="文字链接"></a>文字链接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[显示文本](链接地址)</span><br></pre></td></tr></table></figure><h3 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;http://exmaple.com&gt;</span><br></pre></td></tr></table></figure><h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">![alt text](图片链接 &quot;title&quot;)</span><br><span class="line"></span><br><span class="line">![alt text][id]  </span><br><span class="line">[id]: 图片链接 &quot;title&quot;</span><br></pre></td></tr></table></figure><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; 引用文字</span><br><span class="line">&gt;</span><br><span class="line">&gt;&gt; 二级引用文字</span><br><span class="line">&gt;</span><br><span class="line">&gt; 引用文字</span><br></pre></td></tr></table></figure><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~删除线~~ // 不需要空格</span><br></pre></td></tr></table></figure><h2 id="注脚"><a href="#注脚" class="headerlink" title="注脚"></a>注脚</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这是一个注脚[^footnote1]的样例</span><br><span class="line">[^footnote1]: 我就是那个注脚</span><br></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 不需要对齐</span><br><span class="line">dog | bird | cat</span><br><span class="line">----|------|-----</span><br><span class="line">foo | foo  | foo</span><br><span class="line">bar | bar  | bar</span><br><span class="line">baz | baz  | baz</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS闭包</title>
      <link href="/2017/03/07/JS%E9%97%AD%E5%8C%85/"/>
      <url>/2017/03/07/JS%E9%97%AD%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>闭包就是能够读取其他函数内部变量的函数。</p><h3 id="作用-用途"><a href="#作用-用途" class="headerlink" title="作用/用途"></a>作用/用途</h3><ul><li>可以读取函数内部的变量</li><li>在内存中维持一个变量</li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>通过闭包，我们可以在其他的执行上下文中，<strong> 访问到函数的内部变量 </strong>。</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="literal">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">innnerFoo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">  &#125;</span><br><span class="line">  fn = innnerFoo; <span class="comment">// 将 innnerFoo的引用，赋值给全局变量中的fn</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  fn(); <span class="comment">// 此处的保留的innerFoo的引用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo();</span><br><span class="line">bar(); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>需要注意的是，虽然例子中的闭包被保存在了全局变量中，但是<strong> 闭包的作用域链并不会发生任何改变 </strong>。在闭包中，能访问到的变量，仍然是作用域链上能够查询到的变量。<br>对上面的例子稍作修改，如果我们在函数 bar 中声明一个变量 c，并在闭包 fn 中试图访问该变量，运行结果会抛出错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="literal">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">innnerFoo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(c); <span class="comment">// 在这里，试图访问函数bar中的c变量，会抛出错误</span></span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">  &#125;</span><br><span class="line">  fn = innnerFoo; <span class="comment">// 将 innnerFoo的引用，赋值给全局变量中的fn</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> c = <span class="number">100</span>;</span><br><span class="line">  fn(); <span class="comment">// 此处的保留的innerFoo的引用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo();</span><br><span class="line">bar();</span><br></pre></td></tr></table></figure><h3 id="setTimeout-闭包题"><a href="#setTimeout-闭包题" class="headerlink" title="setTimeout()闭包题"></a>setTimeout()闭包题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;, i * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一道经典的闭包题，答案是输出 5 个 6，我们要如何修改才能使其输出 1~5？</p><p>页面中所有由 setTimeout 定义的操作，都将放在同一个队列中依次执行。而这个队列执行的时间，需要等待到函数调用栈清空之后才开始执行。即所有可执行代码执行完毕之后，才会开始执行由 setTimeout 定义的操作。而这些操作进入队列的顺序，则由设定的延迟时间来决定。<br>根据 setTimeout 定义的操作在函数调用栈清空之后才会执行的特点，for 循环里定义了 5 个 setTimeout 操作。而当这些操作开始执行时，for 循环的 i 值，已经先一步变成了 6。因此输出结果总为 6。而我们想要让输出结果依次执行，我们就必须借助闭包的特性，每次循环时，将 i 值保存在一个闭包中，当 setTimeout 中定义的操作执行时，则访问对应闭包保存的 i 值即可。<br>因此，我们只需要 2 个操作就可以完成题目需求，一是使用自执行函数提供闭包条件，二是传入 i 值并保存在闭包中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;, i * <span class="number">1000</span>);</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以在 setTimeout 的第一个参数处利用闭包。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  setTimeout(</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;)(i),</span><br><span class="line">    i * <span class="number">1000</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ul><li><p>滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在 IE 中可能导致内存泄露。解决方法是：在退出函数之前，<strong>将不使用的局部变量全部删除</strong>。</p></li><li><p>滥用闭包，会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS原型</title>
      <link href="/2017/03/07/JS%E5%8E%9F%E5%9E%8B/"/>
      <url>/2017/03/07/JS%E5%8E%9F%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>在 JS 中，主要有两种创建对象的方法, 分别是对象字面量以及调用构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象字面量</span></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用构造函数</span></span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> <span class="built_in">Object</span>(); <span class="comment">// typeof Object === 'function'</span></span><br><span class="line"></span><br><span class="line">obj1.__proto__ === <span class="built_in">Object</span>.prototype <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="prototype-、constructor"><a href="#prototype-、constructor" class="headerlink" title="prototype 、constructor"></a>prototype 、constructor</h3><p><strong> 每个函数 </strong>默认会有一个<code>prototype</code>属性指向它的原型对象，<br>该原型对象会有一个<code>constructor</code>的属性，该属性包含一个指针，指向<code>prototype</code>属性所在函数，即</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.constructor === <span class="built_in">Object</span></span><br></pre></td></tr></table></figure><h3 id="proto"><a href="#proto" class="headerlink" title="__proto__"></a>__proto__</h3><p>每一个对象都有一个隐式的<code>__proto__</code>属性，指向<strong>它们的构造函数的原型</strong>，即</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj1.__proto__ === <span class="built_in">Object</span>.prototype <span class="comment">// true</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj1.__proto__.constructor === <span class="built_in">Object</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="prototype-和-proto-的区别"><a href="#prototype-和-proto-的区别" class="headerlink" title="prototype 和 __proto__ 的区别"></a>prototype 和 __proto__ 的区别</h3><p><code>prototype</code> 是<strong>函数</strong>才有的属性，<code>__proto__</code> 是<strong>对象和函数</strong>都有的属性（不是一个规范属性，只是部分浏览器实现了此属性，对应的标准属性是 <code>[[Prototype]]</code>）</p><h3 id="Object-和-Function-的关系"><a href="#Object-和-Function-的关系" class="headerlink" title="Object 和 Function 的关系"></a>Object 和 Function 的关系</h3><p><code>Object</code>是<code>Function</code>的实例对象, <code>Function.prototype</code>是<code>Object</code>的实例对象。<strong>Object本质是函数，Function本质是对象</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.__proto__ === <span class="built_in">Function</span>.prototype;</span><br><span class="line"><span class="built_in">Function</span>.prototype.__proto__ === <span class="built_in">Object</span>.prototype;</span><br></pre></td></tr></table></figure><h3 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h3><p>利用 js 的原型，可以实现继承。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Box</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Box2</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Box3</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Box2.prototype = <span class="keyword">new</span> Box();</span><br><span class="line">Box3.prototype = <span class="keyword">new</span> Box2();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Box2();</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> Box3();</span><br><span class="line"></span><br><span class="line">a.__proto__ === Box2.prototype; <span class="comment">// true</span></span><br><span class="line">b.__proto__ === Box3.prototype; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型链如下，到 null 终止</span></span><br><span class="line">Box3.prototype.__proto__ === Box2.prototype; <span class="comment">// true</span></span><br><span class="line">Box2.prototype.__proto__ === Box.prototype; <span class="comment">// true</span></span><br><span class="line">Box.prototype.__proto__ === <span class="built_in">Object</span>.prototype; <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.__proto__ === <span class="literal">null</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>除了<code>Object</code>的原型对象<code>Object.prototype</code>的<code>__proto__</code>指向<code>null</code>，其他内置函数对象的原型对象（例如：<code>Array.prototype</code>）和自定义构造函数的<code>__proto__</code>都指向Object.prototype, 因为原型对象本身是普通对象。</p><p>ES5 有了 <code>Object.create()</code>，让我们更便捷地使用原型继承，<code>Object.getPrototypeOf</code>、<code>Object.setPrototypeOf</code> 可以更自由地操控原型链。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Box</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Box2</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Box3</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Box2.prototype = <span class="built_in">Object</span>.create(Box.prototype)</span><br><span class="line">Box3.prototype = <span class="built_in">Object</span>.create(Box2.prototype)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Box3.prototype.__proto__ === Box2.prototype) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Box2.prototype.__proto__ === Box.prototype) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>apply、call、bind</title>
      <link href="/2017/03/06/apply%E3%80%81call%E3%80%81bind/"/>
      <url>/2017/03/06/apply%E3%80%81call%E3%80%81bind/</url>
      
        <content type="html"><![CDATA[<h2 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h2><ul><li>apply 、call 、bind 三者都是用来改变函数的this对象的指向的；</li><li>apply 、call 、bind 三者第一个参数都是this要指向的对象，也就是想指定的上下文；</li><li>apply 、call 、bind 三者都可以利用后续参数传参；</li></ul><h2 id="apply-、call"><a href="#apply-、call" class="headerlink" title="apply 、call"></a>apply 、call</h2><p>在 javascript 中，call 和 apply 都是为了改变某个函数运行时的上下文（context）而存在的，换句话说，就是为了改变函数体内部 this 的指向。<br>对于 apply、call 二者而言，作用完全一样，只是接受参数的方式不太一样。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params">arg1, arg2</span>) </span>&#123;&#125;;</span><br><span class="line">func.call(<span class="keyword">this</span>, arg1, arg2);</span><br><span class="line">func.apply(<span class="keyword">this</span>, [arg1, arg2]);</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>其中 this 是你想指定的上下文，他可以是任何一个 JavaScript 对象(JavaScript 中一切皆对象)，call 需要把参数按顺序传递进去，而 apply 则是把参数放在数组里。<br>JavaScript 中，某个函数的参数数量是不固定的，因此当你的参数是明确知道数量时用 call 。而不确定的时候用 apply，然后把参数 push 进数组传递进去。当参数数量不确定时，函数内部也可以通过 arguments 这个数组来遍历所有的参数。</p><h3 id="数组间追加"><a href="#数组间追加" class="headerlink" title="数组间追加"></a>数组间追加</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array1 = [<span class="number">12</span> , <span class="string">"foo"</span> , &#123;name <span class="string">"Joe"</span>&#125; , <span class="number">-2458</span>]; </span><br><span class="line"><span class="keyword">var</span> array2 = [<span class="string">"Doe"</span> , <span class="number">555</span> , <span class="number">100</span>]; </span><br><span class="line"><span class="built_in">Array</span>.prototype.push.apply(array1, array2); </span><br><span class="line"><span class="comment">/* array1 值为  [12 , "foo" , &#123;name "Joe"&#125; , -2458 , "Doe" , 555 , 100] */</span></span><br></pre></td></tr></table></figure><h3 id="求数组极值"><a href="#求数组极值" class="headerlink" title="求数组极值"></a>求数组极值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">5</span>, <span class="number">458</span> , <span class="number">120</span> , <span class="number">-215</span> ]; </span><br><span class="line"><span class="keyword">var</span> maxInNumbers = <span class="built_in">Math</span>.max.apply(<span class="built_in">Math</span>, numbers), <span class="comment">//458</span></span><br><span class="line">    minInNumbers = <span class="built_in">Math</span>.min.apply(<span class="built_in">Math</span>, numbers); <span class="comment">//-215</span></span><br></pre></td></tr></table></figure><h3 id="改造-console-log"><a href="#改造-console-log" class="headerlink" title="改造 console.log()"></a>改造 console.log()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>); <span class="comment">// 将 arguments 伪数组转化为标准数组</span></span><br><span class="line">  args.unshift(<span class="string">'(app)'</span>); <span class="comment">// 给每一个 log 消息添加一个 ”(app)” 的前辍</span></span><br><span class="line">  <span class="built_in">console</span>.log.apply(<span class="built_in">console</span>, args); </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">log(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">// (app) 1 2 3</span></span><br></pre></td></tr></table></figure><h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><p>bind()方法会创建一个新函数，称为绑定函数，当调用这个绑定函数时，会以传入 bind()方法的第一个参数作为 this，传入 bind() 方法的之后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">    bar : <span class="number">1</span>,</span><br><span class="line">    eventBind: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">'.someClass'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.bar);      <span class="comment">//1</span></span><br><span class="line">        &#125;.bind(<span class="keyword">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果多次调用 bind() ，仍然会输出第一次的结果。在Javascript中，多次 bind() 是无效的。</p><p>另外 bind 是返回对应函数，便于稍后调用；apply 、call 则是立即调用。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    x: <span class="number">81</span>,</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">    getX: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(foo.getX.bind(obj)());  <span class="comment">//81 注意到多一个小括号</span></span><br><span class="line"><span class="built_in">console</span>.log(foo.getX.call(obj));    <span class="comment">//81</span></span><br><span class="line"><span class="built_in">console</span>.log(foo.getX.apply(obj));   <span class="comment">//81</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>arguments、callee、caller</title>
      <link href="/2017/03/03/arguments%E3%80%81callee%E3%80%81caller/"/>
      <url>/2017/03/03/arguments%E3%80%81callee%E3%80%81caller/</url>
      
        <content type="html"><![CDATA[<h2 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h2><p>arguments 是函数调用时，创建的一个伪数组，它存储实际传递给函数的参数。<br>arguments 是一个对象，它有两个常用的属性：length 、callee 。<br>需要注意的是 arguments 并不局限于函数声明的参数列表，举例如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">obj</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log( <span class="string">'arguments instanceof Array? '</span> + (<span class="built_in">arguments</span> <span class="keyword">instanceof</span> <span class="built_in">Array</span>) ); <span class="comment">// false</span></span><br><span class="line">   <span class="built_in">console</span>.log( <span class="string">'arguments instanceof Object? '</span> + (<span class="built_in">arguments</span> <span class="keyword">instanceof</span> <span class="built_in">Object</span>) ); <span class="comment">// true</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="built_in">arguments</span>); <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br><span class="line">obj(<span class="string">'monkey'</span>,<span class="string">'love'</span>,<span class="number">24</span>);</span><br></pre></td></tr></table></figure></p><a id="more"></a><h2 id="callee"><a href="#callee" class="headerlink" title="callee"></a>callee</h2><p>callee 是 arguments 对象的一个成员，它的值为“正被执行的Function对象”。<br>arguments.callee 在哪一个函数中运行，它就代表哪一个函数。 一般用在匿名函数中。<br>在匿名函数中有时会需要自己调用自己，但是由于是匿名函数，没有名子，无名可调。<br>这时就可以用arguments.callee来代替匿名的函数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n &gt; <span class="number">1</span>) <span class="keyword">return</span> n* <span class="built_in">arguments</span>.callee(n<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line">&#125;)(<span class="number">10</span>);</span><br></pre></td></tr></table></figure></p><p>上述代码用匿名函数实现的计算10的阶乘。用arguments.calle代替匿名函数。</p><h2 id="caller"><a href="#caller" class="headerlink" title="caller"></a>caller</h2><p>caller 是函数对象的一个属性，该属性保存着调用当前函数的函数。包含闭包，如果没有父函数，则为null。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//child是parent内的函数，并在parent内执行child</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parent</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">child</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">       <span class="built_in">console</span>.log( child.caller );</span><br><span class="line">   &#125;</span><br><span class="line">   child();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//parent1没有被别人调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parent1</span>(<span class="params"></span>)</span>&#123;  <span class="comment">//这里parent1没有父函数</span></span><br><span class="line">   <span class="built_in">console</span>.log(parent1.caller);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//parent2调用了child2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parent2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   child2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">child2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(child2.caller);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*执行</span></span><br><span class="line"><span class="comment">parent里嵌套了child函数</span></span><br><span class="line"><span class="comment">parent1没有嵌套函数</span></span><br><span class="line"><span class="comment">parent2调用了child2，child2不是嵌套在parent2里的函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">parent();</span><br><span class="line">parent1();</span><br><span class="line">parent2();</span><br></pre></td></tr></table></figure></p><p>在控制台会得到如图结果<br><img src="http://images2015.cnblogs.com/blog/887360/201603/887360-20160315192829271-1814708938.png" alt="结果"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解BFC</title>
      <link href="/2017/03/02/BFC%E7%90%86%E8%A7%A3%E8%AE%B0%E5%BD%95/"/>
      <url>/2017/03/02/BFC%E7%90%86%E8%A7%A3%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="BFC是什么"><a href="#BFC是什么" class="headerlink" title="BFC是什么"></a>BFC是什么</h2><p>在解释 BFC 是什么之前，需要先介绍 Box、Formatting Context的概念。</p><h3 id="Box"><a href="#Box" class="headerlink" title="Box"></a>Box</h3><p>Box 是 CSS 布局的对象和基本单位， 直观点来说，就是一个页面是由很多个 Box 组成的。元素的类型和 display 属性，决定了这个 Box 的类型。 不同类型的 Box， 会参与不同的 Formatting Context（一个决定如何渲染文档的容器），因此Box内的元素会以不同的方式渲染。主要有两类盒子：</p><ul><li>block-level box(块级元素):display 属性为 block, list-item, table 的元素，会生成 block-level box。并且参与 block fomatting context；</li><li>inline-level box(内联元素):display 属性为 inline, inline-block, inline-table 的元素，会生成 inline-level box。并且参与 inline formatting context；</li></ul><a id="more"></a><h3 id="Formatting-context"><a href="#Formatting-context" class="headerlink" title="Formatting context"></a>Formatting context</h3><p>Formatting context 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。最常见的 Formatting context 有 Block fomatting context (简称BFC)和 Inline formatting context (简称IFC)。</p><h3 id="BFC定义"><a href="#BFC定义" class="headerlink" title="BFC定义"></a>BFC定义</h3><p>BFC(Block formatting context)直译为”块级格式化上下文”。它是一个独立的渲染区域，<strong> 只有Block-level box参与 </strong>， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫无关系。</p><h2 id="BFC生成条件"><a href="#BFC生成条件" class="headerlink" title="BFC生成条件"></a>BFC生成条件</h2><ul><li>根元素</li><li>position为absolute或fixed</li><li>display为inline-block, table-cell, table-caption, flex, inline-flex</li><li>float不为none</li><li>overflow不为visible （ hidden，auto，scroll ）</li></ul><h2 id="BFC布局规则"><a href="#BFC布局规则" class="headerlink" title="BFC布局规则"></a>BFC布局规则</h2><ul><li>内部的Box会在垂直方向，一个接一个地放置。</li><li>Box垂直方向的距离由margin决定。属于<strong> 同一个 </strong>BFC的两个<strong> 相邻 </strong>Box的margin会发生重叠</li><li>每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</li><li>BFC的区域不会与float box重叠。</li><li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li><li>计算BFC的高度时，浮动元素也参与计算。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS数组迭代</title>
      <link href="/2017/03/01/JS%E6%95%B0%E7%BB%84%E8%BF%AD%E4%BB%A3/"/>
      <url>/2017/03/01/JS%E6%95%B0%E7%BB%84%E8%BF%AD%E4%BB%A3/</url>
      
        <content type="html"><![CDATA[<p>ECMAScript5为数组定义了5个迭代方法，每个方法都接受两个参数：每一项上运行的函数，运行该函数的作用域对象（可选）。</p><ul><li>every() 若数组每一项都符合函数要求，返回true，否则返回false</li><li>some() 若数组任意一项符合函数要求，返回true，否则返回false</li><li>filter() 对数组每一项运行函数，返回符合函数要求的项组成的数组</li><li>map() 对数组每一项运行函数，返回每次函数结果组成的数</li><li>forEach() 对数组每一项运行函数，无返回值</li></ul><a id="more"></a><p>实践出真知，以下代码是很好的例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>     numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line"><span class="keyword">var</span> everyResult = numbers.every(<span class="function"><span class="keyword">function</span> (<span class="params">item,index,array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (item &gt; <span class="number">2</span>);</span><br><span class="line">&#125;)    </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(everyResult); <span class="comment">//false </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> someResult = numbers.some(<span class="function"><span class="keyword">function</span> (<span class="params">item,index,array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (item&gt;<span class="number">2</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(someResult); <span class="comment">//true </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> filterResult = numbers.filter(<span class="function"><span class="keyword">function</span> (<span class="params">item,index,array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (item &gt; <span class="number">2</span>);</span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(filterResult); <span class="comment">//[3,4,5,4,3]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mapResult = numbers.map(<span class="function"><span class="keyword">function</span> (<span class="params">item,index,array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item*<span class="number">2</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mapResult); <span class="comment">//[2,4,6,8,10,8,6,4,2]</span></span><br><span class="line"></span><br><span class="line">numbers.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item,index,array</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(item) <span class="comment">//依次输出数组的每一项</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS3动画小demo</title>
      <link href="/2017/03/01/CSS3%E5%8A%A8%E7%94%BB%E5%B0%8Fdemo/"/>
      <url>/2017/03/01/CSS3%E5%8A%A8%E7%94%BB%E5%B0%8Fdemo/</url>
      
        <content type="html"><![CDATA[<p>利用css3的动画属性可以实现很多有趣的动画效果。</p><h2 id="animation-循环动画"><a href="#animation-循环动画" class="headerlink" title="animation 循环动画"></a>animation 循环动画</h2><p>animation-iteration-count 属性设置为 infinite 可以使动画循环播放。</p><h3 id="loading效果"><a href="#loading效果" class="headerlink" title="loading效果"></a>loading效果</h3><p><a href="/demo/loading.html">demo1</a><br>定义一个垂直伸缩的 keyframes ，然后绑定在每个条子上，设置不同的animation-delay，就可以使每个条子运动起来，整体成波浪线运动。当网页中有需要等待的请求时，我们就可以插入这段动画，优化用户体验。<br><a id="more"></a></p><h3 id="摆钟效果"><a href="#摆钟效果" class="headerlink" title="摆钟效果"></a>摆钟效果</h3><p><a href="/demo/pendulum.html">demo2</a><br>这个 demo 用到了 transform-origin 属性，将钟表和秒针的旋转中心设置在不同的地方，利用相对定位和绝对相对，使秒钟旋转中心根据钟表的位置定位，从而使钟表做钟摆运动的同时，秒钟做圆周运动。再将 animation-direction 属性值设为 alternate ，使钟表来回运动。</p><h2 id="transition-过渡动画"><a href="#transition-过渡动画" class="headerlink" title="transition 过渡动画"></a>transition 过渡动画</h2><p>transition 属性和 :hover 联用实现酷炫的动态效果。</p><h3 id="朦层效果"><a href="#朦层效果" class="headerlink" title="朦层效果"></a>朦层效果</h3><p><a href="/demo/mask_hover.html">demo3</a><br>鼠标移到图片上，边框旋转180度，显示朦层和字体，鼠标移出还原。朦层和字体在同一个 div 下，该 div 和边框 div 都设置 <code>position:absolute</code> ，最外层 div 设置 <code>position:relative</code> 。该效果可以用于图片信息的展示。</p><h3 id="折角效果"><a href="#折角效果" class="headerlink" title="折角效果"></a>折角效果</h3><p><a href="/demo/dog-ear_hover.html">demo4</a><br>鼠标移到图片上，显示折角，点击折角图片消失显示按钮，点击小叉叉图片又动态地恢复。利用 before 伪类创建折角，初始 <code>border-width: 0;</code>，当鼠标移入时设置 <code>border-right-width: 80px;border-bottom-width: 80px;</code> ，为了使折角两边颜色不一样设置 <code>border-color: rgba(0, 0, 0, 0.2) #fff;</code>。该效果可用于图片的翻页。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS3转换过渡动画</title>
      <link href="/2017/03/01/CSS3%E8%BD%AC%E6%8D%A2%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB/"/>
      <url>/2017/03/01/CSS3%E8%BD%AC%E6%8D%A2%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<p>CSS3中有三个属性：transform、transition、animation，一直容易搞混，今天特意拎出来理一理。</p><h2 id="transform-转换"><a href="#transform-转换" class="headerlink" title="transform 转换"></a>transform 转换</h2><p>transform 能够对元素进行移动、缩放、转动、拉长或拉伸。transform 分为2D转换和3D转换，由于目前浏览器对3D转换的支持度还不好，所以以下主要讲解2D转换。</p><a id="more"></a><h3 id="2D转换方法"><a href="#2D转换方法" class="headerlink" title="2D转换方法"></a>2D转换方法</h3><ul><li>translate(x,y) 移动，参数为像素值 <ul><li>translateX(n)</li><li>translateY(n)</li></ul></li><li>rotate(angle) 转动，参数为角度</li><li>scale(x,y) 缩放，参数为倍数<ul><li>scaleX(n)</li><li>scaleY(n)</li></ul></li><li>skew(x-angle,y-angle) 倾斜，参数为角度<ul><li>skewX(angle) </li><li>skewY(angle) </li></ul></li><li>matrix() 参数为六个值的矩阵，可以描述以上所有转换，用于复杂的转换</li></ul><h3 id="transform-origin"><a href="#transform-origin" class="headerlink" title="transform-origin"></a>transform-origin</h3><p>另外，还有一个transform-origin属性，用来改变被转换元素的位置，一般和rotate()配合使用。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line"><span class="attribute">transform-origin</span>:<span class="number">20%</span> <span class="number">40%</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">-ms-transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>); <span class="comment">/* IE 9 */</span></span><br><span class="line"><span class="attribute">-ms-transform-origin</span>:<span class="number">20%</span> <span class="number">40%</span>; <span class="comment">/* IE 9 */</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);<span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line"><span class="attribute">-webkit-transform-origin</span>:<span class="number">20%</span> <span class="number">40%</span>;<span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">-moz-transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);<span class="comment">/* Firefox */</span></span><br><span class="line"><span class="attribute">-moz-transform-origin</span>:<span class="number">20%</span> <span class="number">40%</span>;<span class="comment">/* Firefox */</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">-o-transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);<span class="comment">/* Opera */</span></span><br><span class="line"><span class="attribute">-o-transform-origin</span>:<span class="number">20%</span> <span class="number">40%</span>;<span class="comment">/* Opera */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>transform-origin的参数可以为：left、right、center、length、% 。</p><h2 id="transition-过渡"><a href="#transition-过渡" class="headerlink" title="transition 过渡"></a>transition 过渡</h2><p>该属性和 :hover 配合使用，实现鼠标移入动画效果。<br>要实现过渡，必须规定两项内容：</p><ul><li>规定您希望把效果添加到哪个 CSS 属性上</li><li>规定效果的时长</li></ul><h3 id="过渡属性"><a href="#过渡属性" class="headerlink" title="过渡属性"></a>过渡属性</h3><table><thead><tr><th>属性</th><th>描述                                    </th></tr></thead><tbody><tr><td> transition</td><td>简写属性，在一个属性中设置四个过渡属性。</td></tr><tr><td> transition-property</td><td>规定应用过渡的 CSS 属性的名称。         </td></tr><tr><td> transition-duration</td><td>定义过渡效果花费的时间。默认是 0。        </td></tr><tr><td> transition-timing-function</td><td>规定过渡效果的时间曲线。默认是 “ease”。   </td></tr><tr><td> transition-delay</td><td>规定过渡效果何时开始。默认是 0。          </td></tr></tbody></table><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line"><span class="attribute">background</span>:yellow;</span><br><span class="line"><span class="attribute">transition-property</span>:width <span class="number">1s</span> linear <span class="number">2s</span>;</span><br><span class="line"><span class="comment">/* Firefox 4 */</span></span><br><span class="line"><span class="attribute">-moz-transition</span>:width <span class="number">1s</span> linear <span class="number">2s</span>;</span><br><span class="line"><span class="comment">/* Safari and Chrome */</span></span><br><span class="line"><span class="attribute">-webkit-transition</span>:width <span class="number">1s</span> linear <span class="number">2s</span>;</span><br><span class="line"><span class="comment">/* Opera */</span></span><br><span class="line"><span class="attribute">-o-transition</span>:width <span class="number">1s</span> linear <span class="number">2s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="animation-动画"><a href="#animation-动画" class="headerlink" title="animation 动画"></a>animation 动画</h2><p>该属性和 @keyframes 配合使用。</p><h3 id="keyframes"><a href="#keyframes" class="headerlink" title="@keyframes"></a>@keyframes</h3><p>@keyframes 规则用于创建动画。在 @keyframes 中规定某项 CSS 样式，就能创建由当前样式逐渐改为新样式的动画效果。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> myfirst</span><br><span class="line">&#123;</span><br><span class="line"><span class="selector-tag">from</span> &#123;<span class="attribute">background</span>: red;&#125;</span><br><span class="line"><span class="selector-tag">to</span> &#123;<span class="attribute">background</span>: yellow;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@-moz-keyframes</span> myfirst /* Firefox */</span><br><span class="line">&#123;</span><br><span class="line"><span class="selector-tag">from</span> &#123;<span class="attribute">background</span>: red;&#125;</span><br><span class="line"><span class="selector-tag">to</span> &#123;<span class="attribute">background</span>: yellow;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> myfirst /* Safari 和 Chrome */</span><br><span class="line">&#123;</span><br><span class="line"><span class="selector-tag">from</span> &#123;<span class="attribute">background</span>: red;&#125;</span><br><span class="line"><span class="selector-tag">to</span> &#123;<span class="attribute">background</span>: yellow;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@-o-keyframes</span> myfirst /* Opera */</span><br><span class="line">&#123;</span><br><span class="line"><span class="selector-tag">from</span> &#123;<span class="attribute">background</span>: red;&#125;</span><br><span class="line"><span class="selector-tag">to</span> &#123;<span class="attribute">background</span>: yellow;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>@keyframes中也可以用具体的百分比<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> myfirst</span><br><span class="line">&#123;</span><br><span class="line">0%   &#123;<span class="attribute">background</span>: red;&#125;</span><br><span class="line">25%  &#123;<span class="attribute">background</span>: yellow;&#125;</span><br><span class="line">50%  &#123;<span class="attribute">background</span>: blue;&#125;</span><br><span class="line">100% &#123;<span class="attribute">background</span>: green;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在 @keyframes 中创建动画，把它捆绑到某个选择器，否则不会产生动画效果。<br>通过规定至少以下两项 CSS3 动画属性，即可将动画绑定到选择器：</p><ul><li>规定动画的名称</li><li>规定动画的时长<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">animation</span>: myfirst <span class="number">5s</span>;</span><br><span class="line"><span class="attribute">-moz-animation</span>: myfirst <span class="number">5s</span>;<span class="comment">/* Firefox */</span></span><br><span class="line"><span class="attribute">-webkit-animation</span>: myfirst <span class="number">5s</span>;<span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line"><span class="attribute">-o-animation</span>: myfirst <span class="number">5s</span>;<span class="comment">/* Opera */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="动画属性"><a href="#动画属性" class="headerlink" title="动画属性"></a>动画属性</h3><table><thead><tr><th style="text-align:right">属性</th><th style="text-align:right">描述</th></tr></thead><tbody><tr><td style="text-align:right">@keyframes</td><td style="text-align:right">规定动画。</td></tr><tr><td style="text-align:right">animation</td><td style="text-align:right">所有动画属性的简写属性，除了 animation-play-state 属性。</td></tr><tr><td style="text-align:right">animation-name</td><td style="text-align:right">规定 @keyframes 动画的名称。</td></tr><tr><td style="text-align:right">animation-duration</td><td style="text-align:right">规定动画完成一个周期所花费的秒或毫秒。默认是 0。</td></tr><tr><td style="text-align:right">animation-timing-function</td><td style="text-align:right">规定动画的速度曲线。默认是 “ease”。</td></tr><tr><td style="text-align:right">animation-delay</td><td style="text-align:right">规定动画何时开始。默认是 0。</td></tr><tr><td style="text-align:right">animation-iteration-count</td><td style="text-align:right">规定动画被播放的次数。默认是 1。</td></tr><tr><td style="text-align:right">animation-direction</td><td style="text-align:right">规定动画是否在下一周期逆向地播放。默认是 “normal”。</td></tr><tr><td style="text-align:right">animation-play-state</td><td style="text-align:right">规定动画是否正在运行或暂停。默认是 “running”。</td></tr><tr><td style="text-align:right">animation-fill-mode</td><td style="text-align:right">规定对象动画时间之外的状态。</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue.js基础3</title>
      <link href="/2017/02/28/Vue-js%E5%9F%BA%E7%A1%803/"/>
      <url>/2017/02/28/Vue-js%E5%9F%BA%E7%A1%803/</url>
      
        <content type="html"><![CDATA[<h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><p>除了默认设置的核心指令( v-model 和 v-show ), Vue 也允许注册自定义指令。注册全局指令的关键方法是directive(),注册局部指令的关键方法是directives（）</p><h4 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h4><p>指令定义函数提供了几个钩子函数（可选）：</p><ul><li>bind: 只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个在绑定时执行一次的初始化动作。</li><li>inserted: 被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中）。<a id="more"></a></li><li>update: 被绑定元素所在的模板更新时调用，而不论绑定值是否变化。通过比较更新前后的绑定值，可以忽略不必要的模板更新（详细的钩子函数参数见下）。</li><li>componentUpdated: 被绑定元素所在模板完成一次更新周期时调用。<br>unbind: 只调用一次， 指令与元素解绑时调用。</li></ul><h4 id="钩子函数的参数"><a href="#钩子函数的参数" class="headerlink" title="钩子函数的参数"></a>钩子函数的参数</h4><p>钩子函数的参数有：</p><ul><li>el: 指令所绑定的元素，可以用来直接操作 DOM 。</li><li>binding: 一个对象，包含以下属性：<ul><li>name: 指令名，不包括 v- 前缀。</li><li>value: 指令的绑定值， 例如： v-my-directive=”1 + 1”, value 的值是 2。</li><li>oldValue: 指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。</li><li>expression: 绑定值的字符串形式。 例如 v-my-directive=”1 + 1” ， expression 的值是 “1 + 1”。</li><li>arg: 传给指令的参数。例如 v-my-directive:foo， arg 的值是 “foo”。</li><li>modifiers: 一个包含修饰符的对象。 例如： v-my-directive.foo.bar, 修饰符对象 modifiers 的值是 { foo: true, bar: true }。</li></ul></li><li>vnode: Vue 编译生成的虚拟节点。</li><li>oldVnode: 上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。</li></ul><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>Vue.js 路由允许我们通过不同的 URL 访问不同的内容。Vue.js 路由需要载入 vue-router 库。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue-router/dist/vue-router.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello App!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用 router-link 组件来导航. --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过传入 `to` 属性指定链接. --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;router-link&gt; 默认会被渲染成一个 `&lt;a&gt;` 标签 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/foo"</span>&gt;</span>Go to Foo<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/bar"</span>&gt;</span>Go to Bar<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 路由出口 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 0. 如果使用模块化机制编程，導入Vue和VueRouter，要调用 Vue.use(VueRouter)</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 1. 定义（路由）组件。</span></span><br><span class="line"><span class="comment">// 可以从其他文件 import 进来</span></span><br><span class="line"><span class="keyword">const</span> Foo = &#123; <span class="attr">template</span>: <span class="string">'&lt;div&gt;foo&lt;/div&gt;'</span> &#125;</span><br><span class="line"><span class="keyword">const</span> Bar = &#123; <span class="attr">template</span>: <span class="string">'&lt;div&gt;bar&lt;/div&gt;'</span> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 2. 定义路由</span></span><br><span class="line"><span class="comment">// 每个路由应该映射一个组件。 其中"component" 可以是</span></span><br><span class="line"><span class="comment">// 通过 Vue.extend() 创建的组件构造器，</span></span><br><span class="line"><span class="comment">// 或者，只是一个组件配置对象。</span></span><br><span class="line"><span class="comment">// 我们晚点再讨论嵌套路由。</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/foo'</span>, <span class="attr">component</span>: Foo &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/bar'</span>, <span class="attr">component</span>: Bar &#125;</span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 3. 创建 router 实例，然后传 `routes` 配置</span></span><br><span class="line"><span class="comment">// 你还可以传别的配置参数, 不过先这么简单着吧。</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes <span class="comment">// （缩写）相当于 routes: routes</span></span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 4. 创建和挂载根实例。</span></span><br><span class="line"><span class="comment">// 记得要通过 router 配置参数注入路由，</span></span><br><span class="line"><span class="comment">// 从而让整个应用都有路由功能</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在，应用已经启动了！</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue.js基础2</title>
      <link href="/2017/02/28/Vue-js%E5%9F%BA%E7%A1%802/"/>
      <url>/2017/02/28/Vue-js%E5%9F%BA%E7%A1%802/</url>
      
        <content type="html"><![CDATA[<p>继续组件的内容，接下来是 vue 组件的重要内容。</p><h4 id="父子组件"><a href="#父子组件" class="headerlink" title="父子组件"></a>父子组件</h4><p>子组件只能在父组件中只用，写在html中的是父组件的标签。使用组件有三步：定义，注册，创建根实例。以下代码是很好的例子：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">//定义组件 </span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> child = Vue.extend(&#123;</span></span><br><span class="line"><span class="xml">    template: "<span class="tag">&lt;<span class="name">div</span>&gt;</span>this is a child component!<span class="tag">&lt;/<span class="name">div</span>&gt;</span>"</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> parent = Vue.extend(&#123;</span></span><br><span class="line"><span class="xml">    template: "<span class="tag">&lt;<span class="name">div</span>&gt;</span>this is a parent component! <span class="tag">&lt;<span class="name">child</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>",</span></span><br><span class="line">    components: &#123;</span><br><span class="line"><span class="javascript">      <span class="string">'child'</span>: child </span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="javascript">  <span class="comment">//注册组件</span></span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">'my-component'</span>, parent)</span></span><br><span class="line"><span class="javascript">  <span class="comment">//创建根实例</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el:<span class="string">'#example'</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><h4 id="组件选项问题"><a href="#组件选项问题" class="headerlink" title="组件选项问题"></a>组件选项问题</h4><p>传入 Vue 构造器的多数选项也可以用在 Vue.extend() 中，不过有两个特例： data 和 el。如果我们简单地把一个对象作为 data 选项传给 Vue.extend（）， 所有的实例将共享同一个 <code>data</code> 对象！这基本不是我们想要的，因此我们应当使用一个函数作为 <code>data</code> 选项，让这个函数返回一个新对象：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> child = Vue.extend(&#123;</span><br><span class="line">template: <span class="string">"&lt;div&gt;this is a child component!&lt;/div&gt;"</span></span><br><span class="line">data : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;<span class="attr">a</span>:<span class="number">1</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>同理，<code>el</code> 选项用在 <code>Vue.extend()</code> 中时也须是一个函数。</p><h4 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h4><p>组件实例的作用域是孤立的。这意味着不能并且不应该在子组件的模板内直接引用父组件的数据。可以使用 props 把数据传给子组件。<br><code>props</code>是组件数据的一个字段，期望从父组件传下来。子组件需要显式地用<code>props</code>选项声明<code>props</code>，同时可以用 v-bind 动态绑定 props 的值到父组件的数据中。每当父组件的数据变化时，该变化也会传导给子组件：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"parentMsg"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">child</span> <span class="attr">v-bind:message</span>=<span class="string">"parentMsg"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">Vue.component(<span class="string">'child'</span>, &#123;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 声明 props</span></span></span><br><span class="line"><span class="javascript">  props: [<span class="string">'message'</span>],</span></span><br><span class="line"><span class="xml">  template: '<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="javascript"><span class="comment">// 创建根实例</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line"><span class="javascript">    parentMsg: <span class="string">'父组件内容'</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>子组件中：<code>props:[&#39;key&#39;]</code><br>父组件中：<code>key：&#39;value&#39;</code><br>从而做到将父组件中的数据传给子组件。注意:<code>prop</code>是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来。</p><h4 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h4><p>你现在肯定很想知道，那么子组件怎么把数据给父组件呢？方法就是自定义事件！<br>使用 <code>$on(eventName)</code> 监听事件<br>使用 <code>$emit(eventName)</code> 触发事件<br>另外，父组件可以在使用子组件的地方直接用 <code>v-on</code> 来监听子组件触发的事件。<br>以下实例中子组件已经和它外部完全解耦了。它所做的只是触发一个父组件关心的内部事件。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"counter-event-example"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; total &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button-counter</span> <span class="attr">v-on:increment</span>=<span class="string">"incrementTotal"</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button-counter</span> <span class="attr">v-on:increment</span>=<span class="string">"incrementTotal"</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">Vue.component(<span class="string">'button-counter'</span>, &#123;</span></span><br><span class="line"><span class="xml">  template: '<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"increment"</span>&gt;</span>&#123;&#123; counter &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span>',</span></span><br><span class="line"><span class="javascript">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      counter: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    increment: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.counter += <span class="number">1</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$emit(<span class="string">'increment'</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#counter-event-example'</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    total: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    incrementTotal: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.total += <span class="number">1</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>increment</code>是自定义事件，<code>$emit()</code>触发事件，父组件中<code>v-on</code>监听了该事件，并挂载了事件响应程序，当子组件中<code>increment</code>事件被触发，父组件能捕捉到并触发对应的响应程序。通过响应程序来改变父组件中的数据，也就是说，最后改变父组件中的数据需要通过父组件中的<code>methods</code>，子组件只是通过自定义事件触发了父组件中的响应程序。 而父组件向子组件传递数据则是通过子组件的<code>props</code>属性值联系在一起的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue.js基础</title>
      <link href="/2017/02/28/Vue-js%E5%9F%BA%E7%A1%80/"/>
      <url>/2017/02/28/Vue-js%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>一开始接触vue的时候老实说我是一脸懵逼的，一下子还没从jQuery的思维中解脱出来，因此研究了好久的，过了一段时间后，再翻开vue的文档，总算是有些眉目了，现在记录下自己的理解吧，有写的不对的地方欢迎指正。这里只记录了我个人的理解，要详细的推荐<a href="http://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">Vue官方文档</a>。</p><h3 id="我理解的vue核心思想"><a href="#我理解的vue核心思想" class="headerlink" title="我理解的vue核心思想"></a>我理解的vue核心思想</h3><p>1.视图参数化，数据驱动视图<br>view(DOM节点)的属性被参数化，参数化的值被记录在Vue实例的data属性中，当通过methods中的函数改变data中的数据时，view也会发生变化，从而达到数据驱动视图的作用。<br><a id="more"></a><br>2.DOM结构组件化<br>组件化的思想提高了DOM结构的复用性，使搭架复杂的DOM结构更加简单快捷。组件需要先注册<code>Vue.component(tagName, options)</code> 注册后就可以在HTML文档中直接使用了<code>&lt;tagName&gt;&lt;/tagName&gt;</code></p><h3 id="v-bind、v-on"><a href="#v-bind、v-on" class="headerlink" title="v-bind、v-on"></a>v-bind、v-on</h3><p>v-bind：的缩写为 ：用来绑定元素的属性，属性的值被记录在Vue.data中<br>v-on：的缩写为 @ 用来绑定元素的事件，事件响应程序被记录在Vue.methods中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[red,blue ? 'blue' : 'green']"</span> <span class="attr">v-on:click</span>=<span class="string">'changeColor'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">...</span><br><span class="line">changeColor:function () &#123;</span><br><span class="line">    this.blue = !this.blue</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h3><p>computed是基于依赖的缓存，当重新渲染时，methods中的函数会被重新调用，而computed中的函数在依赖不变的情况下不会被调用</p><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><p>v-model用在表单中，实现双向数据绑定。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>input 元素：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"message"</span> <span class="attr">placeholder</span>=<span class="string">"编辑我……"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>消息是: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>textarea 元素：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"white-space: pre"</span>&gt;</span>&#123;&#123; message2 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">"message2"</span> <span class="attr">placeholder</span>=<span class="string">"多行文本输入……"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line"><span class="javascript">    message: <span class="string">'Runoob'</span>,</span></span><br><span class="line"><span class="javascript">    message2: <span class="string">'菜鸟教程\r\nhttp://www.runoob.com'</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>用户更改表单中的输入，会改变视图层的显示。</p><h4 id="lazy"><a href="#lazy" class="headerlink" title=".lazy"></a>.lazy</h4><p>在默认情况下， v-model 在 input 事件中同步输入框的值与数据，但你可以添加一个修饰符 lazy ，从而转变为在 change 事件中同步：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.lazy</span>=<span class="string">"msg"</span> &gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="number"><a href="#number" class="headerlink" title=".number"></a>.number</h4><p>如果想自动将用户的输入值转为 Number 类型（如果原值的转换结果为 NaN 则返回原值），可以添加一个修饰符 number 给 v-model 来处理输入值：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.number</span>=<span class="string">"age"</span> <span class="attr">type</span>=<span class="string">"number"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="trim"><a href="#trim" class="headerlink" title=".trim"></a>.trim</h4><p>如果要自动过滤用户输入的首尾空格，可以添加 trim 修饰符到 v-model 上过滤输入：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.trim</span>=<span class="string">"msg"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><h4 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">runoob</span>&gt;</span><span class="tag">&lt;/<span class="name">runoob</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 注册</span></span></span><br><span class="line"><span class="javascript">Vue.component(<span class="string">'runoob'</span>, &#123;</span></span><br><span class="line"><span class="xml">  template: '<span class="tag">&lt;<span class="name">h1</span>&gt;</span>自定义组件!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="javascript"><span class="comment">// 创建根实例</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span></span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Child = &#123;</span><br><span class="line">    template:<span class="string">'&lt;h1&gt;自定义组件&lt;/h1&gt;'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">'#app'</span>,</span><br><span class="line">    components:&#123;</span><br><span class="line">        <span class="string">'runoob'</span>:Child</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
